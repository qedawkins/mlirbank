module attributes {torch.debug_module_name = "_lambda"} {
  util.global private @cst_728 = #util.byte_pattern<1> : tensor<4096xf16>
  util.global private @cst_599 = #util.byte_pattern<2> : tensor<4096x32x1xf16>
  util.global private @cst_632 = #util.byte_pattern<3> : tensor<11008x32x1xf16>
  util.global private @cst_489 = #util.byte_pattern<4> : tensor<4096x86x1xf16>
  util.global private @cst_443 = #util.byte_pattern<5> : tensor<4096x32x1xf16>
  util.global private @cst_58 = #util.byte_pattern<6> : tensor<4096x4096xi4>
  util.global private @cst_29 = #util.byte_pattern<7> : tensor<11008x4096xi4>
  util.global private @cst_383 = #util.byte_pattern<8> : tensor<4096x32x1xf16>
  util.global private @cst_367 = #util.byte_pattern<9> : tensor<11008x32x1xf16>
  util.global private @cst_501 = #util.byte_pattern<10> : tensor<4096x32x1xf16>
  util.global private @cst_592 = #util.byte_pattern<11> : tensor<11008x32x1xf16>
  util.global private @cst_524 = #util.byte_pattern<12> : tensor<4096x32x1xf16>
  util.global private @cst_56 = #util.byte_pattern<13> : tensor<11008x4096xi4>
  util.global private @cst_107 = #util.byte_pattern<14> : tensor<4096x4096xi4>
  util.global private @cst_421 = #util.byte_pattern<15> : tensor<11008x32x1xf16>
  util.global private @cst_190 = #util.byte_pattern<16> : tensor<11008x4096xi4>
  util.global private @cst_570 = #util.byte_pattern<17> : tensor<4096x32x1xf16>
  util.global private @cst_642 = #util.byte_pattern<18> : tensor<4096x32x1xf16>
  util.global private @cst_48 = #util.byte_pattern<19> : tensor<4096x11008xi4>
  util.global private @cst_252 = #util.byte_pattern<20> : tensor<4096x86x1xf16>
  util.global private @cst_18 = #util.byte_pattern<21> : tensor<4096x4096xi4>
  util.global private @cst_541 = #util.byte_pattern<22> : tensor<4096x32x1xf16>
  util.global private @cst_75 = #util.byte_pattern<23> : tensor<4096x4096xi4>
  util.global private @cst_231 = #util.byte_pattern<24> : tensor<4096x32x1xf16>
  util.global private @cst_745 = 9.9999999999999995E-7 : f64
  util.global private @cst_665 = #util.byte_pattern<25> : tensor<4096x32x1xf16>
  util.global private @cst_712 = #util.byte_pattern<26> : tensor<4096xf16>
  util.global private @cst_557 = #util.byte_pattern<27> : tensor<4096x32x1xf16>
  util.global private @cst_159 = #util.byte_pattern<28> : tensor<4096x4096xi4>
  util.global private @cst_701 = #util.byte_pattern<29> : tensor<4096xf16>
  util.global private @cst_497 = #util.byte_pattern<30> : tensor<4096x32x1xf16>
  util.global private @cst_401 = #util.byte_pattern<31> : tensor<4096x32x1xf16>
  util.global private @cst_737 = #util.byte_pattern<32> : tensor<1x1x4096x128xf16>
  util.global private @cst_31 = #util.byte_pattern<33> : tensor<4096x4096xi4>
  util.global private @cst_727 = #util.byte_pattern<34> : tensor<4096xf16>
  util.global private @cst_580 = #util.byte_pattern<35> : tensor<4096x32x1xf16>
  util.global private @cst_391 = #util.byte_pattern<36> : tensor<4096x86x1xf16>
  util.global private @cst_365 = #util.byte_pattern<37> : tensor<11008x32x1xf16>
  util.global private @cst_302 = #util.byte_pattern<38> : tensor<4096x32x1xf16>
  util.global private @cst_76 = #util.byte_pattern<39> : tensor<4096x11008xi4>
  util.global private @cst_120 = #util.byte_pattern<40> : tensor<11008x4096xi4>
  util.global private @cst_385 = #util.byte_pattern<41> : tensor<4096x32x1xf16>
  util.global private @cst_255 = #util.byte_pattern<42> : tensor<11008x32x1xf16>
  util.global private @cst_65 = #util.byte_pattern<43> : tensor<4096x4096xi4>
  util.global private @cst_203 = #util.byte_pattern<44> : tensor<11008x4096xi4>
  util.global private @cst_397 = #util.byte_pattern<45> : tensor<4096x32x1xf16>
  util.global private @cst_176 = #util.byte_pattern<46> : tensor<11008x4096xi4>
  util.global private @cst_239 = #util.byte_pattern<47> : tensor<11008x32x1xf16>
  util.global private @cst_660 = #util.byte_pattern<48> : tensor<11008x32x1xf16>
  util.global private @cst_3 = #util.byte_pattern<49> : tensor<4096x4096xi4>
  util.global private @cst_461 = #util.byte_pattern<50> : tensor<4096x86x1xf16>
  util.global private @cst_124 = #util.byte_pattern<51> : tensor<4096x4096xi4>
  util.global private @cst_649 = #util.byte_pattern<52> : tensor<4096x32x1xf16>
  util.global private @cst = #util.byte_pattern<53> : tensor<4096x11008xi4>
  util.global private @cst_644 = #util.byte_pattern<54> : tensor<4096x86x1xf16>
  util.global private @cst_559 = #util.byte_pattern<55> : tensor<4096x86x1xf16>
  util.global private @cst_234 = #util.byte_pattern<56> : tensor<4096x32x1xf16>
  util.global private @cst_530 = #util.byte_pattern<57> : tensor<4096x32x1xf16>
  util.global private @cst_527 = #util.byte_pattern<58> : tensor<4096x32x1xf16>
  util.global private @cst_634 = #util.byte_pattern<59> : tensor<11008x32x1xf16>
  util.global private @cst_256 = #util.byte_pattern<60> : tensor<11008x32x1xf16>
  util.global private @cst_375 = #util.byte_pattern<61> : tensor<4096x32x1xf16>
  util.global private @cst_683 = #util.byte_pattern<62> : tensor<4096xf16>
  util.global private @cst_561 = #util.byte_pattern<63> : tensor<11008x32x1xf16>
  util.global private @cst_503 = #util.byte_pattern<64> : tensor<4096x86x1xf16>
  util.global private @cst_428 = #util.byte_pattern<65> : tensor<4096x32x1xf16>
  util.global private @cst_303 = #util.byte_pattern<66> : tensor<4096x32x1xf16>
  util.global private @cst_435 = #util.byte_pattern<67> : tensor<11008x32x1xf16>
  util.global private @cst_703 = #util.byte_pattern<68> : tensor<4096xf16>
  util.global private @cst_438 = #util.byte_pattern<69> : tensor<11008x32x1xf16>
  util.global private @cst_193 = #util.byte_pattern<70> : tensor<4096x4096xi4>
  util.global private @cst_183 = #util.byte_pattern<71> : tensor<11008x4096xi4>
  util.global private @cst_139 = #util.byte_pattern<72> : tensor<4096x11008xi4>
  util.global private @cst_422 = #util.byte_pattern<73> : tensor<11008x32x1xf16>
  util.global private @cst_569 = #util.byte_pattern<74> : tensor<4096x32x1xf16>
  util.global private @cst_317 = #util.byte_pattern<75> : tensor<4096x32x1xf16>
  util.global private @cst_565 = #util.byte_pattern<76> : tensor<4096x32x1xf16>
  util.global private @cst_291 = #util.byte_pattern<77> : tensor<4096x32x1xf16>
  util.global private @cst_160 = #util.byte_pattern<78> : tensor<4096x11008xi4>
  util.global private @cst_162 = #util.byte_pattern<79> : tensor<11008x4096xi4>
  util.global private @cst_170 = #util.byte_pattern<80> : tensor<4096x4096xi4>
  util.global private @cst_216 = #util.byte_pattern<81> : tensor<4096x11008xi4>
  util.global private @cst_482 = #util.byte_pattern<82> : tensor<4096x32x1xf16>
  util.global private @cst_112 = #util.byte_pattern<83> : tensor<11008x4096xi4>
  util.global private @cst_246 = #util.byte_pattern<84> : tensor<4096x32x1xf16>
  util.global private @cst_549 = #util.byte_pattern<85> : tensor<11008x32x1xf16>
  util.global private @cst_406 = #util.byte_pattern<86> : tensor<4096x86x1xf16>
  util.global private @cst_586 = #util.byte_pattern<87> : tensor<4096x32x1xf16>
  util.global private @cst_247 = #util.byte_pattern<88> : tensor<4096x32x1xf16>
  util.global private @cst_542 = #util.byte_pattern<89> : tensor<4096x32x1xf16>
  util.global private @cst_114 = #util.byte_pattern<90> : tensor<4096x4096xi4>
  util.global private @cst_214 = #util.byte_pattern<91> : tensor<4096x4096xi4>
  util.global private @cst_339 = #util.byte_pattern<92> : tensor<11008x32x1xf16>
  util.global private @cst_725 = #util.byte_pattern<93> : tensor<4096xf16>
  util.global private @cst_623 = #util.byte_pattern<94> : tensor<4096x32x1xf16>
  util.global private @cst_271 = #util.byte_pattern<95> : tensor<4096x32x1xf16>
  util.global private @cst_215 = #util.byte_pattern<96> : tensor<4096x4096xi4>
  util.global private @cst_423 = #util.byte_pattern<97> : tensor<11008x32x1xf16>
  util.global private @cst_518 = #util.byte_pattern<98> : tensor<4096x86x1xf16>
  util.global private @cst_566 = #util.byte_pattern<99> : tensor<4096x32x1xf16>
  util.global private @cst_478 = #util.byte_pattern<100> : tensor<11008x32x1xf16>
  util.global private @cst_529 = #util.byte_pattern<101> : tensor<4096x32x1xf16>
  util.global private @cst_719 = #util.byte_pattern<102> : tensor<4096xf16>
  util.global private @cst_309 = #util.byte_pattern<103> : tensor<11008x32x1xf16>
  util.global private @cst_306 = #util.byte_pattern<104> : tensor<4096x32x1xf16>
  util.global private @cst_17 = #util.byte_pattern<105> : tensor<4096x4096xi4>
  util.global private @cst_748 = 4.096000e+03 : f32
  util.global private @cst_70 = #util.byte_pattern<106> : tensor<11008x4096xi4>
  util.global private @cst_709 = #util.byte_pattern<107> : tensor<4096xf16>
  util.global private @cst_509 = #util.byte_pattern<108> : tensor<4096x32x1xf16>
  util.global private @cst_136 = #util.byte_pattern<109> : tensor<4096x4096xi4>
  util.global private @cst_680 = #util.byte_pattern<110> : tensor<4096xf16>
  util.global private @cst_263 = #util.byte_pattern<111> : tensor<4096x32x1xf16>
  util.global private @cst_477 = #util.byte_pattern<112> : tensor<11008x32x1xf16>
  util.global private @cst_676 = #util.byte_pattern<113> : tensor<4096xf16>
  util.global private @cst_289 = #util.byte_pattern<114> : tensor<4096x32x1xf16>
  util.global private @cst_340 = #util.byte_pattern<115> : tensor<11008x32x1xf16>
  util.global private @cst_447 = #util.byte_pattern<116> : tensor<4096x86x1xf16>
  util.global private @cst_520 = #util.byte_pattern<117> : tensor<11008x32x1xf16>
  util.global private @cst_348 = #util.byte_pattern<118> : tensor<4096x32x1xf16>
  util.global private @cst_651 = #util.byte_pattern<119> : tensor<4096x32x1xf16>
  util.global private @cst_188 = #util.byte_pattern<120> : tensor<4096x11008xi4>
  util.global private @cst_104 = #util.byte_pattern<121> : tensor<4096x11008xi4>
  util.global private @cst_457 = #util.byte_pattern<122> : tensor<4096x32x1xf16>
  util.global private @c19 = 19 : index
  util.global private @cst_184 = #util.byte_pattern<123> : tensor<4096x4096xi4>
  util.global private @cst_296 = #util.byte_pattern<124> : tensor<11008x32x1xf16>
  util.global private @cst_629 = #util.byte_pattern<125> : tensor<4096x86x1xf16>
  util.global private @cst_668 = #util.byte_pattern<126> : tensor<4096x32x1xf16>
  util.global private @cst_589 = #util.byte_pattern<127> : tensor<11008x32x1xf16>
  util.global private @cst_167 = #util.byte_pattern<128> : tensor<4096x11008xi4>
  util.global private @cst_66 = #util.byte_pattern<129> : tensor<4096x4096xi4>
  util.global private @cst_149 = #util.byte_pattern<130> : tensor<4096x4096xi4>
  util.global private @cst_146 = #util.byte_pattern<131> : tensor<4096x11008xi4>
  util.global private @cst_156 = #util.byte_pattern<132> : tensor<4096x4096xi4>
  util.global private @cst_336 = #util.byte_pattern<133> : tensor<4096x86x1xf16>
  util.global private @cst_242 = #util.byte_pattern<134> : tensor<11008x32x1xf16>
  util.global private @cst_358 = #util.byte_pattern<135> : tensor<4096x32x1xf16>
  util.global private @cst_227 = #util.byte_pattern<136> : tensor<11008x32x1xf16>
  util.global private @cst_605 = #util.byte_pattern<137> : tensor<11008x32x1xf16>
  util.global private @cst_236 = #util.byte_pattern<138> : tensor<4096x32x1xf16>
  util.global private @cst_102 = #util.byte_pattern<139> : tensor<4096x4096xi4>
  util.global private @cst_610 = #util.byte_pattern<140> : tensor<4096x32x1xf16>
  util.global private @cst_697 = #util.byte_pattern<141> : tensor<4096xf16>
  util.global private @cst_677 = #util.byte_pattern<142> : tensor<4096xf16>
  util.global private @cst_59 = #util.byte_pattern<143> : tensor<4096x4096xi4>
  util.global private @cst_8 = #util.byte_pattern<144> : tensor<11008x4096xi4>
  util.global private @cst_398 = #util.byte_pattern<145> : tensor<4096x32x1xf16>
  util.global private @cst_608 = #util.byte_pattern<146> : tensor<4096x32x1xf16>
  util.global private @cst_161 = #util.byte_pattern<147> : tensor<11008x4096xi4>
  util.global private @cst_33 = #util.byte_pattern<148> : tensor<4096x4096xi4>
  util.global private @cst_313 = #util.byte_pattern<149> : tensor<4096x32x1xf16>
  util.global private @cst_364 = #util.byte_pattern<150> : tensor<4096x86x1xf16>
  util.global private @cst_519 = #util.byte_pattern<151> : tensor<11008x32x1xf16>
  util.global private @cst_647 = #util.byte_pattern<152> : tensor<11008x32x1xf16>
  util.global private @cst_650 = #util.byte_pattern<153> : tensor<4096x32x1xf16>
  util.global private @cst_596 = #util.byte_pattern<154> : tensor<4096x32x1xf16>
  util.global private @cst_321 = #util.byte_pattern<155> : tensor<4096x86x1xf16>
  util.global private @cst_64 = #util.byte_pattern<156> : tensor<11008x4096xi4>
  util.global private @c1_i64 = 1 : i64
  util.global private @cst_626 = #util.byte_pattern<157> : tensor<4096x32x1xf16>
  util.global private @cst_493 = #util.byte_pattern<158> : tensor<11008x32x1xf16>
  util.global private @cst_699 = #util.byte_pattern<159> : tensor<4096xf16>
  util.global private @c1 = 1 : index
  util.global private @cst_551 = #util.byte_pattern<160> : tensor<4096x32x1xf16>
  util.global private @cst_284 = #util.byte_pattern<161> : tensor<11008x32x1xf16>
  util.global private @cst_413 = #util.byte_pattern<162> : tensor<4096x32x1xf16>
  util.global private @cst_441 = #util.byte_pattern<163> : tensor<4096x32x1xf16>
  util.global private @cst_87 = #util.byte_pattern<164> : tensor<4096x4096xi4>
  util.global private @cst_708 = #util.byte_pattern<165> : tensor<4096xf16>
  util.global private @cst_121 = #util.byte_pattern<166> : tensor<4096x4096xi4>
  util.global private @cst_390 = #util.byte_pattern<167> : tensor<4096x32x1xf16>
  util.global private @cst_379 = #util.byte_pattern<168> : tensor<11008x32x1xf16>
  util.global private @cst_19 = #util.byte_pattern<169> : tensor<4096x4096xi4>
  util.global private @cst_290 = #util.byte_pattern<170> : tensor<4096x32x1xf16>
  util.global private @cst_468 = #util.byte_pattern<171> : tensor<4096x32x1xf16>
  util.global private @cst_103 = #util.byte_pattern<172> : tensor<4096x4096xi4>
  util.global private @cst_454 = #util.byte_pattern<173> : tensor<4096x32x1xf16>
  util.global private @cst_577 = #util.byte_pattern<174> : tensor<11008x32x1xf16>
  util.global private @cst_424 = #util.byte_pattern<175> : tensor<11008x32x1xf16>
  util.global private @cst_747 = 2.000000e+00 : f32
  util.global private @cst_221 = #util.byte_pattern<176> : tensor<4096x4096xi4>
  util.global private @cst_265 = #util.byte_pattern<177> : tensor<4096x86x1xf16>
  util.global private @c2 = 2 : index
  util.global private @cst_722 = #util.byte_pattern<178> : tensor<4096xf16>
  util.global private @cst_151 = #util.byte_pattern<179> : tensor<4096x4096xi4>
  util.global private @cst_613 = #util.byte_pattern<180> : tensor<4096x32x1xf16>
  util.global private @cst_35 = #util.byte_pattern<181> : tensor<11008x4096xi4>
  util.global private @cst_606 = #util.byte_pattern<182> : tensor<11008x32x1xf16>
  util.global private @cst_663 = #util.byte_pattern<183> : tensor<4096x32x1xf16>
  util.global private @cst_158 = #util.byte_pattern<184> : tensor<4096x4096xi4>
  util.global private @cst_479 = #util.byte_pattern<185> : tensor<11008x32x1xf16>
  util.global private @cst_491 = #util.byte_pattern<186> : tensor<11008x32x1xf16>
  util.global private @cst_392 = #util.byte_pattern<187> : tensor<4096x86x1xf16>
  util.global private @cst_420 = #util.byte_pattern<188> : tensor<4096x86x1xf16>
  util.global private @cst_288 = #util.byte_pattern<189> : tensor<4096x32x1xf16>
  util.global private @cst_222 = #util.byte_pattern<190> : tensor<4096x4096xi4>
  util.global private @cst_85 = #util.byte_pattern<191> : tensor<11008x4096xi4>
  util.global private @cst_207 = #util.byte_pattern<192> : tensor<4096x4096xi4>
  util.global private @cst_621 = #util.byte_pattern<193> : tensor<4096x32x1xf16>
  util.global private @cst_733 = #util.byte_pattern<194> : tensor<4096xf16>
  util.global private @cst_259 = #util.byte_pattern<195> : tensor<4096x32x1xf16>
  util.global private @cst_718 = #util.byte_pattern<196> : tensor<4096xf16>
  util.global private @cst_396 = #util.byte_pattern<197> : tensor<11008x32x1xf16>
  util.global private @cst_600 = #util.byte_pattern<198> : tensor<4096x32x1xf16>
  util.global private @cst_178 = #util.byte_pattern<199> : tensor<4096x4096xi4>
  util.global private @cst_342 = #util.byte_pattern<200> : tensor<4096x32x1xf16>
  util.global private @cst_591 = #util.byte_pattern<201> : tensor<11008x32x1xf16>
  util.global private @cst_746 = 11.313708498984761 : f64
  util.global private @cst_281 = #util.byte_pattern<202> : tensor<11008x32x1xf16>
  util.global private @cst_16 = #util.byte_pattern<203> : tensor<4096x4096xi4>
  util.global private @cst_688 = #util.byte_pattern<204> : tensor<4096xf16>
  util.global private @cst_476 = #util.byte_pattern<205> : tensor<4096x86x1xf16>
  util.global private @cst_394 = #util.byte_pattern<206> : tensor<11008x32x1xf16>
  util.global private @cst_521 = #util.byte_pattern<207> : tensor<11008x32x1xf16>
  util.global private @c19_i64 = 19 : i64
  util.global private @cst_14 = #util.byte_pattern<208> : tensor<11008x4096xi4>
  util.global private @cst_458 = #util.byte_pattern<209> : tensor<4096x32x1xf16>
  util.global private @cst_679 = #util.byte_pattern<210> : tensor<4096xf16>
  util.global private @cst_164 = #util.byte_pattern<211> : tensor<4096x4096xi4>
  util.global private @cst_739 = #util.byte_pattern<212> : tensor<32000x4096xf16>
  util.global private @cst_735 = #util.byte_pattern<213> : tensor<4096xf16>
  util.global private @cst_483 = #util.byte_pattern<214> : tensor<4096x32x1xf16>
  util.global private @cst_26 = #util.byte_pattern<215> : tensor<4096x4096xi4>
  util.global private @cst_593 = #util.byte_pattern<216> : tensor<4096x32x1xf16>
  util.global private @cst_407 = #util.byte_pattern<217> : tensor<11008x32x1xf16>
  util.global private @cst_384 = #util.byte_pattern<218> : tensor<4096x32x1xf16>
  util.global private @cst_344 = #util.byte_pattern<219> : tensor<4096x32x1xf16>
  util.global private @cst_7 = #util.byte_pattern<220> : tensor<11008x4096xi4>
  util.global private @cst_563 = #util.byte_pattern<221> : tensor<11008x32x1xf16>
  util.global private @cst_616 = #util.byte_pattern<222> : tensor<4096x86x1xf16>
  util.global private @cst_499 = #util.byte_pattern<223> : tensor<4096x32x1xf16>
  util.global private @cst_403 = #util.byte_pattern<224> : tensor<4096x32x1xf16>
  util.global private @cst_110 = #util.byte_pattern<225> : tensor<4096x4096xi4>
  util.global private @cst_141 = #util.byte_pattern<226> : tensor<11008x4096xi4>
  util.global private @cst_168 = #util.byte_pattern<227> : tensor<11008x4096xi4>
  util.global private @cst_345 = #util.byte_pattern<228> : tensor<4096x32x1xf16>
  util.global private @cst_506 = #util.byte_pattern<229> : tensor<11008x32x1xf16>
  util.global private @cst_544 = #util.byte_pattern<230> : tensor<4096x32x1xf16>
  util.global private @cst_243 = #util.byte_pattern<231> : tensor<4096x32x1xf16>
  util.global private @cst_690 = #util.byte_pattern<232> : tensor<4096xf16>
  util.global private @cst_507 = #util.byte_pattern<233> : tensor<11008x32x1xf16>
  util.global private @cst_95 = #util.byte_pattern<234> : tensor<4096x4096xi4>
  util.global private @cst_125 = #util.byte_pattern<235> : tensor<4096x11008xi4>
  util.global private @cst_716 = #util.byte_pattern<236> : tensor<4096xf16>
  util.global private @cst_36 = #util.byte_pattern<237> : tensor<11008x4096xi4>
  util.global private @cst_15 = #util.byte_pattern<238> : tensor<11008x4096xi4>
  util.global private @cst_260 = #util.byte_pattern<239> : tensor<4096x32x1xf16>
  util.global private @cst_225 = #util.byte_pattern<240> : tensor<11008x32x1xf16>
  util.global private @cst_555 = #util.byte_pattern<241> : tensor<4096x32x1xf16>
  util.global private @cst_678 = #util.byte_pattern<242> : tensor<4096xf16>
  util.global private @cst_152 = #util.byte_pattern<243> : tensor<4096x4096xi4>
  util.global private @cst_275 = #util.byte_pattern<244> : tensor<4096x32x1xf16>
  util.global private @cst_692 = #util.byte_pattern<245> : tensor<4096xf16>
  util.global private @cst_724 = #util.byte_pattern<246> : tensor<4096xf16>
  util.global private @cst_177 = #util.byte_pattern<247> : tensor<4096x4096xi4>
  util.global private @cst_734 = #util.byte_pattern<248> : tensor<4096xf16>
  util.global private @cst_175 = #util.byte_pattern<249> : tensor<11008x4096xi4>
  util.global private @cst_145 = #util.byte_pattern<250> : tensor<4096x4096xi4>
  util.global private @cst_552 = #util.byte_pattern<251> : tensor<4096x32x1xf16>
  util.global private @cst_182 = #util.byte_pattern<252> : tensor<11008x4096xi4>
  util.global private @cst_523 = #util.byte_pattern<253> : tensor<4096x32x1xf16>
  util.global private @cst_444 = #util.byte_pattern<254> : tensor<4096x32x1xf16>
  util.global private @cst_180 = #util.byte_pattern<255> : tensor<4096x4096xi4>
  util.global private @cst_464 = #util.byte_pattern<256> : tensor<11008x32x1xf16>
  util.global private @cst_119 = #util.byte_pattern<257> : tensor<11008x4096xi4>
  util.global private @cst_235 = #util.byte_pattern<258> : tensor<4096x32x1xf16>
  util.global private @cst_360 = #util.byte_pattern<259> : tensor<4096x32x1xf16>
  util.global private @cst_196 = #util.byte_pattern<260> : tensor<11008x4096xi4>
  util.global private @cst_597 = #util.byte_pattern<261> : tensor<4096x32x1xf16>
  util.global private @cst_579 = #util.byte_pattern<262> : tensor<4096x32x1xf16>
  util.global private @c0_i64 = 0 : i64
  util.global private @cst_23 = #util.byte_pattern<263> : tensor<4096x4096xi4>
  util.global private @cst_169 = #util.byte_pattern<264> : tensor<11008x4096xi4>
  util.global private @cst_267 = #util.byte_pattern<265> : tensor<11008x32x1xf16>
  util.global private @cst_192 = #util.byte_pattern<266> : tensor<4096x4096xi4>
  util.global private @cst_717 = #util.byte_pattern<267> : tensor<4096xf16>
  util.global private @cst_485 = #util.byte_pattern<268> : tensor<4096x32x1xf16>
  util.global private @cst_442 = #util.byte_pattern<269> : tensor<4096x32x1xf16>
  util.global private @cst_208 = #util.byte_pattern<270> : tensor<4096x4096xi4>
  util.global private @cst_163 = #util.byte_pattern<271> : tensor<4096x4096xi4>
  util.global private @cst_439 = #util.byte_pattern<272> : tensor<4096x32x1xf16>
  util.global private @cst_620 = #util.byte_pattern<273> : tensor<11008x32x1xf16>
  util.global private @cst_324 = #util.byte_pattern<274> : tensor<11008x32x1xf16>
  util.global private @cst_532 = #util.byte_pattern<275> : tensor<4096x86x1xf16>
  util.global private @cst_315 = #util.byte_pattern<276> : tensor<4096x32x1xf16>
  util.global private @cst_157 = #util.byte_pattern<277> : tensor<4096x4096xi4>
  util.global private @cst_513 = #util.byte_pattern<278> : tensor<4096x32x1xf16>
  util.global private @cst_318 = #util.byte_pattern<279> : tensor<4096x32x1xf16>
  util.global private @cst_581 = #util.byte_pattern<280> : tensor<4096x32x1xf16>
  util.global private @cst_224 = #util.byte_pattern<281> : tensor<4096x86x1xf16>
  util.global private @cst_453 = #util.byte_pattern<282> : tensor<4096x32x1xf16>
  util.global private @cst_77 = #util.byte_pattern<283> : tensor<11008x4096xi4>
  util.global private @cst_72 = #util.byte_pattern<284> : tensor<4096x4096xi4>
  util.global private @cst_282 = #util.byte_pattern<285> : tensor<11008x32x1xf16>
  util.global private @cst_553 = #util.byte_pattern<286> : tensor<4096x32x1xf16>
  util.global private @cst_257 = #util.byte_pattern<287> : tensor<4096x32x1xf16>
  util.global private @cst_535 = #util.byte_pattern<288> : tensor<11008x32x1xf16>
  util.global private @cst_187 = #util.byte_pattern<289> : tensor<4096x4096xi4>
  util.global private @cst_673 = #util.byte_pattern<290> : tensor<4096xf16>
  util.global private @cst_128 = #util.byte_pattern<291> : tensor<4096x4096xi4>
  util.global private @cst_486 = #util.byte_pattern<292> : tensor<4096x32x1xf16>
  util.global private @cst_736 = #util.byte_pattern<293> : tensor<1x1x4096x128xf16>
  util.global private @cst_131 = #util.byte_pattern<294> : tensor<4096x4096xi4>
  util.global private @cst_171 = #util.byte_pattern<295> : tensor<4096x4096xi4>
  util.global private @cst_533 = #util.byte_pattern<296> : tensor<11008x32x1xf16>
  util.global private @cst_189 = #util.byte_pattern<297> : tensor<11008x4096xi4>
  util.global private @cst_615 = #util.byte_pattern<298> : tensor<4096x86x1xf16>
  util.global private @cst_118 = #util.byte_pattern<299> : tensor<4096x11008xi4>
  util.global private @cst_329 = #util.byte_pattern<300> : tensor<4096x32x1xf16>
  util.global private @cst_232 = #util.byte_pattern<301> : tensor<4096x32x1xf16>
  util.global private @cst_388 = #util.byte_pattern<302> : tensor<4096x32x1xf16>
  util.global private @cst_704 = #util.byte_pattern<303> : tensor<4096xf16>
  util.global private @cst_410 = #util.byte_pattern<304> : tensor<11008x32x1xf16>
  util.global private @cst_425 = #util.byte_pattern<305> : tensor<4096x32x1xf16>
  util.global private @cst_238 = #util.byte_pattern<306> : tensor<4096x86x1xf16>
  util.global private @cst_539 = #util.byte_pattern<307> : tensor<4096x32x1xf16>
  util.global private @cst_327 = #util.byte_pattern<308> : tensor<4096x32x1xf16>
  util.global private @cst_638 = #util.byte_pattern<309> : tensor<4096x32x1xf16>
  util.global private @cst_27 = #util.byte_pattern<310> : tensor<4096x11008xi4>
  util.global private @cst_362 = #util.byte_pattern<311> : tensor<4096x32x1xf16>
  util.global private @cst_249 = #util.byte_pattern<312> : tensor<4096x32x1xf16>
  util.global private @cst_106 = #util.byte_pattern<313> : tensor<11008x4096xi4>
  util.global private @cst_698 = #util.byte_pattern<314> : tensor<4096xf16>
  util.global private @cst_298 = #util.byte_pattern<315> : tensor<11008x32x1xf16>
  util.global private @cst_434 = #util.byte_pattern<316> : tensor<4096x86x1xf16>
  util.global private @cst_381 = #util.byte_pattern<317> : tensor<11008x32x1xf16>
  util.global private @cst_496 = #util.byte_pattern<318> : tensor<4096x32x1xf16>
  util.global private @cst_494 = #util.byte_pattern<319> : tensor<11008x32x1xf16>
  util.global private @cst_143 = #util.byte_pattern<320> : tensor<4096x4096xi4>
  util.global private @cst_69 = #util.byte_pattern<321> : tensor<4096x11008xi4>
  util.global private @cst_645 = #util.byte_pattern<322> : tensor<11008x32x1xf16>
  util.global private @cst_720 = #util.byte_pattern<323> : tensor<4096xf16>
  util.global private @cst_305 = #util.byte_pattern<324> : tensor<4096x32x1xf16>
  util.global private @cst_50 = #util.byte_pattern<325> : tensor<11008x4096xi4>
  util.global private @cst_526 = #util.byte_pattern<326> : tensor<4096x32x1xf16>
  util.global private @cst_669 = #util.byte_pattern<327> : tensor<4096x32x1xf16>
  util.global private @cst_97 = #util.byte_pattern<328> : tensor<4096x11008xi4>
  util.global private @cst_568 = #util.byte_pattern<329> : tensor<4096x32x1xf16>
  util.global private @cst_576 = #util.byte_pattern<330> : tensor<11008x32x1xf16>
  util.global private @cst_6 = #util.byte_pattern<331> : tensor<4096x11008xi4>
  util.global private @cst_625 = #util.byte_pattern<332> : tensor<4096x32x1xf16>
  util.global private @cst_210 = #util.byte_pattern<333> : tensor<11008x4096xi4>
  util.global private @cst_500 = #util.byte_pattern<334> : tensor<4096x32x1xf16>
  util.global private @cst_662 = #util.byte_pattern<335> : tensor<11008x32x1xf16>
  util.global private @cst_590 = #util.byte_pattern<336> : tensor<11008x32x1xf16>
  util.global private @cst_198 = #util.byte_pattern<337> : tensor<4096x4096xi4>
  util.global private @cst_172 = #util.byte_pattern<338> : tensor<4096x4096xi4>
  util.global private @cst_10 = #util.byte_pattern<339> : tensor<4096x4096xi4>
  util.global private @cst_111 = #util.byte_pattern<340> : tensor<4096x11008xi4>
  util.global private @cst_205 = #util.byte_pattern<341> : tensor<4096x4096xi4>
  util.global private @cst_594 = #util.byte_pattern<342> : tensor<4096x32x1xf16>
  util.global private @cst_386 = #util.byte_pattern<343> : tensor<4096x32x1xf16>
  util.global private @cst_272 = #util.byte_pattern<344> : tensor<4096x32x1xf16>
  util.global private @cst_598 = #util.byte_pattern<345> : tensor<4096x32x1xf16>
  util.global private @cst_283 = #util.byte_pattern<346> : tensor<11008x32x1xf16>
  util.global private @cst_488 = #util.byte_pattern<347> : tensor<4096x32x1xf16>
  util.global private @cst_20 = #util.byte_pattern<348> : tensor<4096x11008xi4>
  util.global private @cst_316 = #util.byte_pattern<349> : tensor<4096x32x1xf16>
  util.global private @cst_611 = #util.byte_pattern<350> : tensor<4096x32x1xf16>
  util.global private @cst_212 = #util.byte_pattern<351> : tensor<4096x4096xi4>
  util.global private @true = true
  util.global private @cst_333 = #util.byte_pattern<352> : tensor<4096x32x1xf16>
  util.global private @cst_738 = #util.byte_pattern<353> : tensor<4096xf16>
  util.global private @cst_400 = #util.byte_pattern<354> : tensor<4096x32x1xf16>
  util.global private @cst_560 = #util.byte_pattern<355> : tensor<4096x86x1xf16>
  util.global private @cst_684 = #util.byte_pattern<356> : tensor<4096xf16>
  util.global private @cst_179 = #util.byte_pattern<357> : tensor<4096x4096xi4>
  util.global private @cst_528 = #util.byte_pattern<358> : tensor<4096x32x1xf16>
  util.global private @cst_268 = #util.byte_pattern<359> : tensor<11008x32x1xf16>
  util.global private @cst_90 = #util.byte_pattern<360> : tensor<4096x11008xi4>
  util.global private @cst_654 = #util.byte_pattern<361> : tensor<4096x32x1xf16>
  util.global private @cst_269 = #util.byte_pattern<362> : tensor<11008x32x1xf16>
  util.global private @cst_186 = #util.byte_pattern<363> : tensor<4096x4096xi4>
  util.global private @cst_463 = #util.byte_pattern<364> : tensor<11008x32x1xf16>
  util.global private @cst_515 = #util.byte_pattern<365> : tensor<4096x32x1xf16>
  util.global private @cst_43 = #util.byte_pattern<366> : tensor<11008x4096xi4>
  util.global private @cst_416 = #util.byte_pattern<367> : tensor<4096x32x1xf16>
  util.global private @cst_174 = #util.byte_pattern<368> : tensor<4096x11008xi4>
  util.global private @cst_633 = #util.byte_pattern<369> : tensor<11008x32x1xf16>
  util.global private @cst_22 = #util.byte_pattern<370> : tensor<11008x4096xi4>
  util.global private @cst_450 = #util.byte_pattern<371> : tensor<11008x32x1xf16>
  util.global private @cst_92 = #util.byte_pattern<372> : tensor<11008x4096xi4>
  util.global private @cst_522 = #util.byte_pattern<373> : tensor<11008x32x1xf16>
  util.global private @cst_0 = #util.byte_pattern<374> : tensor<11008x4096xi4>
  util.global private @cst_38 = #util.byte_pattern<375> : tensor<4096x4096xi4>
  util.global private @cst_341 = #util.byte_pattern<376> : tensor<4096x32x1xf16>
  util.global private @cst_492 = #util.byte_pattern<377> : tensor<11008x32x1xf16>
  util.global private @cst_270 = #util.byte_pattern<378> : tensor<11008x32x1xf16>
  util.global private @cst_82 = #util.byte_pattern<379> : tensor<4096x4096xi4>
  util.global private @cst_652 = #util.byte_pattern<380> : tensor<4096x32x1xf16>
  util.global private @cst_399 = #util.byte_pattern<381> : tensor<4096x32x1xf16>
  util.global private @cst_711 = #util.byte_pattern<382> : tensor<4096xf16>
  util.global private @cst_374 = #util.byte_pattern<383> : tensor<4096x32x1xf16>
  util.global private @cst_11 = #util.byte_pattern<384> : tensor<4096x4096xi4>
  util.global private @cst_418 = #util.byte_pattern<385> : tensor<4096x32x1xf16>
  util.global private @cst_355 = #util.byte_pattern<386> : tensor<4096x32x1xf16>
  util.global private @cst_508 = #util.byte_pattern<387> : tensor<11008x32x1xf16>
  util.global private @cst_547 = #util.byte_pattern<388> : tensor<11008x32x1xf16>
  util.global private @cst_202 = #util.byte_pattern<389> : tensor<4096x11008xi4>
  util.global private @cst_28 = #util.byte_pattern<390> : tensor<11008x4096xi4>
  util.global private @cst_34 = #util.byte_pattern<391> : tensor<4096x11008xi4>
  util.global private @cst_481 = #util.byte_pattern<392> : tensor<4096x32x1xf16>
  util.global private @cst_122 = #util.byte_pattern<393> : tensor<4096x4096xi4>
  util.global private @cst_84 = #util.byte_pattern<394> : tensor<11008x4096xi4>
  util.global private @cst_47 = #util.byte_pattern<395> : tensor<4096x4096xi4>
  util.global private @cst_108 = #util.byte_pattern<396> : tensor<4096x4096xi4>
  util.global private @cst_531 = #util.byte_pattern<397> : tensor<4096x86x1xf16>
  util.global private @cst_40 = #util.byte_pattern<398> : tensor<4096x4096xi4>
  util.global private @cst_351 = #util.byte_pattern<399> : tensor<11008x32x1xf16>
  util.global private @cst_74 = #util.byte_pattern<400> : tensor<4096x4096xi4>
  util.global private @cst_380 = #util.byte_pattern<401> : tensor<11008x32x1xf16>
  util.global private @cst_307 = #util.byte_pattern<402> : tensor<4096x86x1xf16>
  util.global private @cst_382 = #util.byte_pattern<403> : tensor<11008x32x1xf16>
  util.global private @cst_675 = #util.byte_pattern<404> : tensor<4096xf16>
  util.global private @cst_277 = #util.byte_pattern<405> : tensor<4096x32x1xf16>
  util.global private @cst_534 = #util.byte_pattern<406> : tensor<11008x32x1xf16>
  util.global private @cst_729 = #util.byte_pattern<407> : tensor<4096xf16>
  util.global private @cst_368 = #util.byte_pattern<408> : tensor<11008x32x1xf16>
  util.global private @cst_116 = #util.byte_pattern<409> : tensor<4096x4096xi4>
  util.global private @cst_195 = #util.byte_pattern<410> : tensor<4096x11008xi4>
  util.global private @cst_21 = #util.byte_pattern<411> : tensor<11008x4096xi4>
  util.global private @cst_89 = #util.byte_pattern<412> : tensor<4096x4096xi4>
  util.global private @cst_194 = #util.byte_pattern<413> : tensor<4096x4096xi4>
  util.global private @cst_363 = #util.byte_pattern<414> : tensor<4096x86x1xf16>
  util.global private @cst_607 = #util.byte_pattern<415> : tensor<4096x32x1xf16>
  util.global private @cst_361 = #util.byte_pattern<416> : tensor<4096x32x1xf16>
  util.global private @cst_332 = #util.byte_pattern<417> : tensor<4096x32x1xf16>
  util.global private @cst_295 = #util.byte_pattern<418> : tensor<11008x32x1xf16>
  util.global private @cst_323 = #util.byte_pattern<419> : tensor<11008x32x1xf16>
  util.global private @cst_517 = #util.byte_pattern<420> : tensor<4096x86x1xf16>
  util.global private @cst_628 = #util.byte_pattern<421> : tensor<4096x32x1xf16>
  util.global private @cst_637 = #util.byte_pattern<422> : tensor<4096x32x1xf16>
  util.global private @cst_325 = #util.byte_pattern<423> : tensor<11008x32x1xf16>
  util.global private @cst_129 = #util.byte_pattern<424> : tensor<4096x4096xi4>
  util.global private @cst_657 = #util.byte_pattern<425> : tensor<4096x86x1xf16>
  util.global private @cst_68 = #util.byte_pattern<426> : tensor<4096x4096xi4>
  util.global private @cst_343 = #util.byte_pattern<427> : tensor<4096x32x1xf16>
  util.global private @cst_258 = #util.byte_pattern<428> : tensor<4096x32x1xf16>
  util.global private @cst_113 = #util.byte_pattern<429> : tensor<11008x4096xi4>
  util.global private @cst_504 = #util.byte_pattern<430> : tensor<4096x86x1xf16>
  util.global private @cst_51 = #util.byte_pattern<431> : tensor<4096x4096xi4>
  util.global private @cst_409 = #util.byte_pattern<432> : tensor<11008x32x1xf16>
  util.global private @cst_150 = #util.byte_pattern<433> : tensor<4096x4096xi4>
  util.global private @cst_427 = #util.byte_pattern<434> : tensor<4096x32x1xf16>
  util.global private @cst_726 = #util.byte_pattern<435> : tensor<4096xf16>
  util.global private @cst_334 = #util.byte_pattern<436> : tensor<4096x32x1xf16>
  util.global private @cst_730 = #util.byte_pattern<437> : tensor<4096xf16>
  util.global private @cst_39 = #util.byte_pattern<438> : tensor<4096x4096xi4>
  util.global private @cst_79 = #util.byte_pattern<439> : tensor<4096x4096xi4>
  util.global private @cst_462 = #util.byte_pattern<440> : tensor<4096x86x1xf16>
  util.global private @cst_538 = #util.byte_pattern<441> : tensor<4096x32x1xf16>
  util.global private @cst_250 = #util.byte_pattern<442> : tensor<4096x32x1xf16>
  util.global private @cst_322 = #util.byte_pattern<443> : tensor<4096x86x1xf16>
  util.global private @cst_130 = #util.byte_pattern<444> : tensor<4096x4096xi4>
  util.global private @cst_134 = #util.byte_pattern<445> : tensor<11008x4096xi4>
  util.global private @cst_543 = #util.byte_pattern<446> : tensor<4096x32x1xf16>
  util.global private @cst_53 = #util.byte_pattern<447> : tensor<4096x4096xi4>
  util.global private @cst_13 = #util.byte_pattern<448> : tensor<4096x11008xi4>
  util.global private @cst_604 = #util.byte_pattern<449> : tensor<11008x32x1xf16>
  util.global private @cst_155 = #util.byte_pattern<450> : tensor<11008x4096xi4>
  util.global private @cst_426 = #util.byte_pattern<451> : tensor<4096x32x1xf16>
  util.global private @cst_140 = #util.byte_pattern<452> : tensor<11008x4096xi4>
  util.global private @cst_414 = #util.byte_pattern<453> : tensor<4096x32x1xf16>
  util.global private @cst_505 = #util.byte_pattern<454> : tensor<11008x32x1xf16>
  util.global private @cst_287 = #util.byte_pattern<455> : tensor<4096x32x1xf16>
  util.global private @cst_42 = #util.byte_pattern<456> : tensor<11008x4096xi4>
  util.global private @cst_366 = #util.byte_pattern<457> : tensor<11008x32x1xf16>
  util.global private @cst_480 = #util.byte_pattern<458> : tensor<11008x32x1xf16>
  util.global private @cst_81 = #util.byte_pattern<459> : tensor<4096x4096xi4>
  util.global private @cst_137 = #util.byte_pattern<460> : tensor<4096x4096xi4>
  util.global private @cst_408 = #util.byte_pattern<461> : tensor<11008x32x1xf16>
  util.global private @cst_147 = #util.byte_pattern<462> : tensor<11008x4096xi4>
  util.global private @cst_209 = #util.byte_pattern<463> : tensor<4096x11008xi4>
  util.global private @cst_37 = #util.byte_pattern<464> : tensor<4096x4096xi4>
  util.global private @cst_567 = #util.byte_pattern<465> : tensor<4096x32x1xf16>
  util.global private @cst_658 = #util.byte_pattern<466> : tensor<4096x86x1xf16>
  util.global private @cst_411 = #util.byte_pattern<467> : tensor<4096x32x1xf16>
  util.global private @cst_206 = #util.byte_pattern<468> : tensor<4096x4096xi4>
  util.global private @cst_80 = #util.byte_pattern<469> : tensor<4096x4096xi4>
  util.global private @cst_614 = #util.byte_pattern<470> : tensor<4096x32x1xf16>
  util.global private @cst_700 = #util.byte_pattern<471> : tensor<4096xf16>
  util.global private @cst_204 = #util.byte_pattern<472> : tensor<11008x4096xi4>
  util.global private @cst_588 = #util.byte_pattern<473> : tensor<4096x86x1xf16>
  util.global private @cst_371 = #util.byte_pattern<474> : tensor<4096x32x1xf16>
  util.global private @cst_230 = #util.byte_pattern<475> : tensor<4096x32x1xf16>
  util.global private @cst_62 = #util.byte_pattern<476> : tensor<4096x11008xi4>
  util.global private @cst_142 = #util.byte_pattern<477> : tensor<4096x4096xi4>
  util.global private @cst_292 = #util.byte_pattern<478> : tensor<4096x32x1xf16>
  util.global private @cst_88 = #util.byte_pattern<479> : tensor<4096x4096xi4>
  util.global private @cst_473 = #util.byte_pattern<480> : tensor<4096x32x1xf16>
  util.global private @cst_387 = #util.byte_pattern<481> : tensor<4096x32x1xf16>
  util.global private @cst_742 = 0xFC00 : f16
  util.global private @cst_578 = #util.byte_pattern<482> : tensor<11008x32x1xf16>
  util.global private @cst_83 = #util.byte_pattern<483> : tensor<4096x11008xi4>
  util.global private @cst_154 = #util.byte_pattern<484> : tensor<11008x4096xi4>
  util.global private @cst_197 = #util.byte_pattern<485> : tensor<11008x4096xi4>
  util.global private @cst_525 = #util.byte_pattern<486> : tensor<4096x32x1xf16>
  util.global private @cst_640 = #util.byte_pattern<487> : tensor<4096x32x1xf16>
  util.global private @cst_299 = #util.byte_pattern<488> : tensor<4096x32x1xf16>
  util.global private @cst_100 = #util.byte_pattern<489> : tensor<4096x4096xi4>
  util.global private @cst_144 = #util.byte_pattern<490> : tensor<4096x4096xi4>
  util.global private @cst_354 = #util.byte_pattern<491> : tensor<11008x32x1xf16>
  util.global private @cst_689 = #util.byte_pattern<492> : tensor<4096xf16>
  util.global private @cst_732 = #util.byte_pattern<493> : tensor<4096xf16>
  util.global private @cst_226 = #util.byte_pattern<494> : tensor<11008x32x1xf16>
  util.global private @cst_415 = #util.byte_pattern<495> : tensor<4096x32x1xf16>
  util.global private @cst_101 = #util.byte_pattern<496> : tensor<4096x4096xi4>
  util.global private @cst_714 = #util.byte_pattern<497> : tensor<4096xf16>
  util.global private @cst_132 = #util.byte_pattern<498> : tensor<4096x11008xi4>
  util.global private @cst_446 = #util.byte_pattern<499> : tensor<4096x32x1xf16>
  util.global private @cst_57 = #util.byte_pattern<500> : tensor<11008x4096xi4>
  util.global private @cst_337 = #util.byte_pattern<501> : tensor<11008x32x1xf16>
  util.global private @cst_93 = #util.byte_pattern<502> : tensor<4096x4096xi4>
  util.global private @cst_127 = #util.byte_pattern<503> : tensor<11008x4096xi4>
  util.global private @cst_511 = #util.byte_pattern<504> : tensor<4096x32x1xf16>
  util.global private @cst_622 = #util.byte_pattern<505> : tensor<4096x32x1xf16>
  util.global private @cst_395 = #util.byte_pattern<506> : tensor<11008x32x1xf16>
  util.global private @cst_279 = #util.byte_pattern<507> : tensor<4096x86x1xf16>
  util.global private @cst_393 = #util.byte_pattern<508> : tensor<11008x32x1xf16>
  util.global private @cst_135 = #util.byte_pattern<509> : tensor<4096x4096xi4>
  util.global private @cst_12 = #util.byte_pattern<510> : tensor<4096x4096xi4>
  util.global private @cst_278 = #util.byte_pattern<511> : tensor<4096x32x1xf16>
  util.global private @cst_25 = #util.byte_pattern<512> : tensor<4096x4096xi4>
  util.global private @cst_512 = #util.byte_pattern<513> : tensor<4096x32x1xf16>
  util.global private @cst_370 = #util.byte_pattern<514> : tensor<4096x32x1xf16>
  util.global private @cst_99 = #util.byte_pattern<515> : tensor<11008x4096xi4>
  util.global private @cst_573 = #util.byte_pattern<516> : tensor<4096x86x1xf16>
  util.global private @cst_661 = #util.byte_pattern<517> : tensor<11008x32x1xf16>
  util.global private @cst_743 = 1.000000e+00 : f16
  util.global private @cst_98 = #util.byte_pattern<518> : tensor<11008x4096xi4>
  util.global private @cst_656 = #util.byte_pattern<519> : tensor<4096x32x1xf16>
  util.global private @cst_465 = #util.byte_pattern<520> : tensor<11008x32x1xf16>
  util.global private @cst_237 = #util.byte_pattern<521> : tensor<4096x86x1xf16>
  util.global private @cst_5 = #util.byte_pattern<522> : tensor<4096x4096xi4>
  util.global private @cst_312 = #util.byte_pattern<523> : tensor<11008x32x1xf16>
  util.global private @cst_514 = #util.byte_pattern<524> : tensor<4096x32x1xf16>
  util.global private @cst_314 = #util.byte_pattern<525> : tensor<4096x32x1xf16>
  util.global private @cst_540 = #util.byte_pattern<526> : tensor<4096x32x1xf16>
  util.global private @cst_466 = #util.byte_pattern<527> : tensor<11008x32x1xf16>
  util.global private @cst_691 = #util.byte_pattern<528> : tensor<4096xf16>
  util.global private @cst_220 = #util.byte_pattern<529> : tensor<4096x4096xi4>
  util.global private @cst_304 = #util.byte_pattern<530> : tensor<4096x32x1xf16>
  util.global private @cst_429 = #util.byte_pattern<531> : tensor<4096x32x1xf16>
  util.global private @cst_510 = #util.byte_pattern<532> : tensor<4096x32x1xf16>
  util.global private @cst_554 = #util.byte_pattern<533> : tensor<4096x32x1xf16>
  util.global private @cst_376 = #util.byte_pattern<534> : tensor<4096x32x1xf16>
  util.global private @cst_550 = #util.byte_pattern<535> : tensor<11008x32x1xf16>
  util.global private @cst_437 = #util.byte_pattern<536> : tensor<11008x32x1xf16>
  util.global private @cst_311 = #util.byte_pattern<537> : tensor<11008x32x1xf16>
  util.global private @cst_653 = #util.byte_pattern<538> : tensor<4096x32x1xf16>
  util.global private @cst_685 = #util.byte_pattern<539> : tensor<4096xf16>
  util.global private @cst_603 = #util.byte_pattern<540> : tensor<11008x32x1xf16>
  util.global private @cst_353 = #util.byte_pattern<541> : tensor<11008x32x1xf16>
  util.global private @cst_585 = #util.byte_pattern<542> : tensor<4096x32x1xf16>
  util.global private @cst_671 = #util.byte_pattern<543> : tensor<32000x4096xf16>
  util.global private @cst_301 = #util.byte_pattern<544> : tensor<4096x32x1xf16>
  util.global private @cst_133 = #util.byte_pattern<545> : tensor<11008x4096xi4>
  util.global private @cst_44 = #util.byte_pattern<546> : tensor<4096x4096xi4>
  util.global private @cst_571 = #util.byte_pattern<547> : tensor<4096x32x1xf16>
  util.global private @cst_617 = #util.byte_pattern<548> : tensor<11008x32x1xf16>
  util.global private @cst_264 = #util.byte_pattern<549> : tensor<4096x32x1xf16>
  util.global private @cst_359 = #util.byte_pattern<550> : tensor<4096x32x1xf16>
  util.global private @cst_639 = #util.byte_pattern<551> : tensor<4096x32x1xf16>
  util.global private @cst_46 = #util.byte_pattern<552> : tensor<4096x4096xi4>
  util.global private @cst_30 = #util.byte_pattern<553> : tensor<4096x4096xi4>
  util.global private @cst_412 = #util.byte_pattern<554> : tensor<4096x32x1xf16>
  util.global private @cst_474 = #util.byte_pattern<555> : tensor<4096x32x1xf16>
  util.global private @cst_582 = #util.byte_pattern<556> : tensor<4096x32x1xf16>
  util.global private @cst_433 = #util.byte_pattern<557> : tensor<4096x86x1xf16>
  util.global private @cst_648 = #util.byte_pattern<558> : tensor<11008x32x1xf16>
  util.global private @cst_45 = #util.byte_pattern<559> : tensor<4096x4096xi4>
  util.global private @cst_583 = #util.byte_pattern<560> : tensor<4096x32x1xf16>
  util.global private @cst_350 = #util.byte_pattern<561> : tensor<4096x86x1xf16>
  util.global private @cst_682 = #util.byte_pattern<562> : tensor<4096xf16>
  util.global private @cst_448 = #util.byte_pattern<563> : tensor<4096x86x1xf16>
  util.global private @cst_612 = #util.byte_pattern<564> : tensor<4096x32x1xf16>
  util.global private @cst_643 = #util.byte_pattern<565> : tensor<4096x86x1xf16>
  util.global private @cst_52 = #util.byte_pattern<566> : tensor<4096x4096xi4>
  util.global private @cst_548 = #util.byte_pattern<567> : tensor<11008x32x1xf16>
  util.global private @cst_702 = #util.byte_pattern<568> : tensor<4096xf16>
  util.global private @cst_67 = #util.byte_pattern<569> : tensor<4096x4096xi4>
  util.global private @cst_331 = #util.byte_pattern<570> : tensor<4096x32x1xf16>
  util.global private @cst_148 = #util.byte_pattern<571> : tensor<11008x4096xi4>
  util.global private @cst_347 = #util.byte_pattern<572> : tensor<4096x32x1xf16>
  util.global private @cst_687 = #util.byte_pattern<573> : tensor<4096xf16>
  util.global private @cst_73 = #util.byte_pattern<574> : tensor<4096x4096xi4>
  util.global private @cst_41 = #util.byte_pattern<575> : tensor<4096x11008xi4>
  util.global private @cst_431 = #util.byte_pattern<576> : tensor<4096x32x1xf16>
  util.global private @cst_274 = #util.byte_pattern<577> : tensor<4096x32x1xf16>
  util.global private @cst_659 = #util.byte_pattern<578> : tensor<11008x32x1xf16>
  util.global private @cst_372 = #util.byte_pattern<579> : tensor<4096x32x1xf16>
  util.global private @cst_695 = #util.byte_pattern<580> : tensor<4096xf16>
  util.global private @cst_244 = #util.byte_pattern<581> : tensor<4096x32x1xf16>
  util.global private @cst_138 = #util.byte_pattern<582> : tensor<4096x4096xi4>
  util.global private @cst_627 = #util.byte_pattern<583> : tensor<4096x32x1xf16>
  util.global private @cst_335 = #util.byte_pattern<584> : tensor<4096x86x1xf16>
  util.global private @cst_667 = #util.byte_pattern<585> : tensor<4096x32x1xf16>
  util.global private @cst_55 = #util.byte_pattern<586> : tensor<4096x11008xi4>
  util.global private @cst_96 = #util.byte_pattern<587> : tensor<4096x4096xi4>
  util.global private @cst_218 = #util.byte_pattern<588> : tensor<11008x4096xi4>
  util.global private @cst_254 = #util.byte_pattern<589> : tensor<11008x32x1xf16>
  util.global private @cst_219 = #util.byte_pattern<590> : tensor<4096x4096xi4>
  util.global private @cst_356 = #util.byte_pattern<591> : tensor<4096x32x1xf16>
  util.global private @cst_609 = #util.byte_pattern<592> : tensor<4096x32x1xf16>
  util.global private @cst_459 = #util.byte_pattern<593> : tensor<4096x32x1xf16>
  util.global private @cst_602 = #util.byte_pattern<594> : tensor<4096x86x1xf16>
  util.global private @cst_731 = #util.byte_pattern<595> : tensor<4096xf16>
  util.global private @cst_233 = #util.byte_pattern<596> : tensor<4096x32x1xf16>
  util.global private @cst_352 = #util.byte_pattern<597> : tensor<11008x32x1xf16>
  util.global private @cst_713 = #util.byte_pattern<598> : tensor<4096xf16>
  util.global private @cst_338 = #util.byte_pattern<599> : tensor<11008x32x1xf16>
  util.global private @cst_308 = #util.byte_pattern<600> : tensor<4096x86x1xf16>
  util.global private @cst_63 = #util.byte_pattern<601> : tensor<11008x4096xi4>
  util.global private @cst_185 = #util.byte_pattern<602> : tensor<4096x4096xi4>
  util.global private @cst_115 = #util.byte_pattern<603> : tensor<4096x4096xi4>
  util.global private @cst_32 = #util.byte_pattern<604> : tensor<4096x4096xi4>
  util.global private @cst_117 = #util.byte_pattern<605> : tensor<4096x4096xi4>
  util.global private @cst_253 = #util.byte_pattern<606> : tensor<11008x32x1xf16>
  util.global private @cst_715 = #util.byte_pattern<607> : tensor<4096xf16>
  util.global private @cst_696 = #util.byte_pattern<608> : tensor<4096xf16>
  util.global private @cst_228 = #util.byte_pattern<609> : tensor<11008x32x1xf16>
  util.global private @cst_619 = #util.byte_pattern<610> : tensor<11008x32x1xf16>
  util.global private @cst_166 = #util.byte_pattern<611> : tensor<4096x4096xi4>
  util.global private @cst_389 = #util.byte_pattern<612> : tensor<4096x32x1xf16>
  util.global private @cst_419 = #util.byte_pattern<613> : tensor<4096x86x1xf16>
  util.global private @cst_201 = #util.byte_pattern<614> : tensor<4096x4096xi4>
  util.global private @cst_710 = #util.byte_pattern<615> : tensor<4096xf16>
  util.global private @cst_460 = #util.byte_pattern<616> : tensor<4096x32x1xf16>
  util.global private @cst_635 = #util.byte_pattern<617> : tensor<4096x32x1xf16>
  util.global private @cst_498 = #util.byte_pattern<618> : tensor<4096x32x1xf16>
  util.global private @cst_706 = #util.byte_pattern<619> : tensor<4096xf16>
  util.global private @cst_248 = #util.byte_pattern<620> : tensor<4096x32x1xf16>
  util.global private @cst_261 = #util.byte_pattern<621> : tensor<4096x32x1xf16>
  util.global private @cst_211 = #util.byte_pattern<622> : tensor<11008x4096xi4>
  util.global private @cst_241 = #util.byte_pattern<623> : tensor<11008x32x1xf16>
  util.global private @cst_240 = #util.byte_pattern<624> : tensor<11008x32x1xf16>
  util.global private @cst_213 = #util.byte_pattern<625> : tensor<4096x4096xi4>
  util.global private @cst_707 = #util.byte_pattern<626> : tensor<4096xf16>
  util.global private @cst_24 = #util.byte_pattern<627> : tensor<4096x4096xi4>
  util.global private @cst_9 = #util.byte_pattern<628> : tensor<4096x4096xi4>
  util.global private @cst_595 = #util.byte_pattern<629> : tensor<4096x32x1xf16>
  util.global private @cst_641 = #util.byte_pattern<630> : tensor<4096x32x1xf16>
  util.global private @cst_452 = #util.byte_pattern<631> : tensor<11008x32x1xf16>
  util.global private @cst_377 = #util.byte_pattern<632> : tensor<4096x86x1xf16>
  util.global private @cst_436 = #util.byte_pattern<633> : tensor<11008x32x1xf16>
  util.global private @cst_574 = #util.byte_pattern<634> : tensor<4096x86x1xf16>
  util.global private @cst_537 = #util.byte_pattern<635> : tensor<4096x32x1xf16>
  util.global private @cst_94 = #util.byte_pattern<636> : tensor<4096x4096xi4>
  util.global private @cst_173 = #util.byte_pattern<637> : tensor<4096x4096xi4>
  util.global private @cst_273 = #util.byte_pattern<638> : tensor<4096x32x1xf16>
  util.global private @cst_109 = #util.byte_pattern<639> : tensor<4096x4096xi4>
  util.global private @cst_741 = 0.000000e+00 : f32
  util.global private @cst_223 = #util.byte_pattern<640> : tensor<4096x86x1xf16>
  util.global private @cst_584 = #util.byte_pattern<641> : tensor<4096x32x1xf16>
  util.global private @cst_378 = #util.byte_pattern<642> : tensor<4096x86x1xf16>
  util.global private @cst_61 = #util.byte_pattern<643> : tensor<4096x4096xi4>
  util.global private @cst_470 = #util.byte_pattern<644> : tensor<4096x32x1xf16>
  util.global private @cst_417 = #util.byte_pattern<645> : tensor<4096x32x1xf16>
  util.global private @cst_455 = #util.byte_pattern<646> : tensor<4096x32x1xf16>
  util.global private @cst_664 = #util.byte_pattern<647> : tensor<4096x32x1xf16>
  util.global private @cst_449 = #util.byte_pattern<648> : tensor<11008x32x1xf16>
  util.global private @cst_328 = #util.byte_pattern<649> : tensor<4096x32x1xf16>
  util.global private @cst_191 = #util.byte_pattern<650> : tensor<4096x4096xi4>
  util.global private @cst_320 = #util.byte_pattern<651> : tensor<4096x32x1xf16>
  util.global private @cst_319 = #util.byte_pattern<652> : tensor<4096x32x1xf16>
  util.global private @cst_666 = #util.byte_pattern<653> : tensor<4096x32x1xf16>
  util.global private @cst_636 = #util.byte_pattern<654> : tensor<4096x32x1xf16>
  util.global private @cst_655 = #util.byte_pattern<655> : tensor<4096x32x1xf16>
  util.global private @cst_49 = #util.byte_pattern<656> : tensor<11008x4096xi4>
  util.global private @cst_126 = #util.byte_pattern<657> : tensor<11008x4096xi4>
  util.global private @cst_471 = #util.byte_pattern<658> : tensor<4096x32x1xf16>
  util.global private @cst_495 = #util.byte_pattern<659> : tensor<4096x32x1xf16>
  util.global private @cst_686 = #util.byte_pattern<660> : tensor<4096xf16>
  util.global private @cst_276 = #util.byte_pattern<661> : tensor<4096x32x1xf16>
  util.global private @cst_672 = #util.byte_pattern<662> : tensor<4096xf16>
  util.global private @cst_199 = #util.byte_pattern<663> : tensor<4096x4096xi4>
  util.global private @cst_217 = #util.byte_pattern<664> : tensor<11008x4096xi4>
  util.global private @cst_294 = #util.byte_pattern<665> : tensor<4096x86x1xf16>
  util.global private @cst_54 = #util.byte_pattern<666> : tensor<4096x4096xi4>
  util.global private @cst_165 = #util.byte_pattern<667> : tensor<4096x4096xi4>
  util.global private @cst_693 = #util.byte_pattern<668> : tensor<4096xf16>
  util.global private @cst_562 = #util.byte_pattern<669> : tensor<11008x32x1xf16>
  util.global private @cst_330 = #util.byte_pattern<670> : tensor<4096x32x1xf16>
  util.global private @cst_229 = #util.byte_pattern<671> : tensor<4096x32x1xf16>
  util.global private @cst_558 = #util.byte_pattern<672> : tensor<4096x32x1xf16>
  util.global private @cst_245 = #util.byte_pattern<673> : tensor<4096x32x1xf16>
  util.global private @cst_487 = #util.byte_pattern<674> : tensor<4096x32x1xf16>
  util.global private @cst_740 = 0.000000e+00 : f16
  util.global private @cst_300 = #util.byte_pattern<675> : tensor<4096x32x1xf16>
  util.global private @cst_516 = #util.byte_pattern<676> : tensor<4096x32x1xf16>
  util.global private @cst_572 = #util.byte_pattern<677> : tensor<4096x32x1xf16>
  util.global private @cst_631 = #util.byte_pattern<678> : tensor<11008x32x1xf16>
  util.global private @cst_670 = #util.byte_pattern<679> : tensor<4096x32x1xf16>
  util.global private @cst_618 = #util.byte_pattern<680> : tensor<11008x32x1xf16>
  util.global private @cst_293 = #util.byte_pattern<681> : tensor<4096x86x1xf16>
  util.global private @cst_123 = #util.byte_pattern<682> : tensor<4096x4096xi4>
  util.global private @cst_349 = #util.byte_pattern<683> : tensor<4096x86x1xf16>
  util.global private @cst_445 = #util.byte_pattern<684> : tensor<4096x32x1xf16>
  util.global private @cst_326 = #util.byte_pattern<685> : tensor<11008x32x1xf16>
  util.global private @cst_60 = #util.byte_pattern<686> : tensor<4096x4096xi4>
  util.global private @cst_402 = #util.byte_pattern<687> : tensor<4096x32x1xf16>
  util.global private @cst_469 = #util.byte_pattern<688> : tensor<4096x32x1xf16>
  util.global private @cst_467 = #util.byte_pattern<689> : tensor<4096x32x1xf16>
  util.global private @cst_286 = #util.byte_pattern<690> : tensor<4096x32x1xf16>
  util.global private @cst_484 = #util.byte_pattern<691> : tensor<4096x32x1xf16>
  util.global private @cst_285 = #util.byte_pattern<692> : tensor<4096x32x1xf16>
  util.global private @cst_456 = #util.byte_pattern<693> : tensor<4096x32x1xf16>
  util.global private @cst_373 = #util.byte_pattern<694> : tensor<4096x32x1xf16>
  util.global private @cst_556 = #util.byte_pattern<695> : tensor<4096x32x1xf16>
  util.global private @cst_105 = #util.byte_pattern<696> : tensor<11008x4096xi4>
  util.global private @cst_674 = #util.byte_pattern<697> : tensor<4096xf16>
  util.global private @c32000 = 32000 : index
  util.global private @cst_266 = #util.byte_pattern<698> : tensor<4096x86x1xf16>
  util.global private @cst_404 = #util.byte_pattern<699> : tensor<4096x32x1xf16>
  util.global private @cst_451 = #util.byte_pattern<700> : tensor<11008x32x1xf16>
  util.global private @cst_575 = #util.byte_pattern<701> : tensor<11008x32x1xf16>
  util.global private @cst_1 = #util.byte_pattern<702> : tensor<11008x4096xi4>
  util.global private @cst_564 = #util.byte_pattern<703> : tensor<11008x32x1xf16>
  util.global private @cst_502 = #util.byte_pattern<704> : tensor<4096x32x1xf16>
  util.global private @cst_472 = #util.byte_pattern<705> : tensor<4096x32x1xf16>
  util.global private @cst_536 = #util.byte_pattern<706> : tensor<11008x32x1xf16>
  util.global private @cst_546 = #util.byte_pattern<707> : tensor<4096x86x1xf16>
  util.global private @cst_262 = #util.byte_pattern<708> : tensor<4096x32x1xf16>
  util.global private @cst_78 = #util.byte_pattern<709> : tensor<11008x4096xi4>
  util.global private @cst_200 = #util.byte_pattern<710> : tensor<4096x4096xi4>
  util.global private @cst_475 = #util.byte_pattern<711> : tensor<4096x86x1xf16>
  util.global private @cst_2 = #util.byte_pattern<712> : tensor<4096x4096xi4>
  util.global private @cst_624 = #util.byte_pattern<713> : tensor<4096x32x1xf16>
  util.global private @cst_357 = #util.byte_pattern<714> : tensor<4096x32x1xf16>
  util.global private @cst_490 = #util.byte_pattern<715> : tensor<4096x86x1xf16>
  util.global private @cst_86 = #util.byte_pattern<716> : tensor<4096x4096xi4>
  util.global private @cst_153 = #util.byte_pattern<717> : tensor<4096x11008xi4>
  util.global private @cst_310 = #util.byte_pattern<718> : tensor<11008x32x1xf16>
  util.global private @cst_430 = #util.byte_pattern<719> : tensor<4096x32x1xf16>
  util.global private @cst_440 = #util.byte_pattern<720> : tensor<4096x32x1xf16>
  util.global private @cst_601 = #util.byte_pattern<721> : tensor<4096x86x1xf16>
  util.global private @cst_71 = #util.byte_pattern<722> : tensor<11008x4096xi4>
  util.global private @cst_694 = #util.byte_pattern<723> : tensor<4096xf16>
  util.global private @cst_646 = #util.byte_pattern<724> : tensor<11008x32x1xf16>
  util.global private @cst_545 = #util.byte_pattern<725> : tensor<4096x86x1xf16>
  util.global private @cst_4 = #util.byte_pattern<726> : tensor<4096x4096xi4>
  util.global private @cst_705 = #util.byte_pattern<727> : tensor<4096xf16>
  util.global private @cst_369 = #util.byte_pattern<728> : tensor<4096x32x1xf16>
  util.global private @cst_432 = #util.byte_pattern<729> : tensor<4096x32x1xf16>
  util.global private @cst_297 = #util.byte_pattern<730> : tensor<11008x32x1xf16>
  util.global private @cst_251 = #util.byte_pattern<731> : tensor<4096x86x1xf16>
  util.global private @cst_681 = #util.byte_pattern<732> : tensor<4096xf16>
  util.global private @cst_405 = #util.byte_pattern<733> : tensor<4096x86x1xf16>
  util.global private @cst_723 = #util.byte_pattern<734> : tensor<4096xf16>
  util.global private @cst_721 = #util.byte_pattern<735> : tensor<4096xf16>
  util.global private @cst_630 = #util.byte_pattern<736> : tensor<4096x86x1xf16>
  util.global private @cst_280 = #util.byte_pattern<737> : tensor<4096x86x1xf16>
  util.global private @cst_744 = -6.550400e+04 : f64
  util.global private @cst_587 = #util.byte_pattern<738> : tensor<4096x86x1xf16>
  util.global private @cst_91 = #util.byte_pattern<739> : tensor<11008x4096xi4>
  util.global private @cst_181 = #util.byte_pattern<740> : tensor<4096x11008xi4>
  util.global private @cst_346 = #util.byte_pattern<741> : tensor<4096x32x1xf16>
  util.global private mutable @global_seed = #util.byte_pattern<742> : tensor<i64>
  func.func @first_vicuna_forward(%arg0: tensor<1x?xi64>) -> (tensor<1x?x32000xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) {
    %cst_728 = util.global.load @cst_728 : tensor<4096xf16>
    %cst_599 = util.global.load @cst_599 : tensor<4096x32x1xf16>
    %cst_632 = util.global.load @cst_632 : tensor<11008x32x1xf16>
    %cst_489 = util.global.load @cst_489 : tensor<4096x86x1xf16>
    %cst_443 = util.global.load @cst_443 : tensor<4096x32x1xf16>
    %cst_58 = util.global.load @cst_58 : tensor<4096x4096xi4>
    %cst_29 = util.global.load @cst_29 : tensor<11008x4096xi4>
    %cst_383 = util.global.load @cst_383 : tensor<4096x32x1xf16>
    %cst_367 = util.global.load @cst_367 : tensor<11008x32x1xf16>
    %cst_501 = util.global.load @cst_501 : tensor<4096x32x1xf16>
    %cst_592 = util.global.load @cst_592 : tensor<11008x32x1xf16>
    %cst_524 = util.global.load @cst_524 : tensor<4096x32x1xf16>
    %cst_56 = util.global.load @cst_56 : tensor<11008x4096xi4>
    %cst_107 = util.global.load @cst_107 : tensor<4096x4096xi4>
    %cst_421 = util.global.load @cst_421 : tensor<11008x32x1xf16>
    %cst_190 = util.global.load @cst_190 : tensor<11008x4096xi4>
    %cst_570 = util.global.load @cst_570 : tensor<4096x32x1xf16>
    %cst_642 = util.global.load @cst_642 : tensor<4096x32x1xf16>
    %cst_48 = util.global.load @cst_48 : tensor<4096x11008xi4>
    %cst_252 = util.global.load @cst_252 : tensor<4096x86x1xf16>
    %cst_18 = util.global.load @cst_18 : tensor<4096x4096xi4>
    %cst_541 = util.global.load @cst_541 : tensor<4096x32x1xf16>
    %cst_75 = util.global.load @cst_75 : tensor<4096x4096xi4>
    %cst_231 = util.global.load @cst_231 : tensor<4096x32x1xf16>
    %cst_745 = util.global.load @cst_745 : f64
    %cst_665 = util.global.load @cst_665 : tensor<4096x32x1xf16>
    %cst_712 = util.global.load @cst_712 : tensor<4096xf16>
    %cst_557 = util.global.load @cst_557 : tensor<4096x32x1xf16>
    %cst_159 = util.global.load @cst_159 : tensor<4096x4096xi4>
    %cst_701 = util.global.load @cst_701 : tensor<4096xf16>
    %cst_497 = util.global.load @cst_497 : tensor<4096x32x1xf16>
    %cst_401 = util.global.load @cst_401 : tensor<4096x32x1xf16>
    %cst_737 = util.global.load @cst_737 : tensor<1x1x4096x128xf16>
    %cst_31 = util.global.load @cst_31 : tensor<4096x4096xi4>
    %cst_727 = util.global.load @cst_727 : tensor<4096xf16>
    %cst_580 = util.global.load @cst_580 : tensor<4096x32x1xf16>
    %cst_391 = util.global.load @cst_391 : tensor<4096x86x1xf16>
    %cst_365 = util.global.load @cst_365 : tensor<11008x32x1xf16>
    %cst_302 = util.global.load @cst_302 : tensor<4096x32x1xf16>
    %cst_76 = util.global.load @cst_76 : tensor<4096x11008xi4>
    %cst_120 = util.global.load @cst_120 : tensor<11008x4096xi4>
    %cst_385 = util.global.load @cst_385 : tensor<4096x32x1xf16>
    %cst_255 = util.global.load @cst_255 : tensor<11008x32x1xf16>
    %cst_65 = util.global.load @cst_65 : tensor<4096x4096xi4>
    %cst_203 = util.global.load @cst_203 : tensor<11008x4096xi4>
    %cst_397 = util.global.load @cst_397 : tensor<4096x32x1xf16>
    %cst_176 = util.global.load @cst_176 : tensor<11008x4096xi4>
    %cst_239 = util.global.load @cst_239 : tensor<11008x32x1xf16>
    %cst_660 = util.global.load @cst_660 : tensor<11008x32x1xf16>
    %cst_3 = util.global.load @cst_3 : tensor<4096x4096xi4>
    %cst_461 = util.global.load @cst_461 : tensor<4096x86x1xf16>
    %cst_124 = util.global.load @cst_124 : tensor<4096x4096xi4>
    %cst_649 = util.global.load @cst_649 : tensor<4096x32x1xf16>
    %cst = util.global.load @cst : tensor<4096x11008xi4>
    %cst_644 = util.global.load @cst_644 : tensor<4096x86x1xf16>
    %cst_559 = util.global.load @cst_559 : tensor<4096x86x1xf16>
    %cst_234 = util.global.load @cst_234 : tensor<4096x32x1xf16>
    %cst_530 = util.global.load @cst_530 : tensor<4096x32x1xf16>
    %cst_527 = util.global.load @cst_527 : tensor<4096x32x1xf16>
    %cst_634 = util.global.load @cst_634 : tensor<11008x32x1xf16>
    %cst_256 = util.global.load @cst_256 : tensor<11008x32x1xf16>
    %cst_375 = util.global.load @cst_375 : tensor<4096x32x1xf16>
    %cst_683 = util.global.load @cst_683 : tensor<4096xf16>
    %cst_561 = util.global.load @cst_561 : tensor<11008x32x1xf16>
    %cst_503 = util.global.load @cst_503 : tensor<4096x86x1xf16>
    %cst_428 = util.global.load @cst_428 : tensor<4096x32x1xf16>
    %cst_303 = util.global.load @cst_303 : tensor<4096x32x1xf16>
    %cst_435 = util.global.load @cst_435 : tensor<11008x32x1xf16>
    %cst_703 = util.global.load @cst_703 : tensor<4096xf16>
    %cst_438 = util.global.load @cst_438 : tensor<11008x32x1xf16>
    %cst_193 = util.global.load @cst_193 : tensor<4096x4096xi4>
    %cst_183 = util.global.load @cst_183 : tensor<11008x4096xi4>
    %cst_139 = util.global.load @cst_139 : tensor<4096x11008xi4>
    %cst_422 = util.global.load @cst_422 : tensor<11008x32x1xf16>
    %cst_569 = util.global.load @cst_569 : tensor<4096x32x1xf16>
    %cst_317 = util.global.load @cst_317 : tensor<4096x32x1xf16>
    %cst_565 = util.global.load @cst_565 : tensor<4096x32x1xf16>
    %cst_291 = util.global.load @cst_291 : tensor<4096x32x1xf16>
    %cst_160 = util.global.load @cst_160 : tensor<4096x11008xi4>
    %cst_162 = util.global.load @cst_162 : tensor<11008x4096xi4>
    %cst_170 = util.global.load @cst_170 : tensor<4096x4096xi4>
    %cst_216 = util.global.load @cst_216 : tensor<4096x11008xi4>
    %cst_482 = util.global.load @cst_482 : tensor<4096x32x1xf16>
    %cst_112 = util.global.load @cst_112 : tensor<11008x4096xi4>
    %cst_246 = util.global.load @cst_246 : tensor<4096x32x1xf16>
    %cst_549 = util.global.load @cst_549 : tensor<11008x32x1xf16>
    %cst_406 = util.global.load @cst_406 : tensor<4096x86x1xf16>
    %cst_586 = util.global.load @cst_586 : tensor<4096x32x1xf16>
    %cst_247 = util.global.load @cst_247 : tensor<4096x32x1xf16>
    %cst_542 = util.global.load @cst_542 : tensor<4096x32x1xf16>
    %cst_114 = util.global.load @cst_114 : tensor<4096x4096xi4>
    %cst_214 = util.global.load @cst_214 : tensor<4096x4096xi4>
    %cst_339 = util.global.load @cst_339 : tensor<11008x32x1xf16>
    %cst_725 = util.global.load @cst_725 : tensor<4096xf16>
    %cst_623 = util.global.load @cst_623 : tensor<4096x32x1xf16>
    %cst_271 = util.global.load @cst_271 : tensor<4096x32x1xf16>
    %cst_215 = util.global.load @cst_215 : tensor<4096x4096xi4>
    %cst_423 = util.global.load @cst_423 : tensor<11008x32x1xf16>
    %cst_518 = util.global.load @cst_518 : tensor<4096x86x1xf16>
    %cst_566 = util.global.load @cst_566 : tensor<4096x32x1xf16>
    %cst_478 = util.global.load @cst_478 : tensor<11008x32x1xf16>
    %cst_529 = util.global.load @cst_529 : tensor<4096x32x1xf16>
    %cst_719 = util.global.load @cst_719 : tensor<4096xf16>
    %cst_309 = util.global.load @cst_309 : tensor<11008x32x1xf16>
    %cst_306 = util.global.load @cst_306 : tensor<4096x32x1xf16>
    %cst_17 = util.global.load @cst_17 : tensor<4096x4096xi4>
    %cst_748 = util.global.load @cst_748 : f32
    %cst_70 = util.global.load @cst_70 : tensor<11008x4096xi4>
    %cst_709 = util.global.load @cst_709 : tensor<4096xf16>
    %cst_509 = util.global.load @cst_509 : tensor<4096x32x1xf16>
    %cst_136 = util.global.load @cst_136 : tensor<4096x4096xi4>
    %cst_680 = util.global.load @cst_680 : tensor<4096xf16>
    %cst_263 = util.global.load @cst_263 : tensor<4096x32x1xf16>
    %cst_477 = util.global.load @cst_477 : tensor<11008x32x1xf16>
    %cst_676 = util.global.load @cst_676 : tensor<4096xf16>
    %cst_289 = util.global.load @cst_289 : tensor<4096x32x1xf16>
    %cst_340 = util.global.load @cst_340 : tensor<11008x32x1xf16>
    %cst_447 = util.global.load @cst_447 : tensor<4096x86x1xf16>
    %cst_520 = util.global.load @cst_520 : tensor<11008x32x1xf16>
    %cst_348 = util.global.load @cst_348 : tensor<4096x32x1xf16>
    %cst_651 = util.global.load @cst_651 : tensor<4096x32x1xf16>
    %cst_188 = util.global.load @cst_188 : tensor<4096x11008xi4>
    %cst_104 = util.global.load @cst_104 : tensor<4096x11008xi4>
    %cst_457 = util.global.load @cst_457 : tensor<4096x32x1xf16>
    %c19 = util.global.load @c19 : index
    %cst_184 = util.global.load @cst_184 : tensor<4096x4096xi4>
    %cst_296 = util.global.load @cst_296 : tensor<11008x32x1xf16>
    %cst_629 = util.global.load @cst_629 : tensor<4096x86x1xf16>
    %cst_668 = util.global.load @cst_668 : tensor<4096x32x1xf16>
    %cst_589 = util.global.load @cst_589 : tensor<11008x32x1xf16>
    %cst_167 = util.global.load @cst_167 : tensor<4096x11008xi4>
    %cst_66 = util.global.load @cst_66 : tensor<4096x4096xi4>
    %cst_149 = util.global.load @cst_149 : tensor<4096x4096xi4>
    %cst_146 = util.global.load @cst_146 : tensor<4096x11008xi4>
    %cst_156 = util.global.load @cst_156 : tensor<4096x4096xi4>
    %cst_336 = util.global.load @cst_336 : tensor<4096x86x1xf16>
    %cst_242 = util.global.load @cst_242 : tensor<11008x32x1xf16>
    %cst_358 = util.global.load @cst_358 : tensor<4096x32x1xf16>
    %cst_227 = util.global.load @cst_227 : tensor<11008x32x1xf16>
    %cst_605 = util.global.load @cst_605 : tensor<11008x32x1xf16>
    %cst_236 = util.global.load @cst_236 : tensor<4096x32x1xf16>
    %cst_102 = util.global.load @cst_102 : tensor<4096x4096xi4>
    %cst_610 = util.global.load @cst_610 : tensor<4096x32x1xf16>
    %cst_697 = util.global.load @cst_697 : tensor<4096xf16>
    %cst_677 = util.global.load @cst_677 : tensor<4096xf16>
    %cst_59 = util.global.load @cst_59 : tensor<4096x4096xi4>
    %cst_8 = util.global.load @cst_8 : tensor<11008x4096xi4>
    %cst_398 = util.global.load @cst_398 : tensor<4096x32x1xf16>
    %cst_608 = util.global.load @cst_608 : tensor<4096x32x1xf16>
    %cst_161 = util.global.load @cst_161 : tensor<11008x4096xi4>
    %cst_33 = util.global.load @cst_33 : tensor<4096x4096xi4>
    %cst_313 = util.global.load @cst_313 : tensor<4096x32x1xf16>
    %cst_364 = util.global.load @cst_364 : tensor<4096x86x1xf16>
    %cst_519 = util.global.load @cst_519 : tensor<11008x32x1xf16>
    %cst_647 = util.global.load @cst_647 : tensor<11008x32x1xf16>
    %cst_650 = util.global.load @cst_650 : tensor<4096x32x1xf16>
    %cst_596 = util.global.load @cst_596 : tensor<4096x32x1xf16>
    %cst_321 = util.global.load @cst_321 : tensor<4096x86x1xf16>
    %cst_64 = util.global.load @cst_64 : tensor<11008x4096xi4>
    %c1_i64 = util.global.load @c1_i64 : i64
    %cst_626 = util.global.load @cst_626 : tensor<4096x32x1xf16>
    %cst_493 = util.global.load @cst_493 : tensor<11008x32x1xf16>
    %cst_699 = util.global.load @cst_699 : tensor<4096xf16>
    %c1 = util.global.load @c1 : index
    %cst_551 = util.global.load @cst_551 : tensor<4096x32x1xf16>
    %cst_284 = util.global.load @cst_284 : tensor<11008x32x1xf16>
    %cst_413 = util.global.load @cst_413 : tensor<4096x32x1xf16>
    %cst_441 = util.global.load @cst_441 : tensor<4096x32x1xf16>
    %cst_87 = util.global.load @cst_87 : tensor<4096x4096xi4>
    %cst_708 = util.global.load @cst_708 : tensor<4096xf16>
    %cst_121 = util.global.load @cst_121 : tensor<4096x4096xi4>
    %cst_390 = util.global.load @cst_390 : tensor<4096x32x1xf16>
    %cst_379 = util.global.load @cst_379 : tensor<11008x32x1xf16>
    %cst_19 = util.global.load @cst_19 : tensor<4096x4096xi4>
    %cst_290 = util.global.load @cst_290 : tensor<4096x32x1xf16>
    %cst_468 = util.global.load @cst_468 : tensor<4096x32x1xf16>
    %cst_103 = util.global.load @cst_103 : tensor<4096x4096xi4>
    %cst_454 = util.global.load @cst_454 : tensor<4096x32x1xf16>
    %cst_577 = util.global.load @cst_577 : tensor<11008x32x1xf16>
    %cst_424 = util.global.load @cst_424 : tensor<11008x32x1xf16>
    %cst_747 = util.global.load @cst_747 : f32
    %cst_221 = util.global.load @cst_221 : tensor<4096x4096xi4>
    %cst_265 = util.global.load @cst_265 : tensor<4096x86x1xf16>
    %c2 = util.global.load @c2 : index
    %cst_722 = util.global.load @cst_722 : tensor<4096xf16>
    %cst_151 = util.global.load @cst_151 : tensor<4096x4096xi4>
    %cst_613 = util.global.load @cst_613 : tensor<4096x32x1xf16>
    %cst_35 = util.global.load @cst_35 : tensor<11008x4096xi4>
    %cst_606 = util.global.load @cst_606 : tensor<11008x32x1xf16>
    %cst_663 = util.global.load @cst_663 : tensor<4096x32x1xf16>
    %cst_158 = util.global.load @cst_158 : tensor<4096x4096xi4>
    %cst_479 = util.global.load @cst_479 : tensor<11008x32x1xf16>
    %cst_491 = util.global.load @cst_491 : tensor<11008x32x1xf16>
    %cst_392 = util.global.load @cst_392 : tensor<4096x86x1xf16>
    %cst_420 = util.global.load @cst_420 : tensor<4096x86x1xf16>
    %cst_288 = util.global.load @cst_288 : tensor<4096x32x1xf16>
    %cst_222 = util.global.load @cst_222 : tensor<4096x4096xi4>
    %cst_85 = util.global.load @cst_85 : tensor<11008x4096xi4>
    %cst_207 = util.global.load @cst_207 : tensor<4096x4096xi4>
    %cst_621 = util.global.load @cst_621 : tensor<4096x32x1xf16>
    %cst_733 = util.global.load @cst_733 : tensor<4096xf16>
    %cst_259 = util.global.load @cst_259 : tensor<4096x32x1xf16>
    %cst_718 = util.global.load @cst_718 : tensor<4096xf16>
    %cst_396 = util.global.load @cst_396 : tensor<11008x32x1xf16>
    %cst_600 = util.global.load @cst_600 : tensor<4096x32x1xf16>
    %cst_178 = util.global.load @cst_178 : tensor<4096x4096xi4>
    %cst_342 = util.global.load @cst_342 : tensor<4096x32x1xf16>
    %cst_591 = util.global.load @cst_591 : tensor<11008x32x1xf16>
    %cst_746 = util.global.load @cst_746 : f64
    %cst_281 = util.global.load @cst_281 : tensor<11008x32x1xf16>
    %cst_16 = util.global.load @cst_16 : tensor<4096x4096xi4>
    %cst_688 = util.global.load @cst_688 : tensor<4096xf16>
    %cst_476 = util.global.load @cst_476 : tensor<4096x86x1xf16>
    %cst_394 = util.global.load @cst_394 : tensor<11008x32x1xf16>
    %cst_521 = util.global.load @cst_521 : tensor<11008x32x1xf16>
    %c19_i64 = util.global.load @c19_i64 : i64
    %cst_14 = util.global.load @cst_14 : tensor<11008x4096xi4>
    %cst_458 = util.global.load @cst_458 : tensor<4096x32x1xf16>
    %cst_679 = util.global.load @cst_679 : tensor<4096xf16>
    %cst_164 = util.global.load @cst_164 : tensor<4096x4096xi4>
    %cst_739 = util.global.load @cst_739 : tensor<32000x4096xf16>
    %cst_735 = util.global.load @cst_735 : tensor<4096xf16>
    %cst_483 = util.global.load @cst_483 : tensor<4096x32x1xf16>
    %cst_26 = util.global.load @cst_26 : tensor<4096x4096xi4>
    %cst_593 = util.global.load @cst_593 : tensor<4096x32x1xf16>
    %cst_407 = util.global.load @cst_407 : tensor<11008x32x1xf16>
    %cst_384 = util.global.load @cst_384 : tensor<4096x32x1xf16>
    %cst_344 = util.global.load @cst_344 : tensor<4096x32x1xf16>
    %cst_7 = util.global.load @cst_7 : tensor<11008x4096xi4>
    %cst_563 = util.global.load @cst_563 : tensor<11008x32x1xf16>
    %cst_616 = util.global.load @cst_616 : tensor<4096x86x1xf16>
    %cst_499 = util.global.load @cst_499 : tensor<4096x32x1xf16>
    %cst_403 = util.global.load @cst_403 : tensor<4096x32x1xf16>
    %cst_110 = util.global.load @cst_110 : tensor<4096x4096xi4>
    %cst_141 = util.global.load @cst_141 : tensor<11008x4096xi4>
    %cst_168 = util.global.load @cst_168 : tensor<11008x4096xi4>
    %cst_345 = util.global.load @cst_345 : tensor<4096x32x1xf16>
    %cst_506 = util.global.load @cst_506 : tensor<11008x32x1xf16>
    %cst_544 = util.global.load @cst_544 : tensor<4096x32x1xf16>
    %cst_243 = util.global.load @cst_243 : tensor<4096x32x1xf16>
    %cst_690 = util.global.load @cst_690 : tensor<4096xf16>
    %cst_507 = util.global.load @cst_507 : tensor<11008x32x1xf16>
    %cst_95 = util.global.load @cst_95 : tensor<4096x4096xi4>
    %cst_125 = util.global.load @cst_125 : tensor<4096x11008xi4>
    %cst_716 = util.global.load @cst_716 : tensor<4096xf16>
    %cst_36 = util.global.load @cst_36 : tensor<11008x4096xi4>
    %cst_15 = util.global.load @cst_15 : tensor<11008x4096xi4>
    %cst_260 = util.global.load @cst_260 : tensor<4096x32x1xf16>
    %cst_225 = util.global.load @cst_225 : tensor<11008x32x1xf16>
    %cst_555 = util.global.load @cst_555 : tensor<4096x32x1xf16>
    %cst_678 = util.global.load @cst_678 : tensor<4096xf16>
    %cst_152 = util.global.load @cst_152 : tensor<4096x4096xi4>
    %cst_275 = util.global.load @cst_275 : tensor<4096x32x1xf16>
    %cst_692 = util.global.load @cst_692 : tensor<4096xf16>
    %cst_724 = util.global.load @cst_724 : tensor<4096xf16>
    %cst_177 = util.global.load @cst_177 : tensor<4096x4096xi4>
    %cst_734 = util.global.load @cst_734 : tensor<4096xf16>
    %cst_175 = util.global.load @cst_175 : tensor<11008x4096xi4>
    %cst_145 = util.global.load @cst_145 : tensor<4096x4096xi4>
    %cst_552 = util.global.load @cst_552 : tensor<4096x32x1xf16>
    %cst_182 = util.global.load @cst_182 : tensor<11008x4096xi4>
    %cst_523 = util.global.load @cst_523 : tensor<4096x32x1xf16>
    %cst_444 = util.global.load @cst_444 : tensor<4096x32x1xf16>
    %cst_180 = util.global.load @cst_180 : tensor<4096x4096xi4>
    %cst_464 = util.global.load @cst_464 : tensor<11008x32x1xf16>
    %cst_119 = util.global.load @cst_119 : tensor<11008x4096xi4>
    %cst_235 = util.global.load @cst_235 : tensor<4096x32x1xf16>
    %cst_360 = util.global.load @cst_360 : tensor<4096x32x1xf16>
    %cst_196 = util.global.load @cst_196 : tensor<11008x4096xi4>
    %cst_597 = util.global.load @cst_597 : tensor<4096x32x1xf16>
    %cst_579 = util.global.load @cst_579 : tensor<4096x32x1xf16>
    %c0_i64 = util.global.load @c0_i64 : i64
    %cst_23 = util.global.load @cst_23 : tensor<4096x4096xi4>
    %cst_169 = util.global.load @cst_169 : tensor<11008x4096xi4>
    %cst_267 = util.global.load @cst_267 : tensor<11008x32x1xf16>
    %cst_192 = util.global.load @cst_192 : tensor<4096x4096xi4>
    %cst_717 = util.global.load @cst_717 : tensor<4096xf16>
    %cst_485 = util.global.load @cst_485 : tensor<4096x32x1xf16>
    %cst_442 = util.global.load @cst_442 : tensor<4096x32x1xf16>
    %cst_208 = util.global.load @cst_208 : tensor<4096x4096xi4>
    %cst_163 = util.global.load @cst_163 : tensor<4096x4096xi4>
    %cst_439 = util.global.load @cst_439 : tensor<4096x32x1xf16>
    %cst_620 = util.global.load @cst_620 : tensor<11008x32x1xf16>
    %cst_324 = util.global.load @cst_324 : tensor<11008x32x1xf16>
    %cst_532 = util.global.load @cst_532 : tensor<4096x86x1xf16>
    %cst_315 = util.global.load @cst_315 : tensor<4096x32x1xf16>
    %cst_157 = util.global.load @cst_157 : tensor<4096x4096xi4>
    %cst_513 = util.global.load @cst_513 : tensor<4096x32x1xf16>
    %cst_318 = util.global.load @cst_318 : tensor<4096x32x1xf16>
    %cst_581 = util.global.load @cst_581 : tensor<4096x32x1xf16>
    %cst_224 = util.global.load @cst_224 : tensor<4096x86x1xf16>
    %cst_453 = util.global.load @cst_453 : tensor<4096x32x1xf16>
    %cst_77 = util.global.load @cst_77 : tensor<11008x4096xi4>
    %cst_72 = util.global.load @cst_72 : tensor<4096x4096xi4>
    %cst_282 = util.global.load @cst_282 : tensor<11008x32x1xf16>
    %cst_553 = util.global.load @cst_553 : tensor<4096x32x1xf16>
    %cst_257 = util.global.load @cst_257 : tensor<4096x32x1xf16>
    %cst_535 = util.global.load @cst_535 : tensor<11008x32x1xf16>
    %cst_187 = util.global.load @cst_187 : tensor<4096x4096xi4>
    %cst_673 = util.global.load @cst_673 : tensor<4096xf16>
    %cst_128 = util.global.load @cst_128 : tensor<4096x4096xi4>
    %cst_486 = util.global.load @cst_486 : tensor<4096x32x1xf16>
    %cst_736 = util.global.load @cst_736 : tensor<1x1x4096x128xf16>
    %cst_131 = util.global.load @cst_131 : tensor<4096x4096xi4>
    %cst_171 = util.global.load @cst_171 : tensor<4096x4096xi4>
    %cst_533 = util.global.load @cst_533 : tensor<11008x32x1xf16>
    %cst_189 = util.global.load @cst_189 : tensor<11008x4096xi4>
    %cst_615 = util.global.load @cst_615 : tensor<4096x86x1xf16>
    %cst_118 = util.global.load @cst_118 : tensor<4096x11008xi4>
    %cst_329 = util.global.load @cst_329 : tensor<4096x32x1xf16>
    %cst_232 = util.global.load @cst_232 : tensor<4096x32x1xf16>
    %cst_388 = util.global.load @cst_388 : tensor<4096x32x1xf16>
    %cst_704 = util.global.load @cst_704 : tensor<4096xf16>
    %cst_410 = util.global.load @cst_410 : tensor<11008x32x1xf16>
    %cst_425 = util.global.load @cst_425 : tensor<4096x32x1xf16>
    %cst_238 = util.global.load @cst_238 : tensor<4096x86x1xf16>
    %cst_539 = util.global.load @cst_539 : tensor<4096x32x1xf16>
    %cst_327 = util.global.load @cst_327 : tensor<4096x32x1xf16>
    %cst_638 = util.global.load @cst_638 : tensor<4096x32x1xf16>
    %cst_27 = util.global.load @cst_27 : tensor<4096x11008xi4>
    %cst_362 = util.global.load @cst_362 : tensor<4096x32x1xf16>
    %cst_249 = util.global.load @cst_249 : tensor<4096x32x1xf16>
    %cst_106 = util.global.load @cst_106 : tensor<11008x4096xi4>
    %cst_698 = util.global.load @cst_698 : tensor<4096xf16>
    %cst_298 = util.global.load @cst_298 : tensor<11008x32x1xf16>
    %cst_434 = util.global.load @cst_434 : tensor<4096x86x1xf16>
    %cst_381 = util.global.load @cst_381 : tensor<11008x32x1xf16>
    %cst_496 = util.global.load @cst_496 : tensor<4096x32x1xf16>
    %cst_494 = util.global.load @cst_494 : tensor<11008x32x1xf16>
    %cst_143 = util.global.load @cst_143 : tensor<4096x4096xi4>
    %cst_69 = util.global.load @cst_69 : tensor<4096x11008xi4>
    %cst_645 = util.global.load @cst_645 : tensor<11008x32x1xf16>
    %cst_720 = util.global.load @cst_720 : tensor<4096xf16>
    %cst_305 = util.global.load @cst_305 : tensor<4096x32x1xf16>
    %cst_50 = util.global.load @cst_50 : tensor<11008x4096xi4>
    %cst_526 = util.global.load @cst_526 : tensor<4096x32x1xf16>
    %cst_669 = util.global.load @cst_669 : tensor<4096x32x1xf16>
    %cst_97 = util.global.load @cst_97 : tensor<4096x11008xi4>
    %cst_568 = util.global.load @cst_568 : tensor<4096x32x1xf16>
    %cst_576 = util.global.load @cst_576 : tensor<11008x32x1xf16>
    %cst_6 = util.global.load @cst_6 : tensor<4096x11008xi4>
    %cst_625 = util.global.load @cst_625 : tensor<4096x32x1xf16>
    %cst_210 = util.global.load @cst_210 : tensor<11008x4096xi4>
    %cst_500 = util.global.load @cst_500 : tensor<4096x32x1xf16>
    %cst_662 = util.global.load @cst_662 : tensor<11008x32x1xf16>
    %cst_590 = util.global.load @cst_590 : tensor<11008x32x1xf16>
    %cst_198 = util.global.load @cst_198 : tensor<4096x4096xi4>
    %cst_172 = util.global.load @cst_172 : tensor<4096x4096xi4>
    %cst_10 = util.global.load @cst_10 : tensor<4096x4096xi4>
    %cst_111 = util.global.load @cst_111 : tensor<4096x11008xi4>
    %cst_205 = util.global.load @cst_205 : tensor<4096x4096xi4>
    %cst_594 = util.global.load @cst_594 : tensor<4096x32x1xf16>
    %cst_386 = util.global.load @cst_386 : tensor<4096x32x1xf16>
    %cst_272 = util.global.load @cst_272 : tensor<4096x32x1xf16>
    %cst_598 = util.global.load @cst_598 : tensor<4096x32x1xf16>
    %cst_283 = util.global.load @cst_283 : tensor<11008x32x1xf16>
    %cst_488 = util.global.load @cst_488 : tensor<4096x32x1xf16>
    %cst_20 = util.global.load @cst_20 : tensor<4096x11008xi4>
    %cst_316 = util.global.load @cst_316 : tensor<4096x32x1xf16>
    %cst_611 = util.global.load @cst_611 : tensor<4096x32x1xf16>
    %cst_212 = util.global.load @cst_212 : tensor<4096x4096xi4>
    %true = util.global.load @true : i1
    %cst_333 = util.global.load @cst_333 : tensor<4096x32x1xf16>
    %cst_738 = util.global.load @cst_738 : tensor<4096xf16>
    %cst_400 = util.global.load @cst_400 : tensor<4096x32x1xf16>
    %cst_560 = util.global.load @cst_560 : tensor<4096x86x1xf16>
    %cst_684 = util.global.load @cst_684 : tensor<4096xf16>
    %cst_179 = util.global.load @cst_179 : tensor<4096x4096xi4>
    %cst_528 = util.global.load @cst_528 : tensor<4096x32x1xf16>
    %cst_268 = util.global.load @cst_268 : tensor<11008x32x1xf16>
    %cst_90 = util.global.load @cst_90 : tensor<4096x11008xi4>
    %cst_654 = util.global.load @cst_654 : tensor<4096x32x1xf16>
    %cst_269 = util.global.load @cst_269 : tensor<11008x32x1xf16>
    %cst_186 = util.global.load @cst_186 : tensor<4096x4096xi4>
    %cst_463 = util.global.load @cst_463 : tensor<11008x32x1xf16>
    %cst_515 = util.global.load @cst_515 : tensor<4096x32x1xf16>
    %cst_43 = util.global.load @cst_43 : tensor<11008x4096xi4>
    %cst_416 = util.global.load @cst_416 : tensor<4096x32x1xf16>
    %cst_174 = util.global.load @cst_174 : tensor<4096x11008xi4>
    %cst_633 = util.global.load @cst_633 : tensor<11008x32x1xf16>
    %cst_22 = util.global.load @cst_22 : tensor<11008x4096xi4>
    %cst_450 = util.global.load @cst_450 : tensor<11008x32x1xf16>
    %cst_92 = util.global.load @cst_92 : tensor<11008x4096xi4>
    %cst_522 = util.global.load @cst_522 : tensor<11008x32x1xf16>
    %cst_0 = util.global.load @cst_0 : tensor<11008x4096xi4>
    %cst_38 = util.global.load @cst_38 : tensor<4096x4096xi4>
    %cst_341 = util.global.load @cst_341 : tensor<4096x32x1xf16>
    %cst_492 = util.global.load @cst_492 : tensor<11008x32x1xf16>
    %cst_270 = util.global.load @cst_270 : tensor<11008x32x1xf16>
    %cst_82 = util.global.load @cst_82 : tensor<4096x4096xi4>
    %cst_652 = util.global.load @cst_652 : tensor<4096x32x1xf16>
    %cst_399 = util.global.load @cst_399 : tensor<4096x32x1xf16>
    %cst_711 = util.global.load @cst_711 : tensor<4096xf16>
    %cst_374 = util.global.load @cst_374 : tensor<4096x32x1xf16>
    %cst_11 = util.global.load @cst_11 : tensor<4096x4096xi4>
    %cst_418 = util.global.load @cst_418 : tensor<4096x32x1xf16>
    %cst_355 = util.global.load @cst_355 : tensor<4096x32x1xf16>
    %cst_508 = util.global.load @cst_508 : tensor<11008x32x1xf16>
    %cst_547 = util.global.load @cst_547 : tensor<11008x32x1xf16>
    %cst_202 = util.global.load @cst_202 : tensor<4096x11008xi4>
    %cst_28 = util.global.load @cst_28 : tensor<11008x4096xi4>
    %cst_34 = util.global.load @cst_34 : tensor<4096x11008xi4>
    %cst_481 = util.global.load @cst_481 : tensor<4096x32x1xf16>
    %cst_122 = util.global.load @cst_122 : tensor<4096x4096xi4>
    %cst_84 = util.global.load @cst_84 : tensor<11008x4096xi4>
    %cst_47 = util.global.load @cst_47 : tensor<4096x4096xi4>
    %cst_108 = util.global.load @cst_108 : tensor<4096x4096xi4>
    %cst_531 = util.global.load @cst_531 : tensor<4096x86x1xf16>
    %cst_40 = util.global.load @cst_40 : tensor<4096x4096xi4>
    %cst_351 = util.global.load @cst_351 : tensor<11008x32x1xf16>
    %cst_74 = util.global.load @cst_74 : tensor<4096x4096xi4>
    %cst_380 = util.global.load @cst_380 : tensor<11008x32x1xf16>
    %cst_307 = util.global.load @cst_307 : tensor<4096x86x1xf16>
    %cst_382 = util.global.load @cst_382 : tensor<11008x32x1xf16>
    %cst_675 = util.global.load @cst_675 : tensor<4096xf16>
    %cst_277 = util.global.load @cst_277 : tensor<4096x32x1xf16>
    %cst_534 = util.global.load @cst_534 : tensor<11008x32x1xf16>
    %cst_729 = util.global.load @cst_729 : tensor<4096xf16>
    %cst_368 = util.global.load @cst_368 : tensor<11008x32x1xf16>
    %cst_116 = util.global.load @cst_116 : tensor<4096x4096xi4>
    %cst_195 = util.global.load @cst_195 : tensor<4096x11008xi4>
    %cst_21 = util.global.load @cst_21 : tensor<11008x4096xi4>
    %cst_89 = util.global.load @cst_89 : tensor<4096x4096xi4>
    %cst_194 = util.global.load @cst_194 : tensor<4096x4096xi4>
    %cst_363 = util.global.load @cst_363 : tensor<4096x86x1xf16>
    %cst_607 = util.global.load @cst_607 : tensor<4096x32x1xf16>
    %cst_361 = util.global.load @cst_361 : tensor<4096x32x1xf16>
    %cst_332 = util.global.load @cst_332 : tensor<4096x32x1xf16>
    %cst_295 = util.global.load @cst_295 : tensor<11008x32x1xf16>
    %cst_323 = util.global.load @cst_323 : tensor<11008x32x1xf16>
    %cst_517 = util.global.load @cst_517 : tensor<4096x86x1xf16>
    %cst_628 = util.global.load @cst_628 : tensor<4096x32x1xf16>
    %cst_637 = util.global.load @cst_637 : tensor<4096x32x1xf16>
    %cst_325 = util.global.load @cst_325 : tensor<11008x32x1xf16>
    %cst_129 = util.global.load @cst_129 : tensor<4096x4096xi4>
    %cst_657 = util.global.load @cst_657 : tensor<4096x86x1xf16>
    %cst_68 = util.global.load @cst_68 : tensor<4096x4096xi4>
    %cst_343 = util.global.load @cst_343 : tensor<4096x32x1xf16>
    %cst_258 = util.global.load @cst_258 : tensor<4096x32x1xf16>
    %cst_113 = util.global.load @cst_113 : tensor<11008x4096xi4>
    %cst_504 = util.global.load @cst_504 : tensor<4096x86x1xf16>
    %cst_51 = util.global.load @cst_51 : tensor<4096x4096xi4>
    %cst_409 = util.global.load @cst_409 : tensor<11008x32x1xf16>
    %cst_150 = util.global.load @cst_150 : tensor<4096x4096xi4>
    %cst_427 = util.global.load @cst_427 : tensor<4096x32x1xf16>
    %cst_726 = util.global.load @cst_726 : tensor<4096xf16>
    %cst_334 = util.global.load @cst_334 : tensor<4096x32x1xf16>
    %cst_730 = util.global.load @cst_730 : tensor<4096xf16>
    %cst_39 = util.global.load @cst_39 : tensor<4096x4096xi4>
    %cst_79 = util.global.load @cst_79 : tensor<4096x4096xi4>
    %cst_462 = util.global.load @cst_462 : tensor<4096x86x1xf16>
    %cst_538 = util.global.load @cst_538 : tensor<4096x32x1xf16>
    %cst_250 = util.global.load @cst_250 : tensor<4096x32x1xf16>
    %cst_322 = util.global.load @cst_322 : tensor<4096x86x1xf16>
    %cst_130 = util.global.load @cst_130 : tensor<4096x4096xi4>
    %cst_134 = util.global.load @cst_134 : tensor<11008x4096xi4>
    %cst_543 = util.global.load @cst_543 : tensor<4096x32x1xf16>
    %cst_53 = util.global.load @cst_53 : tensor<4096x4096xi4>
    %cst_13 = util.global.load @cst_13 : tensor<4096x11008xi4>
    %cst_604 = util.global.load @cst_604 : tensor<11008x32x1xf16>
    %cst_155 = util.global.load @cst_155 : tensor<11008x4096xi4>
    %cst_426 = util.global.load @cst_426 : tensor<4096x32x1xf16>
    %cst_140 = util.global.load @cst_140 : tensor<11008x4096xi4>
    %cst_414 = util.global.load @cst_414 : tensor<4096x32x1xf16>
    %cst_505 = util.global.load @cst_505 : tensor<11008x32x1xf16>
    %cst_287 = util.global.load @cst_287 : tensor<4096x32x1xf16>
    %cst_42 = util.global.load @cst_42 : tensor<11008x4096xi4>
    %cst_366 = util.global.load @cst_366 : tensor<11008x32x1xf16>
    %cst_480 = util.global.load @cst_480 : tensor<11008x32x1xf16>
    %cst_81 = util.global.load @cst_81 : tensor<4096x4096xi4>
    %cst_137 = util.global.load @cst_137 : tensor<4096x4096xi4>
    %cst_408 = util.global.load @cst_408 : tensor<11008x32x1xf16>
    %cst_147 = util.global.load @cst_147 : tensor<11008x4096xi4>
    %cst_209 = util.global.load @cst_209 : tensor<4096x11008xi4>
    %cst_37 = util.global.load @cst_37 : tensor<4096x4096xi4>
    %cst_567 = util.global.load @cst_567 : tensor<4096x32x1xf16>
    %cst_658 = util.global.load @cst_658 : tensor<4096x86x1xf16>
    %cst_411 = util.global.load @cst_411 : tensor<4096x32x1xf16>
    %cst_206 = util.global.load @cst_206 : tensor<4096x4096xi4>
    %cst_80 = util.global.load @cst_80 : tensor<4096x4096xi4>
    %cst_614 = util.global.load @cst_614 : tensor<4096x32x1xf16>
    %cst_700 = util.global.load @cst_700 : tensor<4096xf16>
    %cst_204 = util.global.load @cst_204 : tensor<11008x4096xi4>
    %cst_588 = util.global.load @cst_588 : tensor<4096x86x1xf16>
    %cst_371 = util.global.load @cst_371 : tensor<4096x32x1xf16>
    %cst_230 = util.global.load @cst_230 : tensor<4096x32x1xf16>
    %cst_62 = util.global.load @cst_62 : tensor<4096x11008xi4>
    %cst_142 = util.global.load @cst_142 : tensor<4096x4096xi4>
    %cst_292 = util.global.load @cst_292 : tensor<4096x32x1xf16>
    %cst_88 = util.global.load @cst_88 : tensor<4096x4096xi4>
    %cst_473 = util.global.load @cst_473 : tensor<4096x32x1xf16>
    %cst_387 = util.global.load @cst_387 : tensor<4096x32x1xf16>
    %cst_742 = util.global.load @cst_742 : f16
    %cst_578 = util.global.load @cst_578 : tensor<11008x32x1xf16>
    %cst_83 = util.global.load @cst_83 : tensor<4096x11008xi4>
    %cst_154 = util.global.load @cst_154 : tensor<11008x4096xi4>
    %cst_197 = util.global.load @cst_197 : tensor<11008x4096xi4>
    %cst_525 = util.global.load @cst_525 : tensor<4096x32x1xf16>
    %cst_640 = util.global.load @cst_640 : tensor<4096x32x1xf16>
    %cst_299 = util.global.load @cst_299 : tensor<4096x32x1xf16>
    %cst_100 = util.global.load @cst_100 : tensor<4096x4096xi4>
    %cst_144 = util.global.load @cst_144 : tensor<4096x4096xi4>
    %cst_354 = util.global.load @cst_354 : tensor<11008x32x1xf16>
    %cst_689 = util.global.load @cst_689 : tensor<4096xf16>
    %cst_732 = util.global.load @cst_732 : tensor<4096xf16>
    %cst_226 = util.global.load @cst_226 : tensor<11008x32x1xf16>
    %cst_415 = util.global.load @cst_415 : tensor<4096x32x1xf16>
    %cst_101 = util.global.load @cst_101 : tensor<4096x4096xi4>
    %cst_714 = util.global.load @cst_714 : tensor<4096xf16>
    %cst_132 = util.global.load @cst_132 : tensor<4096x11008xi4>
    %cst_446 = util.global.load @cst_446 : tensor<4096x32x1xf16>
    %cst_57 = util.global.load @cst_57 : tensor<11008x4096xi4>
    %cst_337 = util.global.load @cst_337 : tensor<11008x32x1xf16>
    %cst_93 = util.global.load @cst_93 : tensor<4096x4096xi4>
    %cst_127 = util.global.load @cst_127 : tensor<11008x4096xi4>
    %cst_511 = util.global.load @cst_511 : tensor<4096x32x1xf16>
    %cst_622 = util.global.load @cst_622 : tensor<4096x32x1xf16>
    %cst_395 = util.global.load @cst_395 : tensor<11008x32x1xf16>
    %cst_279 = util.global.load @cst_279 : tensor<4096x86x1xf16>
    %cst_393 = util.global.load @cst_393 : tensor<11008x32x1xf16>
    %cst_135 = util.global.load @cst_135 : tensor<4096x4096xi4>
    %cst_12 = util.global.load @cst_12 : tensor<4096x4096xi4>
    %cst_278 = util.global.load @cst_278 : tensor<4096x32x1xf16>
    %cst_25 = util.global.load @cst_25 : tensor<4096x4096xi4>
    %cst_512 = util.global.load @cst_512 : tensor<4096x32x1xf16>
    %cst_370 = util.global.load @cst_370 : tensor<4096x32x1xf16>
    %cst_99 = util.global.load @cst_99 : tensor<11008x4096xi4>
    %cst_573 = util.global.load @cst_573 : tensor<4096x86x1xf16>
    %cst_661 = util.global.load @cst_661 : tensor<11008x32x1xf16>
    %cst_743 = util.global.load @cst_743 : f16
    %cst_98 = util.global.load @cst_98 : tensor<11008x4096xi4>
    %cst_656 = util.global.load @cst_656 : tensor<4096x32x1xf16>
    %cst_465 = util.global.load @cst_465 : tensor<11008x32x1xf16>
    %cst_237 = util.global.load @cst_237 : tensor<4096x86x1xf16>
    %cst_5 = util.global.load @cst_5 : tensor<4096x4096xi4>
    %cst_312 = util.global.load @cst_312 : tensor<11008x32x1xf16>
    %cst_514 = util.global.load @cst_514 : tensor<4096x32x1xf16>
    %cst_314 = util.global.load @cst_314 : tensor<4096x32x1xf16>
    %cst_540 = util.global.load @cst_540 : tensor<4096x32x1xf16>
    %cst_466 = util.global.load @cst_466 : tensor<11008x32x1xf16>
    %cst_691 = util.global.load @cst_691 : tensor<4096xf16>
    %cst_220 = util.global.load @cst_220 : tensor<4096x4096xi4>
    %cst_304 = util.global.load @cst_304 : tensor<4096x32x1xf16>
    %cst_429 = util.global.load @cst_429 : tensor<4096x32x1xf16>
    %cst_510 = util.global.load @cst_510 : tensor<4096x32x1xf16>
    %cst_554 = util.global.load @cst_554 : tensor<4096x32x1xf16>
    %cst_376 = util.global.load @cst_376 : tensor<4096x32x1xf16>
    %cst_550 = util.global.load @cst_550 : tensor<11008x32x1xf16>
    %cst_437 = util.global.load @cst_437 : tensor<11008x32x1xf16>
    %cst_311 = util.global.load @cst_311 : tensor<11008x32x1xf16>
    %cst_653 = util.global.load @cst_653 : tensor<4096x32x1xf16>
    %cst_685 = util.global.load @cst_685 : tensor<4096xf16>
    %cst_603 = util.global.load @cst_603 : tensor<11008x32x1xf16>
    %cst_353 = util.global.load @cst_353 : tensor<11008x32x1xf16>
    %cst_585 = util.global.load @cst_585 : tensor<4096x32x1xf16>
    %cst_671 = util.global.load @cst_671 : tensor<32000x4096xf16>
    %cst_301 = util.global.load @cst_301 : tensor<4096x32x1xf16>
    %cst_133 = util.global.load @cst_133 : tensor<11008x4096xi4>
    %cst_44 = util.global.load @cst_44 : tensor<4096x4096xi4>
    %cst_571 = util.global.load @cst_571 : tensor<4096x32x1xf16>
    %cst_617 = util.global.load @cst_617 : tensor<11008x32x1xf16>
    %cst_264 = util.global.load @cst_264 : tensor<4096x32x1xf16>
    %cst_359 = util.global.load @cst_359 : tensor<4096x32x1xf16>
    %cst_639 = util.global.load @cst_639 : tensor<4096x32x1xf16>
    %cst_46 = util.global.load @cst_46 : tensor<4096x4096xi4>
    %cst_30 = util.global.load @cst_30 : tensor<4096x4096xi4>
    %cst_412 = util.global.load @cst_412 : tensor<4096x32x1xf16>
    %cst_474 = util.global.load @cst_474 : tensor<4096x32x1xf16>
    %cst_582 = util.global.load @cst_582 : tensor<4096x32x1xf16>
    %cst_433 = util.global.load @cst_433 : tensor<4096x86x1xf16>
    %cst_648 = util.global.load @cst_648 : tensor<11008x32x1xf16>
    %cst_45 = util.global.load @cst_45 : tensor<4096x4096xi4>
    %cst_583 = util.global.load @cst_583 : tensor<4096x32x1xf16>
    %cst_350 = util.global.load @cst_350 : tensor<4096x86x1xf16>
    %cst_682 = util.global.load @cst_682 : tensor<4096xf16>
    %cst_448 = util.global.load @cst_448 : tensor<4096x86x1xf16>
    %cst_612 = util.global.load @cst_612 : tensor<4096x32x1xf16>
    %cst_643 = util.global.load @cst_643 : tensor<4096x86x1xf16>
    %cst_52 = util.global.load @cst_52 : tensor<4096x4096xi4>
    %cst_548 = util.global.load @cst_548 : tensor<11008x32x1xf16>
    %cst_702 = util.global.load @cst_702 : tensor<4096xf16>
    %cst_67 = util.global.load @cst_67 : tensor<4096x4096xi4>
    %cst_331 = util.global.load @cst_331 : tensor<4096x32x1xf16>
    %cst_148 = util.global.load @cst_148 : tensor<11008x4096xi4>
    %cst_347 = util.global.load @cst_347 : tensor<4096x32x1xf16>
    %cst_687 = util.global.load @cst_687 : tensor<4096xf16>
    %cst_73 = util.global.load @cst_73 : tensor<4096x4096xi4>
    %cst_41 = util.global.load @cst_41 : tensor<4096x11008xi4>
    %cst_431 = util.global.load @cst_431 : tensor<4096x32x1xf16>
    %cst_274 = util.global.load @cst_274 : tensor<4096x32x1xf16>
    %cst_659 = util.global.load @cst_659 : tensor<11008x32x1xf16>
    %cst_372 = util.global.load @cst_372 : tensor<4096x32x1xf16>
    %cst_695 = util.global.load @cst_695 : tensor<4096xf16>
    %cst_244 = util.global.load @cst_244 : tensor<4096x32x1xf16>
    %cst_138 = util.global.load @cst_138 : tensor<4096x4096xi4>
    %cst_627 = util.global.load @cst_627 : tensor<4096x32x1xf16>
    %cst_335 = util.global.load @cst_335 : tensor<4096x86x1xf16>
    %cst_667 = util.global.load @cst_667 : tensor<4096x32x1xf16>
    %cst_55 = util.global.load @cst_55 : tensor<4096x11008xi4>
    %cst_96 = util.global.load @cst_96 : tensor<4096x4096xi4>
    %cst_218 = util.global.load @cst_218 : tensor<11008x4096xi4>
    %cst_254 = util.global.load @cst_254 : tensor<11008x32x1xf16>
    %cst_219 = util.global.load @cst_219 : tensor<4096x4096xi4>
    %cst_356 = util.global.load @cst_356 : tensor<4096x32x1xf16>
    %cst_609 = util.global.load @cst_609 : tensor<4096x32x1xf16>
    %cst_459 = util.global.load @cst_459 : tensor<4096x32x1xf16>
    %cst_602 = util.global.load @cst_602 : tensor<4096x86x1xf16>
    %cst_731 = util.global.load @cst_731 : tensor<4096xf16>
    %cst_233 = util.global.load @cst_233 : tensor<4096x32x1xf16>
    %cst_352 = util.global.load @cst_352 : tensor<11008x32x1xf16>
    %cst_713 = util.global.load @cst_713 : tensor<4096xf16>
    %cst_338 = util.global.load @cst_338 : tensor<11008x32x1xf16>
    %cst_308 = util.global.load @cst_308 : tensor<4096x86x1xf16>
    %cst_63 = util.global.load @cst_63 : tensor<11008x4096xi4>
    %cst_185 = util.global.load @cst_185 : tensor<4096x4096xi4>
    %cst_115 = util.global.load @cst_115 : tensor<4096x4096xi4>
    %cst_32 = util.global.load @cst_32 : tensor<4096x4096xi4>
    %cst_117 = util.global.load @cst_117 : tensor<4096x4096xi4>
    %cst_253 = util.global.load @cst_253 : tensor<11008x32x1xf16>
    %cst_715 = util.global.load @cst_715 : tensor<4096xf16>
    %cst_696 = util.global.load @cst_696 : tensor<4096xf16>
    %cst_228 = util.global.load @cst_228 : tensor<11008x32x1xf16>
    %cst_619 = util.global.load @cst_619 : tensor<11008x32x1xf16>
    %cst_166 = util.global.load @cst_166 : tensor<4096x4096xi4>
    %cst_389 = util.global.load @cst_389 : tensor<4096x32x1xf16>
    %cst_419 = util.global.load @cst_419 : tensor<4096x86x1xf16>
    %cst_201 = util.global.load @cst_201 : tensor<4096x4096xi4>
    %cst_710 = util.global.load @cst_710 : tensor<4096xf16>
    %cst_460 = util.global.load @cst_460 : tensor<4096x32x1xf16>
    %cst_635 = util.global.load @cst_635 : tensor<4096x32x1xf16>
    %cst_498 = util.global.load @cst_498 : tensor<4096x32x1xf16>
    %cst_706 = util.global.load @cst_706 : tensor<4096xf16>
    %cst_248 = util.global.load @cst_248 : tensor<4096x32x1xf16>
    %cst_261 = util.global.load @cst_261 : tensor<4096x32x1xf16>
    %cst_211 = util.global.load @cst_211 : tensor<11008x4096xi4>
    %cst_241 = util.global.load @cst_241 : tensor<11008x32x1xf16>
    %cst_240 = util.global.load @cst_240 : tensor<11008x32x1xf16>
    %cst_213 = util.global.load @cst_213 : tensor<4096x4096xi4>
    %cst_707 = util.global.load @cst_707 : tensor<4096xf16>
    %cst_24 = util.global.load @cst_24 : tensor<4096x4096xi4>
    %cst_9 = util.global.load @cst_9 : tensor<4096x4096xi4>
    %cst_595 = util.global.load @cst_595 : tensor<4096x32x1xf16>
    %cst_641 = util.global.load @cst_641 : tensor<4096x32x1xf16>
    %cst_452 = util.global.load @cst_452 : tensor<11008x32x1xf16>
    %cst_377 = util.global.load @cst_377 : tensor<4096x86x1xf16>
    %cst_436 = util.global.load @cst_436 : tensor<11008x32x1xf16>
    %cst_574 = util.global.load @cst_574 : tensor<4096x86x1xf16>
    %cst_537 = util.global.load @cst_537 : tensor<4096x32x1xf16>
    %cst_94 = util.global.load @cst_94 : tensor<4096x4096xi4>
    %cst_173 = util.global.load @cst_173 : tensor<4096x4096xi4>
    %cst_273 = util.global.load @cst_273 : tensor<4096x32x1xf16>
    %cst_109 = util.global.load @cst_109 : tensor<4096x4096xi4>
    %cst_741 = util.global.load @cst_741 : f32
    %cst_223 = util.global.load @cst_223 : tensor<4096x86x1xf16>
    %cst_584 = util.global.load @cst_584 : tensor<4096x32x1xf16>
    %cst_378 = util.global.load @cst_378 : tensor<4096x86x1xf16>
    %cst_61 = util.global.load @cst_61 : tensor<4096x4096xi4>
    %cst_470 = util.global.load @cst_470 : tensor<4096x32x1xf16>
    %cst_417 = util.global.load @cst_417 : tensor<4096x32x1xf16>
    %cst_455 = util.global.load @cst_455 : tensor<4096x32x1xf16>
    %cst_664 = util.global.load @cst_664 : tensor<4096x32x1xf16>
    %cst_449 = util.global.load @cst_449 : tensor<11008x32x1xf16>
    %cst_328 = util.global.load @cst_328 : tensor<4096x32x1xf16>
    %cst_191 = util.global.load @cst_191 : tensor<4096x4096xi4>
    %cst_320 = util.global.load @cst_320 : tensor<4096x32x1xf16>
    %cst_319 = util.global.load @cst_319 : tensor<4096x32x1xf16>
    %cst_666 = util.global.load @cst_666 : tensor<4096x32x1xf16>
    %cst_636 = util.global.load @cst_636 : tensor<4096x32x1xf16>
    %cst_655 = util.global.load @cst_655 : tensor<4096x32x1xf16>
    %cst_49 = util.global.load @cst_49 : tensor<11008x4096xi4>
    %cst_126 = util.global.load @cst_126 : tensor<11008x4096xi4>
    %cst_471 = util.global.load @cst_471 : tensor<4096x32x1xf16>
    %cst_495 = util.global.load @cst_495 : tensor<4096x32x1xf16>
    %cst_686 = util.global.load @cst_686 : tensor<4096xf16>
    %cst_276 = util.global.load @cst_276 : tensor<4096x32x1xf16>
    %cst_672 = util.global.load @cst_672 : tensor<4096xf16>
    %cst_199 = util.global.load @cst_199 : tensor<4096x4096xi4>
    %cst_217 = util.global.load @cst_217 : tensor<11008x4096xi4>
    %cst_294 = util.global.load @cst_294 : tensor<4096x86x1xf16>
    %cst_54 = util.global.load @cst_54 : tensor<4096x4096xi4>
    %cst_165 = util.global.load @cst_165 : tensor<4096x4096xi4>
    %cst_693 = util.global.load @cst_693 : tensor<4096xf16>
    %cst_562 = util.global.load @cst_562 : tensor<11008x32x1xf16>
    %cst_330 = util.global.load @cst_330 : tensor<4096x32x1xf16>
    %cst_229 = util.global.load @cst_229 : tensor<4096x32x1xf16>
    %cst_558 = util.global.load @cst_558 : tensor<4096x32x1xf16>
    %cst_245 = util.global.load @cst_245 : tensor<4096x32x1xf16>
    %cst_487 = util.global.load @cst_487 : tensor<4096x32x1xf16>
    %cst_740 = util.global.load @cst_740 : f16
    %cst_300 = util.global.load @cst_300 : tensor<4096x32x1xf16>
    %cst_516 = util.global.load @cst_516 : tensor<4096x32x1xf16>
    %cst_572 = util.global.load @cst_572 : tensor<4096x32x1xf16>
    %cst_631 = util.global.load @cst_631 : tensor<11008x32x1xf16>
    %cst_670 = util.global.load @cst_670 : tensor<4096x32x1xf16>
    %cst_618 = util.global.load @cst_618 : tensor<11008x32x1xf16>
    %cst_293 = util.global.load @cst_293 : tensor<4096x86x1xf16>
    %cst_123 = util.global.load @cst_123 : tensor<4096x4096xi4>
    %cst_349 = util.global.load @cst_349 : tensor<4096x86x1xf16>
    %cst_445 = util.global.load @cst_445 : tensor<4096x32x1xf16>
    %cst_326 = util.global.load @cst_326 : tensor<11008x32x1xf16>
    %cst_60 = util.global.load @cst_60 : tensor<4096x4096xi4>
    %cst_402 = util.global.load @cst_402 : tensor<4096x32x1xf16>
    %cst_469 = util.global.load @cst_469 : tensor<4096x32x1xf16>
    %cst_467 = util.global.load @cst_467 : tensor<4096x32x1xf16>
    %cst_286 = util.global.load @cst_286 : tensor<4096x32x1xf16>
    %cst_484 = util.global.load @cst_484 : tensor<4096x32x1xf16>
    %cst_285 = util.global.load @cst_285 : tensor<4096x32x1xf16>
    %cst_456 = util.global.load @cst_456 : tensor<4096x32x1xf16>
    %cst_373 = util.global.load @cst_373 : tensor<4096x32x1xf16>
    %cst_556 = util.global.load @cst_556 : tensor<4096x32x1xf16>
    %cst_105 = util.global.load @cst_105 : tensor<11008x4096xi4>
    %cst_674 = util.global.load @cst_674 : tensor<4096xf16>
    %c32000 = util.global.load @c32000 : index
    %cst_266 = util.global.load @cst_266 : tensor<4096x86x1xf16>
    %cst_404 = util.global.load @cst_404 : tensor<4096x32x1xf16>
    %cst_451 = util.global.load @cst_451 : tensor<11008x32x1xf16>
    %cst_575 = util.global.load @cst_575 : tensor<11008x32x1xf16>
    %cst_1 = util.global.load @cst_1 : tensor<11008x4096xi4>
    %cst_564 = util.global.load @cst_564 : tensor<11008x32x1xf16>
    %cst_502 = util.global.load @cst_502 : tensor<4096x32x1xf16>
    %cst_472 = util.global.load @cst_472 : tensor<4096x32x1xf16>
    %cst_536 = util.global.load @cst_536 : tensor<11008x32x1xf16>
    %cst_546 = util.global.load @cst_546 : tensor<4096x86x1xf16>
    %cst_262 = util.global.load @cst_262 : tensor<4096x32x1xf16>
    %cst_78 = util.global.load @cst_78 : tensor<11008x4096xi4>
    %cst_200 = util.global.load @cst_200 : tensor<4096x4096xi4>
    %cst_475 = util.global.load @cst_475 : tensor<4096x86x1xf16>
    %cst_2 = util.global.load @cst_2 : tensor<4096x4096xi4>
    %cst_624 = util.global.load @cst_624 : tensor<4096x32x1xf16>
    %cst_357 = util.global.load @cst_357 : tensor<4096x32x1xf16>
    %cst_490 = util.global.load @cst_490 : tensor<4096x86x1xf16>
    %cst_86 = util.global.load @cst_86 : tensor<4096x4096xi4>
    %cst_153 = util.global.load @cst_153 : tensor<4096x11008xi4>
    %cst_310 = util.global.load @cst_310 : tensor<11008x32x1xf16>
    %cst_430 = util.global.load @cst_430 : tensor<4096x32x1xf16>
    %cst_440 = util.global.load @cst_440 : tensor<4096x32x1xf16>
    %cst_601 = util.global.load @cst_601 : tensor<4096x86x1xf16>
    %cst_71 = util.global.load @cst_71 : tensor<11008x4096xi4>
    %cst_694 = util.global.load @cst_694 : tensor<4096xf16>
    %cst_646 = util.global.load @cst_646 : tensor<11008x32x1xf16>
    %cst_545 = util.global.load @cst_545 : tensor<4096x86x1xf16>
    %cst_4 = util.global.load @cst_4 : tensor<4096x4096xi4>
    %cst_705 = util.global.load @cst_705 : tensor<4096xf16>
    %cst_369 = util.global.load @cst_369 : tensor<4096x32x1xf16>
    %cst_432 = util.global.load @cst_432 : tensor<4096x32x1xf16>
    %cst_297 = util.global.load @cst_297 : tensor<11008x32x1xf16>
    %cst_251 = util.global.load @cst_251 : tensor<4096x86x1xf16>
    %cst_681 = util.global.load @cst_681 : tensor<4096xf16>
    %cst_405 = util.global.load @cst_405 : tensor<4096x86x1xf16>
    %cst_723 = util.global.load @cst_723 : tensor<4096xf16>
    %cst_721 = util.global.load @cst_721 : tensor<4096xf16>
    %cst_630 = util.global.load @cst_630 : tensor<4096x86x1xf16>
    %cst_280 = util.global.load @cst_280 : tensor<4096x86x1xf16>
    %cst_744 = util.global.load @cst_744 : f64
    %cst_587 = util.global.load @cst_587 : tensor<4096x86x1xf16>
    %cst_91 = util.global.load @cst_91 : tensor<11008x4096xi4>
    %cst_181 = util.global.load @cst_181 : tensor<4096x11008xi4>
    %cst_346 = util.global.load @cst_346 : tensor<4096x32x1xf16>
    %dim = tensor.dim %arg0, %c1 : tensor<1x?xi64>
    %0 = tensor.empty(%dim) : tensor<?xi64>
    %1 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} outs(%0 : tensor<?xi64>) {
    ^bb0(%out: i64):
      %2403 = linalg.index 0 : index
      %2404 = arith.index_cast %2403 : index to i64
      linalg.yield %2404 : i64
    } -> tensor<?xi64>
    %expanded = tensor.expand_shape %1 [[0, 1]] : tensor<?xi64> into tensor<1x?xi64>
    %2 = tensor.empty(%dim) : tensor<1x?x4096xf16>
    %3 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg0 : tensor<1x?xi64>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2403 = arith.index_cast %in : i64 to index
      %2404 = linalg.index 2 : index
      %2405 = arith.cmpi slt, %2403, %c32000 : index
      cf.assert %2405, "index must be smaller than dim size"
      %2406 = arith.cmpi sge, %in, %c0_i64 : i64
      cf.assert %2406, "index must be larger or equal to 0"
      %extracted = tensor.extract %cst_739[%2403, %2404] : tensor<32000x4096xf16>
      linalg.yield %extracted : f16
    } -> tensor<1x?x4096xf16>
    %4 = tensor.empty() : tensor<f64>
    %5 = linalg.fill ins(%cst_744 : f64) outs(%4 : tensor<f64>) -> tensor<f64>
    %6 = tensor.empty() : tensor<f16>
    %7 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%5 : tensor<f64>) outs(%6 : tensor<f16>) {
    ^bb0(%in: f64, %out: f16):
      %2403 = arith.truncf %in : f64 to f16
      linalg.yield %2403 : f16
    } -> tensor<f16>
    %8 = tensor.empty(%dim, %dim) : tensor<?x?xf16>
    %9 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} outs(%8 : tensor<?x?xf16>) {
    ^bb0(%out: f16):
      %extracted = tensor.extract %7[] : tensor<f16>
      linalg.yield %extracted : f16
    } -> tensor<?x?xf16>
    %10 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%1 : tensor<?xi64>) outs(%0 : tensor<?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2403 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2403 : i64
    } -> tensor<?xi64>
    %expanded_0 = tensor.expand_shape %10 [[0, 1]] : tensor<?xi64> into tensor<?x1xi64>
    %11 = tensor.empty(%dim, %dim) : tensor<?x?xi1>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1, %expanded_0 : tensor<?xi64>, tensor<?x1xi64>) outs(%11 : tensor<?x?xi1>) {
    ^bb0(%in: i64, %in_1222: i64, %out: i1):
      %2403 = arith.cmpi slt, %in, %in_1222 : i64
      linalg.yield %2403 : i1
    } -> tensor<?x?xi1>
    %13 = tensor.empty() : tensor<i64>
    %14 = linalg.fill ins(%c0_i64 : i64) outs(%13 : tensor<i64>) -> tensor<i64>
    %15 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%14 : tensor<i64>) outs(%6 : tensor<f16>) {
    ^bb0(%in: i64, %out: f16):
      %2403 = arith.sitofp %in : i64 to f16
      linalg.yield %2403 : f16
    } -> tensor<f16>
    %16 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> ()>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%12, %15, %9 : tensor<?x?xi1>, tensor<f16>, tensor<?x?xf16>) outs(%8 : tensor<?x?xf16>) {
    ^bb0(%in: i1, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.select %in, %in_1222, %in_1223 : f16
      linalg.yield %2403 : f16
    } -> tensor<?x?xf16>
    %expanded_1 = tensor.expand_shape %16 [[0, 1, 2], [3]] : tensor<?x?xf16> into tensor<1x1x?x?xf16>
    %17 = tensor.empty(%dim, %dim) : tensor<1x1x?x?xi1>
    %18 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%17 : tensor<1x1x?x?xi1>) {
    ^bb0(%out: i1):
      linalg.yield %true : i1
    } -> tensor<1x1x?x?xi1>
    %19 = tensor.empty(%dim, %dim) : tensor<1x1x?x?xf16>
    %20 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%18 : tensor<1x1x?x?xi1>) outs(%19 : tensor<1x1x?x?xf16>) {
    ^bb0(%in: i1, %out: f16):
      %2403 = arith.uitofp %in : i1 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x1x?x?xf16>
    %21 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%20 : tensor<1x1x?x?xf16>) outs(%19 : tensor<1x1x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.subf %cst_743, %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x1x?x?xf16>
    %22 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%21 : tensor<1x1x?x?xf16>) outs(%17 : tensor<1x1x?x?xi1>) {
    ^bb0(%in: f16, %out: i1):
      %2403 = arith.cmpf une, %in, %cst_740 : f16
      linalg.yield %2403 : i1
    } -> tensor<1x1x?x?xi1>
    %23 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> ()>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%22, %7, %21 : tensor<1x1x?x?xi1>, tensor<f16>, tensor<1x1x?x?xf16>) outs(%19 : tensor<1x1x?x?xf16>) {
    ^bb0(%in: i1, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.select %in, %in_1222, %in_1223 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x1x?x?xf16>
    %24 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%23, %expanded_1 : tensor<1x1x?x?xf16>, tensor<1x1x?x?xf16>) outs(%19 : tensor<1x1x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x1x?x?xf16>
    %25 = arith.index_cast %dim : index to i64
    %26 = arith.cmpi sge, %25, %c0_i64 : i64
    cf.assert %26, "negative values not allowed in new dimensions"
    %27 = tensor.empty(%dim) : tensor<1x?x4096xf32>
    %28 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %29 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%28 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %30 = tensor.empty(%dim) : tensor<1x?x1xf32>
    %31 = linalg.fill ins(%cst_741 : f32) outs(%30 : tensor<1x?x1xf32>) -> tensor<1x?x1xf32>
    %32 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%29 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %33 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%32 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %34 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%33 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %35 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%34 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %36 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %35 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %37 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%36 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %38 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_738, %37 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_2 = tensor.expand_shape %38 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_3 = tensor.expand_shape %cst_222 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %39 = tensor.empty() : tensor<4096x32x128xf16>
    %dim_4 = tensor.dim %38, %c1 : tensor<1x?x4096xf16>
    %40 = tensor.empty(%dim_4) : tensor<1x?x4096xf16>
    %41 = linalg.fill ins(%cst_740 : f16) outs(%40 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %42 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3, %cst_670, %cst_669 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %43 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_2, %42 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%41 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_5 = tensor.expand_shape %cst_221 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %44 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_5, %cst_668, %cst_667 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %45 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_2, %44 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%41 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_6 = tensor.expand_shape %cst_220 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %46 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_6, %cst_666, %cst_665 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %47 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_2, %46 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%41 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast = tensor.cast %43 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_7 = tensor.expand_shape %cast [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %48 = tensor.empty(%dim) : tensor<1x32x?x128xf16>
    %49 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_7 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_8 = tensor.cast %45 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_9 = tensor.expand_shape %cast_8 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %50 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_9 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_10 = tensor.cast %47 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_11 = tensor.expand_shape %cast_10 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %51 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_11 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice = tensor.extract_slice %cst_737[0, 0, 0, 0] [1, 1, %dim, 128] [1, 1, 1, 1] : tensor<1x1x4096x128xf16> to tensor<1x1x?x128xf16>
    %extracted_slice_12 = tensor.extract_slice %cst_736[0, 0, 0, 0] [1, 1, %dim, 128] [1, 1, 1, 1] : tensor<1x1x4096x128xf16> to tensor<1x1x?x128xf16>
    %collapsed = tensor.collapse_shape %extracted_slice [[0, 1, 2], [3]] : tensor<1x1x?x128xf16> into tensor<?x128xf16>
    %collapsed_13 = tensor.collapse_shape %extracted_slice_12 [[0, 1, 2], [3]] : tensor<1x1x?x128xf16> into tensor<?x128xf16>
    %52 = tensor.empty(%dim) : tensor<1x?x128xf16>
    %53 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded : tensor<1x?xi64>) outs(%52 : tensor<1x?x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2403 = arith.cmpi slt, %in, %c0_i64 : i64
      %2404 = arith.addi %in, %c19_i64 : i64
      %2405 = arith.select %2403, %2404, %in : i64
      %2406 = arith.index_cast %2405 : i64 to index
      %2407 = linalg.index 2 : index
      %extracted = tensor.extract %collapsed[%2406, %2407] : tensor<?x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<1x?x128xf16>
    %expanded_14 = tensor.expand_shape %53 [[0], [1, 2], [3]] : tensor<1x?x128xf16> into tensor<1x1x?x128xf16>
    %54 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded : tensor<1x?xi64>) outs(%52 : tensor<1x?x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2403 = arith.cmpi slt, %in, %c0_i64 : i64
      %2404 = arith.addi %in, %c19_i64 : i64
      %2405 = arith.select %2403, %2404, %in : i64
      %2406 = arith.index_cast %2405 : i64 to index
      %2407 = linalg.index 2 : index
      %extracted = tensor.extract %collapsed_13[%2406, %2407] : tensor<?x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<1x?x128xf16>
    %expanded_15 = tensor.expand_shape %54 [[0], [1, 2], [3]] : tensor<1x?x128xf16> into tensor<1x1x?x128xf16>
    %55 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%49, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_16 = tensor.extract_slice %49[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_17 = tensor.extract_slice %49[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %56 = tensor.empty(%dim) : tensor<1x32x?x64xf16>
    %57 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_17 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %58 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%57 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %59 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_16 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice = tensor.insert_slice %58 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_18 = tensor.insert_slice %59 into %inserted_slice[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %60 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_18, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %61 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%55, %60 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %62 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%50, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_19 = tensor.extract_slice %50[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_20 = tensor.extract_slice %50[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %63 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_20 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %64 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%63 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %65 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_19 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_21 = tensor.insert_slice %64 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_22 = tensor.insert_slice %65 into %inserted_slice_21[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %66 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_22, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %67 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%62, %66 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %68 = tensor.empty(%dim) : tensor<1x32x128x?xf16>
    %69 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%67 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_23 = tensor.collapse_shape %61 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_24 = tensor.collapse_shape %69 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %70 = tensor.empty(%dim, %dim) : tensor<32x?x?xf16>
    %71 = linalg.fill ins(%cst_740 : f16) outs(%70 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %72 = linalg.batch_matmul ins(%collapsed_23, %collapsed_24 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_25 = tensor.expand_shape %72 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %73 = tensor.empty(%dim, %dim) : tensor<1x32x?x?xf16>
    %74 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_25 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %75 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%74, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %76 = tensor.empty(%dim) : tensor<1x32x?x1xi64>
    %77 = linalg.fill ins(%c0_i64 : i64) outs(%76 : tensor<1x32x?x1xi64>) -> tensor<1x32x?x1xi64>
    %78 = tensor.empty(%dim) : tensor<1x32x?x1xf16>
    %79 = linalg.fill ins(%cst_742 : f16) outs(%78 : tensor<1x32x?x1xf16>) -> tensor<1x32x?x1xf16>
    %80:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%75 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %81 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%75, %80#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %82 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%81 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %83 = linalg.fill ins(%cst_740 : f16) outs(%78 : tensor<1x32x?x1xf16>) -> tensor<1x32x?x1xf16>
    %84 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%82 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %85 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%82, %84 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_26 = tensor.collapse_shape %85 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_27 = tensor.collapse_shape %51 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %86 = tensor.empty(%dim) : tensor<32x?x128xf16>
    %87 = linalg.fill ins(%cst_740 : f16) outs(%86 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %88 = linalg.batch_matmul ins(%collapsed_26, %collapsed_27 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_28 = tensor.expand_shape %88 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %89 = tensor.empty(%dim) : tensor<1x?x32x128xf16>
    %90 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_28 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %91 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%90 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_29 = tensor.collapse_shape %91 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_30 = tensor.expand_shape %collapsed_29 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_31 = tensor.expand_shape %cst_219 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %92 = tensor.empty(%dim) : tensor<1x?x4096xf16>
    %93 = linalg.fill ins(%cst_740 : f16) outs(%92 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %94 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_31, %cst_664, %cst_663 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %95 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_30, %94 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %96 = arith.cmpi eq, %dim, %dim : index
    cf.assert %96, "mismatched size for broadcast"
    %97 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %95 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %98 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%97 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %99 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%98 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%99 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%100 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%101 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%102 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%97, %103 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%104 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %106 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_735, %105 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_32 = tensor.expand_shape %106 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_33 = tensor.expand_shape %cst_218 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %107 = tensor.empty() : tensor<11008x32x128xf16>
    %dim_34 = tensor.dim %106, %c1 : tensor<1x?x4096xf16>
    %108 = tensor.empty(%dim_34) : tensor<1x?x11008xf16>
    %109 = linalg.fill ins(%cst_740 : f16) outs(%108 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_33, %cst_662, %cst_661 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %111 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_32, %110 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%109 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_35 = tensor.dim %111, %c1 : tensor<1x?x11008xf16>
    %112 = tensor.empty(%dim_35) : tensor<1x?x11008xf16>
    %113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%111 : tensor<1x?x11008xf16>) outs(%112 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%113, %111 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%112 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_36 = tensor.expand_shape %cst_217 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_36, %cst_660, %cst_659 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_32, %115 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%109 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_37 = tensor.dim %116, %c1 : tensor<1x?x11008xf16>
    %117 = arith.cmpi eq, %dim_35, %dim_37 : index
    cf.assert %117, "mismatched size for broadcast"
    %118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%114, %116 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%112 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_38 = tensor.expand_shape %118 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_39 = tensor.expand_shape %cst_216 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %119 = tensor.empty() : tensor<4096x86x128xf16>
    %dim_40 = tensor.dim %118, %c1 : tensor<1x?x11008xf16>
    %120 = tensor.empty(%dim_40) : tensor<1x?x4096xf16>
    %121 = linalg.fill ins(%cst_740 : f16) outs(%120 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_39, %cst_658, %cst_657 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_38, %122 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%121 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_41 = tensor.dim %123, %c1 : tensor<1x?x4096xf16>
    %124 = arith.cmpi eq, %dim, %dim_41 : index
    cf.assert %124, "mismatched size for broadcast"
    %125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%97, %123 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%125 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%126 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%127 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%128 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%129 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%130 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %132 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%125, %131 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%132 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_734, %133 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_42 = tensor.expand_shape %134 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_43 = tensor.expand_shape %cst_215 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_44 = tensor.dim %134, %c1 : tensor<1x?x4096xf16>
    %135 = tensor.empty(%dim_44) : tensor<1x?x4096xf16>
    %136 = linalg.fill ins(%cst_740 : f16) outs(%135 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_43, %cst_656, %cst_655 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_42, %137 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%136 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_45 = tensor.expand_shape %cst_214 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_45, %cst_654, %cst_653 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_42, %139 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%136 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_46 = tensor.expand_shape %cst_213 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_46, %cst_652, %cst_651 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_42, %141 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%136 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_47 = tensor.cast %138 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_48 = tensor.expand_shape %cast_47 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_48 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_49 = tensor.cast %140 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_50 = tensor.expand_shape %cast_49 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_50 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_51 = tensor.cast %142 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_52 = tensor.expand_shape %cast_51 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_52 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%143, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_53 = tensor.extract_slice %143[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_54 = tensor.extract_slice %143[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_54 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%147 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_53 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_55 = tensor.insert_slice %148 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_56 = tensor.insert_slice %149 into %inserted_slice_55[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_56, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%146, %150 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%144, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_57 = tensor.extract_slice %144[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_58 = tensor.extract_slice %144[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_58 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%153 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_57 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_59 = tensor.insert_slice %154 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_60 = tensor.insert_slice %155 into %inserted_slice_59[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_60, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %157 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%152, %156 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%157 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_61 = tensor.collapse_shape %151 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_62 = tensor.collapse_shape %158 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %159 = linalg.batch_matmul ins(%collapsed_61, %collapsed_62 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_63 = tensor.expand_shape %159 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_63 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%160, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %162:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%161 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%161, %162#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%163 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%164 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%164, %165 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_64 = tensor.collapse_shape %166 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_65 = tensor.collapse_shape %145 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %167 = linalg.batch_matmul ins(%collapsed_64, %collapsed_65 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_66 = tensor.expand_shape %167 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_66 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%168 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_67 = tensor.collapse_shape %169 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_68 = tensor.expand_shape %collapsed_67 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_69 = tensor.expand_shape %cst_212 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_69, %cst_650, %cst_649 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_68, %170 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%125, %171 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%172 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%173 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%174 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%175 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%176 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%177 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%172, %178 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%179 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_733, %180 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_70 = tensor.expand_shape %181 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_71 = tensor.expand_shape %cst_211 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_72 = tensor.dim %181, %c1 : tensor<1x?x4096xf16>
    %182 = tensor.empty(%dim_72) : tensor<1x?x11008xf16>
    %183 = linalg.fill ins(%cst_740 : f16) outs(%182 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_71, %cst_648, %cst_647 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_70, %184 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%183 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_73 = tensor.dim %185, %c1 : tensor<1x?x11008xf16>
    %186 = tensor.empty(%dim_73) : tensor<1x?x11008xf16>
    %187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%185 : tensor<1x?x11008xf16>) outs(%186 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%187, %185 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%186 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_74 = tensor.expand_shape %cst_210 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_74, %cst_646, %cst_645 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_70, %189 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%183 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_75 = tensor.dim %190, %c1 : tensor<1x?x11008xf16>
    %191 = arith.cmpi eq, %dim_73, %dim_75 : index
    cf.assert %191, "mismatched size for broadcast"
    %192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%188, %190 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%186 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_76 = tensor.expand_shape %192 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_77 = tensor.expand_shape %cst_209 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_78 = tensor.dim %192, %c1 : tensor<1x?x11008xf16>
    %193 = tensor.empty(%dim_78) : tensor<1x?x4096xf16>
    %194 = linalg.fill ins(%cst_740 : f16) outs(%193 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_77, %cst_644, %cst_643 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %196 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_76, %195 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%194 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_79 = tensor.dim %196, %c1 : tensor<1x?x4096xf16>
    %197 = arith.cmpi eq, %dim, %dim_79 : index
    cf.assert %197, "mismatched size for broadcast"
    %198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%172, %196 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%198 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%199 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%200 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%201 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%202 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%203 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%198, %204 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%205 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_732, %206 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_80 = tensor.expand_shape %207 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_81 = tensor.expand_shape %cst_208 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_82 = tensor.dim %207, %c1 : tensor<1x?x4096xf16>
    %208 = tensor.empty(%dim_82) : tensor<1x?x4096xf16>
    %209 = linalg.fill ins(%cst_740 : f16) outs(%208 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_81, %cst_642, %cst_641 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_80, %210 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%209 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_83 = tensor.expand_shape %cst_207 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_83, %cst_640, %cst_639 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_80, %212 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%209 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_84 = tensor.expand_shape %cst_206 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_84, %cst_638, %cst_637 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_80, %214 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%209 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_85 = tensor.cast %211 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_86 = tensor.expand_shape %cast_85 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_86 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_87 = tensor.cast %213 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_88 = tensor.expand_shape %cast_87 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_88 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_89 = tensor.cast %215 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_90 = tensor.expand_shape %cast_89 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_90 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%216, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_91 = tensor.extract_slice %216[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_92 = tensor.extract_slice %216[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_92 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%220 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_91 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_93 = tensor.insert_slice %221 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_94 = tensor.insert_slice %222 into %inserted_slice_93[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_94, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%219, %223 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%217, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_95 = tensor.extract_slice %217[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_96 = tensor.extract_slice %217[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_96 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%226 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_95 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_97 = tensor.insert_slice %227 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_98 = tensor.insert_slice %228 into %inserted_slice_97[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_98, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %230 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%225, %229 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%230 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_99 = tensor.collapse_shape %224 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_100 = tensor.collapse_shape %231 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %232 = linalg.batch_matmul ins(%collapsed_99, %collapsed_100 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_101 = tensor.expand_shape %232 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_101 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%233, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %235:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%234 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%234, %235#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%236 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%237 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%237, %238 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_102 = tensor.collapse_shape %239 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_103 = tensor.collapse_shape %218 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %240 = linalg.batch_matmul ins(%collapsed_102, %collapsed_103 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_104 = tensor.expand_shape %240 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_104 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%241 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_105 = tensor.collapse_shape %242 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_106 = tensor.expand_shape %collapsed_105 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_107 = tensor.expand_shape %cst_205 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_107, %cst_636, %cst_635 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_106, %243 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%198, %244 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%245 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%246 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%247 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%248 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%249 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%250 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%245, %251 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%252 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %254 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_731, %253 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_108 = tensor.expand_shape %254 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_109 = tensor.expand_shape %cst_204 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_110 = tensor.dim %254, %c1 : tensor<1x?x4096xf16>
    %255 = tensor.empty(%dim_110) : tensor<1x?x11008xf16>
    %256 = linalg.fill ins(%cst_740 : f16) outs(%255 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_109, %cst_634, %cst_633 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_108, %257 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%256 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_111 = tensor.dim %258, %c1 : tensor<1x?x11008xf16>
    %259 = tensor.empty(%dim_111) : tensor<1x?x11008xf16>
    %260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%258 : tensor<1x?x11008xf16>) outs(%259 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%260, %258 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%259 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_112 = tensor.expand_shape %cst_203 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_112, %cst_632, %cst_631 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_108, %262 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%256 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_113 = tensor.dim %263, %c1 : tensor<1x?x11008xf16>
    %264 = arith.cmpi eq, %dim_111, %dim_113 : index
    cf.assert %264, "mismatched size for broadcast"
    %265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%261, %263 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%259 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_114 = tensor.expand_shape %265 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_115 = tensor.expand_shape %cst_202 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_116 = tensor.dim %265, %c1 : tensor<1x?x11008xf16>
    %266 = tensor.empty(%dim_116) : tensor<1x?x4096xf16>
    %267 = linalg.fill ins(%cst_740 : f16) outs(%266 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_115, %cst_630, %cst_629 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_114, %268 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%267 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_117 = tensor.dim %269, %c1 : tensor<1x?x4096xf16>
    %270 = arith.cmpi eq, %dim, %dim_117 : index
    cf.assert %270, "mismatched size for broadcast"
    %271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%245, %269 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%271 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%272 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %274 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%273 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%274 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %276 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%275 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%276 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%271, %277 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%278 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_730, %279 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_118 = tensor.expand_shape %280 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_119 = tensor.expand_shape %cst_201 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_120 = tensor.dim %280, %c1 : tensor<1x?x4096xf16>
    %281 = tensor.empty(%dim_120) : tensor<1x?x4096xf16>
    %282 = linalg.fill ins(%cst_740 : f16) outs(%281 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_119, %cst_628, %cst_627 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_118, %283 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%282 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_121 = tensor.expand_shape %cst_200 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_121, %cst_626, %cst_625 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_118, %285 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%282 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_122 = tensor.expand_shape %cst_199 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_122, %cst_624, %cst_623 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_118, %287 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%282 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_123 = tensor.cast %284 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_124 = tensor.expand_shape %cast_123 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_124 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_125 = tensor.cast %286 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_126 = tensor.expand_shape %cast_125 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_126 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_127 = tensor.cast %288 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_128 = tensor.expand_shape %cast_127 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_128 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%289, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_129 = tensor.extract_slice %289[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_130 = tensor.extract_slice %289[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_130 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%293 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_129 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_131 = tensor.insert_slice %294 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_132 = tensor.insert_slice %295 into %inserted_slice_131[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_132, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%292, %296 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %298 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%290, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_133 = tensor.extract_slice %290[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_134 = tensor.extract_slice %290[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %299 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_134 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%299 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_133 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_135 = tensor.insert_slice %300 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_136 = tensor.insert_slice %301 into %inserted_slice_135[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_136, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%298, %302 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%303 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_137 = tensor.collapse_shape %297 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_138 = tensor.collapse_shape %304 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %305 = linalg.batch_matmul ins(%collapsed_137, %collapsed_138 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_139 = tensor.expand_shape %305 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_139 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%306, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %308:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%307 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%307, %308#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%309 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%310 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%310, %311 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_140 = tensor.collapse_shape %312 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_141 = tensor.collapse_shape %291 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %313 = linalg.batch_matmul ins(%collapsed_140, %collapsed_141 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_142 = tensor.expand_shape %313 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_142 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%314 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_143 = tensor.collapse_shape %315 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_144 = tensor.expand_shape %collapsed_143 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_145 = tensor.expand_shape %cst_198 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_145, %cst_622, %cst_621 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_144, %316 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%271, %317 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%318 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%319 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%320 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%321 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%322 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%323 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%318, %324 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%325 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_729, %326 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_146 = tensor.expand_shape %327 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_147 = tensor.expand_shape %cst_197 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_148 = tensor.dim %327, %c1 : tensor<1x?x4096xf16>
    %328 = tensor.empty(%dim_148) : tensor<1x?x11008xf16>
    %329 = linalg.fill ins(%cst_740 : f16) outs(%328 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_147, %cst_620, %cst_619 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_146, %330 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%329 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_149 = tensor.dim %331, %c1 : tensor<1x?x11008xf16>
    %332 = tensor.empty(%dim_149) : tensor<1x?x11008xf16>
    %333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%331 : tensor<1x?x11008xf16>) outs(%332 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%333, %331 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%332 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_150 = tensor.expand_shape %cst_196 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_150, %cst_618, %cst_617 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_146, %335 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%329 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_151 = tensor.dim %336, %c1 : tensor<1x?x11008xf16>
    %337 = arith.cmpi eq, %dim_149, %dim_151 : index
    cf.assert %337, "mismatched size for broadcast"
    %338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%334, %336 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%332 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_152 = tensor.expand_shape %338 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_153 = tensor.expand_shape %cst_195 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_154 = tensor.dim %338, %c1 : tensor<1x?x11008xf16>
    %339 = tensor.empty(%dim_154) : tensor<1x?x4096xf16>
    %340 = linalg.fill ins(%cst_740 : f16) outs(%339 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_153, %cst_616, %cst_615 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_152, %341 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%340 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_155 = tensor.dim %342, %c1 : tensor<1x?x4096xf16>
    %343 = arith.cmpi eq, %dim, %dim_155 : index
    cf.assert %343, "mismatched size for broadcast"
    %344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%318, %342 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%344 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%345 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%346 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%347 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%348 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%349 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%344, %350 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %352 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%351 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_728, %352 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_156 = tensor.expand_shape %353 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_157 = tensor.expand_shape %cst_194 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_158 = tensor.dim %353, %c1 : tensor<1x?x4096xf16>
    %354 = tensor.empty(%dim_158) : tensor<1x?x4096xf16>
    %355 = linalg.fill ins(%cst_740 : f16) outs(%354 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_157, %cst_614, %cst_613 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_156, %356 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%355 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_159 = tensor.expand_shape %cst_193 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_159, %cst_612, %cst_611 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_156, %358 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%355 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_160 = tensor.expand_shape %cst_192 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_160, %cst_610, %cst_609 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_156, %360 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%355 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_161 = tensor.cast %357 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_162 = tensor.expand_shape %cast_161 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_162 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_163 = tensor.cast %359 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_164 = tensor.expand_shape %cast_163 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_164 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_165 = tensor.cast %361 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_166 = tensor.expand_shape %cast_165 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_166 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%362, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_167 = tensor.extract_slice %362[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_168 = tensor.extract_slice %362[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_168 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%366 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_167 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_169 = tensor.insert_slice %367 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_170 = tensor.insert_slice %368 into %inserted_slice_169[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_170, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%365, %369 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%363, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_171 = tensor.extract_slice %363[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_172 = tensor.extract_slice %363[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %372 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_172 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%372 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_171 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_173 = tensor.insert_slice %373 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_174 = tensor.insert_slice %374 into %inserted_slice_173[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_174, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %376 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%371, %375 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%376 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_175 = tensor.collapse_shape %370 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_176 = tensor.collapse_shape %377 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %378 = linalg.batch_matmul ins(%collapsed_175, %collapsed_176 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_177 = tensor.expand_shape %378 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_177 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%379, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %381:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%380 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%380, %381#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%382 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%383 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%383, %384 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_178 = tensor.collapse_shape %385 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_179 = tensor.collapse_shape %364 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %386 = linalg.batch_matmul ins(%collapsed_178, %collapsed_179 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_180 = tensor.expand_shape %386 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_180 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%387 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_181 = tensor.collapse_shape %388 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_182 = tensor.expand_shape %collapsed_181 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_183 = tensor.expand_shape %cst_191 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_183, %cst_608, %cst_607 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_182, %389 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%344, %390 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%391 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%392 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %394 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%393 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%394 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %396 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%395 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %397 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%396 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %398 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%391, %397 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%398 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %400 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_727, %399 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_184 = tensor.expand_shape %400 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_185 = tensor.expand_shape %cst_190 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_186 = tensor.dim %400, %c1 : tensor<1x?x4096xf16>
    %401 = tensor.empty(%dim_186) : tensor<1x?x11008xf16>
    %402 = linalg.fill ins(%cst_740 : f16) outs(%401 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %403 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_185, %cst_606, %cst_605 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_184, %403 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%402 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_187 = tensor.dim %404, %c1 : tensor<1x?x11008xf16>
    %405 = tensor.empty(%dim_187) : tensor<1x?x11008xf16>
    %406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%404 : tensor<1x?x11008xf16>) outs(%405 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%406, %404 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%405 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_188 = tensor.expand_shape %cst_189 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %408 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_188, %cst_604, %cst_603 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_184, %408 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%402 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_189 = tensor.dim %409, %c1 : tensor<1x?x11008xf16>
    %410 = arith.cmpi eq, %dim_187, %dim_189 : index
    cf.assert %410, "mismatched size for broadcast"
    %411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%407, %409 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%405 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_190 = tensor.expand_shape %411 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_191 = tensor.expand_shape %cst_188 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_192 = tensor.dim %411, %c1 : tensor<1x?x11008xf16>
    %412 = tensor.empty(%dim_192) : tensor<1x?x4096xf16>
    %413 = linalg.fill ins(%cst_740 : f16) outs(%412 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %414 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_191, %cst_602, %cst_601 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_190, %414 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%413 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_193 = tensor.dim %415, %c1 : tensor<1x?x4096xf16>
    %416 = arith.cmpi eq, %dim, %dim_193 : index
    cf.assert %416, "mismatched size for broadcast"
    %417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%391, %415 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%417 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%418 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%419 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%420 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%421 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%422 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %424 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%417, %423 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%424 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_726, %425 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_194 = tensor.expand_shape %426 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_195 = tensor.expand_shape %cst_187 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_196 = tensor.dim %426, %c1 : tensor<1x?x4096xf16>
    %427 = tensor.empty(%dim_196) : tensor<1x?x4096xf16>
    %428 = linalg.fill ins(%cst_740 : f16) outs(%427 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_195, %cst_600, %cst_599 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_194, %429 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%428 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_197 = tensor.expand_shape %cst_186 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_197, %cst_598, %cst_597 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_194, %431 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%428 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_198 = tensor.expand_shape %cst_185 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_198, %cst_596, %cst_595 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %434 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_194, %433 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%428 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_199 = tensor.cast %430 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_200 = tensor.expand_shape %cast_199 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_200 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_201 = tensor.cast %432 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_202 = tensor.expand_shape %cast_201 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %436 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_202 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_203 = tensor.cast %434 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_204 = tensor.expand_shape %cast_203 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_204 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%435, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_205 = tensor.extract_slice %435[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_206 = tensor.extract_slice %435[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_206 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %440 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%439 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_205 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_207 = tensor.insert_slice %440 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_208 = tensor.insert_slice %441 into %inserted_slice_207[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_208, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%438, %442 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%436, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_209 = tensor.extract_slice %436[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_210 = tensor.extract_slice %436[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_210 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%445 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_209 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_211 = tensor.insert_slice %446 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_212 = tensor.insert_slice %447 into %inserted_slice_211[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %448 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_212, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %449 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%444, %448 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %450 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%449 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_213 = tensor.collapse_shape %443 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_214 = tensor.collapse_shape %450 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %451 = linalg.batch_matmul ins(%collapsed_213, %collapsed_214 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_215 = tensor.expand_shape %451 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %452 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_215 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%452, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %454:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%453 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%453, %454#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%455 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%456 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%456, %457 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_216 = tensor.collapse_shape %458 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_217 = tensor.collapse_shape %437 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %459 = linalg.batch_matmul ins(%collapsed_216, %collapsed_217 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_218 = tensor.expand_shape %459 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_218 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%460 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_219 = tensor.collapse_shape %461 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_220 = tensor.expand_shape %collapsed_219 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_221 = tensor.expand_shape %cst_184 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_221, %cst_594, %cst_593 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_220, %462 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%417, %463 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%464 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%465 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %467 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%466 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%467 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%468 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %470 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%469 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %471 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%464, %470 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %472 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%471 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %473 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_725, %472 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_222 = tensor.expand_shape %473 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_223 = tensor.expand_shape %cst_183 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_224 = tensor.dim %473, %c1 : tensor<1x?x4096xf16>
    %474 = tensor.empty(%dim_224) : tensor<1x?x11008xf16>
    %475 = linalg.fill ins(%cst_740 : f16) outs(%474 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %476 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_223, %cst_592, %cst_591 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_222, %476 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%475 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_225 = tensor.dim %477, %c1 : tensor<1x?x11008xf16>
    %478 = tensor.empty(%dim_225) : tensor<1x?x11008xf16>
    %479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%477 : tensor<1x?x11008xf16>) outs(%478 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%479, %477 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%478 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_226 = tensor.expand_shape %cst_182 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_226, %cst_590, %cst_589 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_222, %481 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%475 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_227 = tensor.dim %482, %c1 : tensor<1x?x11008xf16>
    %483 = arith.cmpi eq, %dim_225, %dim_227 : index
    cf.assert %483, "mismatched size for broadcast"
    %484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%480, %482 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%478 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_228 = tensor.expand_shape %484 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_229 = tensor.expand_shape %cst_181 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_230 = tensor.dim %484, %c1 : tensor<1x?x11008xf16>
    %485 = tensor.empty(%dim_230) : tensor<1x?x4096xf16>
    %486 = linalg.fill ins(%cst_740 : f16) outs(%485 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_229, %cst_588, %cst_587 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %488 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_228, %487 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%486 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_231 = tensor.dim %488, %c1 : tensor<1x?x4096xf16>
    %489 = arith.cmpi eq, %dim, %dim_231 : index
    cf.assert %489, "mismatched size for broadcast"
    %490 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%464, %488 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %491 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%490 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %492 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%491 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%492 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %494 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%493 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %495 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%494 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%495 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%490, %496 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%497 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_724, %498 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_232 = tensor.expand_shape %499 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_233 = tensor.expand_shape %cst_180 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_234 = tensor.dim %499, %c1 : tensor<1x?x4096xf16>
    %500 = tensor.empty(%dim_234) : tensor<1x?x4096xf16>
    %501 = linalg.fill ins(%cst_740 : f16) outs(%500 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_233, %cst_586, %cst_585 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_232, %502 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%501 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_235 = tensor.expand_shape %cst_179 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_235, %cst_584, %cst_583 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %505 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_232, %504 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%501 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_236 = tensor.expand_shape %cst_178 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_236, %cst_582, %cst_581 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_232, %506 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%501 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_237 = tensor.cast %503 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_238 = tensor.expand_shape %cast_237 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %508 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_238 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_239 = tensor.cast %505 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_240 = tensor.expand_shape %cast_239 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_240 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_241 = tensor.cast %507 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_242 = tensor.expand_shape %cast_241 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_242 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %511 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%508, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_243 = tensor.extract_slice %508[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_244 = tensor.extract_slice %508[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %512 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_244 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %513 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%512 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %514 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_243 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_245 = tensor.insert_slice %513 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_246 = tensor.insert_slice %514 into %inserted_slice_245[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %515 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_246, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%511, %515 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%509, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_247 = tensor.extract_slice %509[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_248 = tensor.extract_slice %509[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_248 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%518 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_247 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_249 = tensor.insert_slice %519 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_250 = tensor.insert_slice %520 into %inserted_slice_249[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_250, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %522 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%517, %521 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%522 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_251 = tensor.collapse_shape %516 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_252 = tensor.collapse_shape %523 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %524 = linalg.batch_matmul ins(%collapsed_251, %collapsed_252 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_253 = tensor.expand_shape %524 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_253 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %526 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%525, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %527:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%526 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %528 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%526, %527#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%528 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%529 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%529, %530 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_254 = tensor.collapse_shape %531 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_255 = tensor.collapse_shape %510 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %532 = linalg.batch_matmul ins(%collapsed_254, %collapsed_255 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_256 = tensor.expand_shape %532 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_256 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%533 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_257 = tensor.collapse_shape %534 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_258 = tensor.expand_shape %collapsed_257 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_259 = tensor.expand_shape %cst_177 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_259, %cst_580, %cst_579 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_258, %535 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %537 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%490, %536 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %538 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%537 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%538 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%539 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%540 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%541 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %543 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%542 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %544 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%537, %543 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%544 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %546 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_723, %545 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_260 = tensor.expand_shape %546 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_261 = tensor.expand_shape %cst_176 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_262 = tensor.dim %546, %c1 : tensor<1x?x4096xf16>
    %547 = tensor.empty(%dim_262) : tensor<1x?x11008xf16>
    %548 = linalg.fill ins(%cst_740 : f16) outs(%547 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %549 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_261, %cst_578, %cst_577 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %550 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_260, %549 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%548 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_263 = tensor.dim %550, %c1 : tensor<1x?x11008xf16>
    %551 = tensor.empty(%dim_263) : tensor<1x?x11008xf16>
    %552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%550 : tensor<1x?x11008xf16>) outs(%551 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%552, %550 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%551 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_264 = tensor.expand_shape %cst_175 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %554 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_264, %cst_576, %cst_575 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_260, %554 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%548 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_265 = tensor.dim %555, %c1 : tensor<1x?x11008xf16>
    %556 = arith.cmpi eq, %dim_263, %dim_265 : index
    cf.assert %556, "mismatched size for broadcast"
    %557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%553, %555 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%551 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_266 = tensor.expand_shape %557 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_267 = tensor.expand_shape %cst_174 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_268 = tensor.dim %557, %c1 : tensor<1x?x11008xf16>
    %558 = tensor.empty(%dim_268) : tensor<1x?x4096xf16>
    %559 = linalg.fill ins(%cst_740 : f16) outs(%558 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_267, %cst_574, %cst_573 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_266, %560 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%559 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_269 = tensor.dim %561, %c1 : tensor<1x?x4096xf16>
    %562 = arith.cmpi eq, %dim, %dim_269 : index
    cf.assert %562, "mismatched size for broadcast"
    %563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%537, %561 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%563 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %565 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%564 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%565 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%566 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %568 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%567 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %569 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%568 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %570 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%563, %569 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%570 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %572 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_722, %571 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_270 = tensor.expand_shape %572 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_271 = tensor.expand_shape %cst_173 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_272 = tensor.dim %572, %c1 : tensor<1x?x4096xf16>
    %573 = tensor.empty(%dim_272) : tensor<1x?x4096xf16>
    %574 = linalg.fill ins(%cst_740 : f16) outs(%573 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_271, %cst_572, %cst_571 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_270, %575 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%574 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_273 = tensor.expand_shape %cst_172 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_273, %cst_570, %cst_569 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %578 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_270, %577 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%574 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_274 = tensor.expand_shape %cst_171 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_274, %cst_568, %cst_567 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_270, %579 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%574 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_275 = tensor.cast %576 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_276 = tensor.expand_shape %cast_275 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_276 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_277 = tensor.cast %578 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_278 = tensor.expand_shape %cast_277 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_278 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_279 = tensor.cast %580 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_280 = tensor.expand_shape %cast_279 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_280 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %584 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%581, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_281 = tensor.extract_slice %581[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_282 = tensor.extract_slice %581[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_282 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %586 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%585 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_281 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_283 = tensor.insert_slice %586 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_284 = tensor.insert_slice %587 into %inserted_slice_283[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %588 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_284, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %589 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%584, %588 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %590 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%582, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_285 = tensor.extract_slice %582[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_286 = tensor.extract_slice %582[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %591 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_286 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %592 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%591 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %593 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_285 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_287 = tensor.insert_slice %592 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_288 = tensor.insert_slice %593 into %inserted_slice_287[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_288, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %595 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%590, %594 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%595 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_289 = tensor.collapse_shape %589 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_290 = tensor.collapse_shape %596 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %597 = linalg.batch_matmul ins(%collapsed_289, %collapsed_290 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_291 = tensor.expand_shape %597 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_291 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%598, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %600:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%599 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%599, %600#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%601 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%602 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %604 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%602, %603 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_292 = tensor.collapse_shape %604 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_293 = tensor.collapse_shape %583 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %605 = linalg.batch_matmul ins(%collapsed_292, %collapsed_293 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_294 = tensor.expand_shape %605 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %606 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_294 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%606 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_295 = tensor.collapse_shape %607 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_296 = tensor.expand_shape %collapsed_295 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_297 = tensor.expand_shape %cst_170 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %608 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_297, %cst_566, %cst_565 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_296, %608 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %610 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%563, %609 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%610 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %612 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%611 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %613 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%612 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%613 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%614 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %616 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%615 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%610, %616 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%617 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %619 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_721, %618 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_298 = tensor.expand_shape %619 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_299 = tensor.expand_shape %cst_169 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_300 = tensor.dim %619, %c1 : tensor<1x?x4096xf16>
    %620 = tensor.empty(%dim_300) : tensor<1x?x11008xf16>
    %621 = linalg.fill ins(%cst_740 : f16) outs(%620 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %622 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_299, %cst_564, %cst_563 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_298, %622 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%621 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_301 = tensor.dim %623, %c1 : tensor<1x?x11008xf16>
    %624 = tensor.empty(%dim_301) : tensor<1x?x11008xf16>
    %625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%623 : tensor<1x?x11008xf16>) outs(%624 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %626 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%625, %623 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%624 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_302 = tensor.expand_shape %cst_168 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %627 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_302, %cst_562, %cst_561 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_298, %627 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%621 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_303 = tensor.dim %628, %c1 : tensor<1x?x11008xf16>
    %629 = arith.cmpi eq, %dim_301, %dim_303 : index
    cf.assert %629, "mismatched size for broadcast"
    %630 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%626, %628 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%624 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_304 = tensor.expand_shape %630 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_305 = tensor.expand_shape %cst_167 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_306 = tensor.dim %630, %c1 : tensor<1x?x11008xf16>
    %631 = tensor.empty(%dim_306) : tensor<1x?x4096xf16>
    %632 = linalg.fill ins(%cst_740 : f16) outs(%631 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_305, %cst_560, %cst_559 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_304, %633 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%632 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_307 = tensor.dim %634, %c1 : tensor<1x?x4096xf16>
    %635 = arith.cmpi eq, %dim, %dim_307 : index
    cf.assert %635, "mismatched size for broadcast"
    %636 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%610, %634 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%636 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%637 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%638 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%639 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %641 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%640 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %642 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%641 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %643 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%636, %642 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%643 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_720, %644 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_308 = tensor.expand_shape %645 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_309 = tensor.expand_shape %cst_166 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_310 = tensor.dim %645, %c1 : tensor<1x?x4096xf16>
    %646 = tensor.empty(%dim_310) : tensor<1x?x4096xf16>
    %647 = linalg.fill ins(%cst_740 : f16) outs(%646 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %648 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_309, %cst_558, %cst_557 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_308, %648 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%647 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_311 = tensor.expand_shape %cst_165 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %650 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_311, %cst_556, %cst_555 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %651 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_308, %650 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%647 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_312 = tensor.expand_shape %cst_164 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %652 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_312, %cst_554, %cst_553 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %653 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_308, %652 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%647 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_313 = tensor.cast %649 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_314 = tensor.expand_shape %cast_313 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %654 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_314 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_315 = tensor.cast %651 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_316 = tensor.expand_shape %cast_315 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_316 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_317 = tensor.cast %653 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_318 = tensor.expand_shape %cast_317 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_318 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%654, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_319 = tensor.extract_slice %654[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_320 = tensor.extract_slice %654[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_320 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%658 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_319 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_321 = tensor.insert_slice %659 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_322 = tensor.insert_slice %660 into %inserted_slice_321[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_322, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%657, %661 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %663 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%655, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_323 = tensor.extract_slice %655[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_324 = tensor.extract_slice %655[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %664 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_324 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%664 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %666 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_323 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_325 = tensor.insert_slice %665 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_326 = tensor.insert_slice %666 into %inserted_slice_325[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %667 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_326, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %668 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%663, %667 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %669 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%668 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_327 = tensor.collapse_shape %662 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_328 = tensor.collapse_shape %669 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %670 = linalg.batch_matmul ins(%collapsed_327, %collapsed_328 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_329 = tensor.expand_shape %670 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_329 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%671, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %673:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%672 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%672, %673#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%674 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%675 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%675, %676 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_330 = tensor.collapse_shape %677 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_331 = tensor.collapse_shape %656 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %678 = linalg.batch_matmul ins(%collapsed_330, %collapsed_331 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_332 = tensor.expand_shape %678 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_332 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%679 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_333 = tensor.collapse_shape %680 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_334 = tensor.expand_shape %collapsed_333 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_335 = tensor.expand_shape %cst_163 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %681 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_335, %cst_552, %cst_551 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_334, %681 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%636, %682 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %684 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%683 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %685 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%684 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %686 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%685 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %687 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%686 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %688 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%687 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %689 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%688 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %690 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%683, %689 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %691 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%690 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %692 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_719, %691 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_336 = tensor.expand_shape %692 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_337 = tensor.expand_shape %cst_162 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_338 = tensor.dim %692, %c1 : tensor<1x?x4096xf16>
    %693 = tensor.empty(%dim_338) : tensor<1x?x11008xf16>
    %694 = linalg.fill ins(%cst_740 : f16) outs(%693 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %695 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_337, %cst_550, %cst_549 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_336, %695 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%694 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_339 = tensor.dim %696, %c1 : tensor<1x?x11008xf16>
    %697 = tensor.empty(%dim_339) : tensor<1x?x11008xf16>
    %698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%696 : tensor<1x?x11008xf16>) outs(%697 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%698, %696 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%697 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_340 = tensor.expand_shape %cst_161 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %700 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_340, %cst_548, %cst_547 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_336, %700 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%694 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_341 = tensor.dim %701, %c1 : tensor<1x?x11008xf16>
    %702 = arith.cmpi eq, %dim_339, %dim_341 : index
    cf.assert %702, "mismatched size for broadcast"
    %703 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%699, %701 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%697 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_342 = tensor.expand_shape %703 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_343 = tensor.expand_shape %cst_160 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_344 = tensor.dim %703, %c1 : tensor<1x?x11008xf16>
    %704 = tensor.empty(%dim_344) : tensor<1x?x4096xf16>
    %705 = linalg.fill ins(%cst_740 : f16) outs(%704 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %706 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_343, %cst_546, %cst_545 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %707 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_342, %706 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%705 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_345 = tensor.dim %707, %c1 : tensor<1x?x4096xf16>
    %708 = arith.cmpi eq, %dim, %dim_345 : index
    cf.assert %708, "mismatched size for broadcast"
    %709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%683, %707 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %710 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%709 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %711 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%710 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%711 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%712 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %714 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%713 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%714 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %716 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%709, %715 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%716 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_718, %717 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_346 = tensor.expand_shape %718 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_347 = tensor.expand_shape %cst_159 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_348 = tensor.dim %718, %c1 : tensor<1x?x4096xf16>
    %719 = tensor.empty(%dim_348) : tensor<1x?x4096xf16>
    %720 = linalg.fill ins(%cst_740 : f16) outs(%719 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_347, %cst_544, %cst_543 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_346, %721 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%720 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_349 = tensor.expand_shape %cst_158 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_349, %cst_542, %cst_541 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %724 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_346, %723 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%720 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_350 = tensor.expand_shape %cst_157 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_350, %cst_540, %cst_539 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %726 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_346, %725 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%720 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_351 = tensor.cast %722 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_352 = tensor.expand_shape %cast_351 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %727 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_352 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_353 = tensor.cast %724 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_354 = tensor.expand_shape %cast_353 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %728 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_354 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_355 = tensor.cast %726 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_356 = tensor.expand_shape %cast_355 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_356 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %730 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%727, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_357 = tensor.extract_slice %727[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_358 = tensor.extract_slice %727[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %731 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_358 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%731 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_357 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_359 = tensor.insert_slice %732 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_360 = tensor.insert_slice %733 into %inserted_slice_359[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_360, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%730, %734 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%728, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_361 = tensor.extract_slice %728[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_362 = tensor.extract_slice %728[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_362 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%737 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_361 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_363 = tensor.insert_slice %738 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_364 = tensor.insert_slice %739 into %inserted_slice_363[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %740 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_364, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %741 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%736, %740 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %742 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%741 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_365 = tensor.collapse_shape %735 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_366 = tensor.collapse_shape %742 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %743 = linalg.batch_matmul ins(%collapsed_365, %collapsed_366 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_367 = tensor.expand_shape %743 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %744 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_367 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%744, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %746:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%745 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%745, %746#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%747 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%748 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%748, %749 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_368 = tensor.collapse_shape %750 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_369 = tensor.collapse_shape %729 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %751 = linalg.batch_matmul ins(%collapsed_368, %collapsed_369 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_370 = tensor.expand_shape %751 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_370 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%752 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_371 = tensor.collapse_shape %753 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_372 = tensor.expand_shape %collapsed_371 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_373 = tensor.expand_shape %cst_156 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %754 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_373, %cst_538, %cst_537 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_372, %754 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%709, %755 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%756 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%757 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%758 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%759 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%760 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %762 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%761 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%756, %762 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %764 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%763 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %765 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_717, %764 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_374 = tensor.expand_shape %765 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_375 = tensor.expand_shape %cst_155 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_376 = tensor.dim %765, %c1 : tensor<1x?x4096xf16>
    %766 = tensor.empty(%dim_376) : tensor<1x?x11008xf16>
    %767 = linalg.fill ins(%cst_740 : f16) outs(%766 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %768 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_375, %cst_536, %cst_535 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_374, %768 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%767 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_377 = tensor.dim %769, %c1 : tensor<1x?x11008xf16>
    %770 = tensor.empty(%dim_377) : tensor<1x?x11008xf16>
    %771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%769 : tensor<1x?x11008xf16>) outs(%770 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%771, %769 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%770 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_378 = tensor.expand_shape %cst_154 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_378, %cst_534, %cst_533 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_374, %773 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%767 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_379 = tensor.dim %774, %c1 : tensor<1x?x11008xf16>
    %775 = arith.cmpi eq, %dim_377, %dim_379 : index
    cf.assert %775, "mismatched size for broadcast"
    %776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%772, %774 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%770 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_380 = tensor.expand_shape %776 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_381 = tensor.expand_shape %cst_153 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_382 = tensor.dim %776, %c1 : tensor<1x?x11008xf16>
    %777 = tensor.empty(%dim_382) : tensor<1x?x4096xf16>
    %778 = linalg.fill ins(%cst_740 : f16) outs(%777 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %779 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_381, %cst_532, %cst_531 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_380, %779 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%778 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_383 = tensor.dim %780, %c1 : tensor<1x?x4096xf16>
    %781 = arith.cmpi eq, %dim, %dim_383 : index
    cf.assert %781, "mismatched size for broadcast"
    %782 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%756, %780 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %783 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%782 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %784 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%783 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %785 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%784 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %786 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%785 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %787 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%786 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %788 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%787 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %789 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%782, %788 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%789 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_716, %790 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_384 = tensor.expand_shape %791 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_385 = tensor.expand_shape %cst_152 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_386 = tensor.dim %791, %c1 : tensor<1x?x4096xf16>
    %792 = tensor.empty(%dim_386) : tensor<1x?x4096xf16>
    %793 = linalg.fill ins(%cst_740 : f16) outs(%792 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_385, %cst_530, %cst_529 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_384, %794 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%793 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_387 = tensor.expand_shape %cst_151 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_387, %cst_528, %cst_527 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_384, %796 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%793 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_388 = tensor.expand_shape %cst_150 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_388, %cst_526, %cst_525 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %799 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_384, %798 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%793 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_389 = tensor.cast %795 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_390 = tensor.expand_shape %cast_389 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %800 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_390 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_391 = tensor.cast %797 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_392 = tensor.expand_shape %cast_391 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %801 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_392 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_393 = tensor.cast %799 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_394 = tensor.expand_shape %cast_393 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %802 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_394 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %803 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%800, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_395 = tensor.extract_slice %800[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_396 = tensor.extract_slice %800[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %804 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_396 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %805 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%804 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %806 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_395 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_397 = tensor.insert_slice %805 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_398 = tensor.insert_slice %806 into %inserted_slice_397[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %807 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_398, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %808 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%803, %807 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %809 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%801, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_399 = tensor.extract_slice %801[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_400 = tensor.extract_slice %801[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_400 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%810 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_399 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_401 = tensor.insert_slice %811 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_402 = tensor.insert_slice %812 into %inserted_slice_401[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_402, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %814 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%809, %813 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%814 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_403 = tensor.collapse_shape %808 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_404 = tensor.collapse_shape %815 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %816 = linalg.batch_matmul ins(%collapsed_403, %collapsed_404 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_405 = tensor.expand_shape %816 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_405 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%817, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %819:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%818 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %820 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%818, %819#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%820 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %822 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%821 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%821, %822 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_406 = tensor.collapse_shape %823 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_407 = tensor.collapse_shape %802 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %824 = linalg.batch_matmul ins(%collapsed_406, %collapsed_407 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_408 = tensor.expand_shape %824 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_408 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %826 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%825 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_409 = tensor.collapse_shape %826 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_410 = tensor.expand_shape %collapsed_409 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_411 = tensor.expand_shape %cst_149 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_411, %cst_524, %cst_523 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %828 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_410, %827 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%782, %828 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%829 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%830 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %832 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%831 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%832 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%833 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%834 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%829, %835 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%836 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %838 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_715, %837 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_412 = tensor.expand_shape %838 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_413 = tensor.expand_shape %cst_148 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_414 = tensor.dim %838, %c1 : tensor<1x?x4096xf16>
    %839 = tensor.empty(%dim_414) : tensor<1x?x11008xf16>
    %840 = linalg.fill ins(%cst_740 : f16) outs(%839 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %841 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_413, %cst_522, %cst_521 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %842 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_412, %841 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%840 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_415 = tensor.dim %842, %c1 : tensor<1x?x11008xf16>
    %843 = tensor.empty(%dim_415) : tensor<1x?x11008xf16>
    %844 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%842 : tensor<1x?x11008xf16>) outs(%843 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%844, %842 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%843 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_416 = tensor.expand_shape %cst_147 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %846 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_416, %cst_520, %cst_519 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_412, %846 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%840 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_417 = tensor.dim %847, %c1 : tensor<1x?x11008xf16>
    %848 = arith.cmpi eq, %dim_415, %dim_417 : index
    cf.assert %848, "mismatched size for broadcast"
    %849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%845, %847 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%843 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_418 = tensor.expand_shape %849 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_419 = tensor.expand_shape %cst_146 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_420 = tensor.dim %849, %c1 : tensor<1x?x11008xf16>
    %850 = tensor.empty(%dim_420) : tensor<1x?x4096xf16>
    %851 = linalg.fill ins(%cst_740 : f16) outs(%850 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_419, %cst_518, %cst_517 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_418, %852 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%851 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_421 = tensor.dim %853, %c1 : tensor<1x?x4096xf16>
    %854 = arith.cmpi eq, %dim, %dim_421 : index
    cf.assert %854, "mismatched size for broadcast"
    %855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%829, %853 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%855 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%856 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%857 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %859 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%858 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%859 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%860 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %862 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%855, %861 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %863 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%862 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %864 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_714, %863 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_422 = tensor.expand_shape %864 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_423 = tensor.expand_shape %cst_145 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_424 = tensor.dim %864, %c1 : tensor<1x?x4096xf16>
    %865 = tensor.empty(%dim_424) : tensor<1x?x4096xf16>
    %866 = linalg.fill ins(%cst_740 : f16) outs(%865 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %867 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_423, %cst_516, %cst_515 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_422, %867 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%866 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_425 = tensor.expand_shape %cst_144 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_425, %cst_514, %cst_513 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_422, %869 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%866 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_426 = tensor.expand_shape %cst_143 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_426, %cst_512, %cst_511 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_422, %871 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%866 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_427 = tensor.cast %868 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_428 = tensor.expand_shape %cast_427 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_428 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_429 = tensor.cast %870 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_430 = tensor.expand_shape %cast_429 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_430 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_431 = tensor.cast %872 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_432 = tensor.expand_shape %cast_431 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_432 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%873, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_433 = tensor.extract_slice %873[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_434 = tensor.extract_slice %873[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %877 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_434 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %878 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%877 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %879 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_433 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_435 = tensor.insert_slice %878 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_436 = tensor.insert_slice %879 into %inserted_slice_435[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %880 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_436, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %881 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%876, %880 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %882 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%874, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_437 = tensor.extract_slice %874[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_438 = tensor.extract_slice %874[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %883 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_438 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %884 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%883 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_437 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_439 = tensor.insert_slice %884 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_440 = tensor.insert_slice %885 into %inserted_slice_439[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %886 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_440, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %887 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%882, %886 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%887 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_441 = tensor.collapse_shape %881 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_442 = tensor.collapse_shape %888 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %889 = linalg.batch_matmul ins(%collapsed_441, %collapsed_442 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_443 = tensor.expand_shape %889 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_443 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%890, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %892:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%891 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%891, %892#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%893 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%894 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %896 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%894, %895 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_444 = tensor.collapse_shape %896 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_445 = tensor.collapse_shape %875 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %897 = linalg.batch_matmul ins(%collapsed_444, %collapsed_445 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_446 = tensor.expand_shape %897 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_446 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%898 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_447 = tensor.collapse_shape %899 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_448 = tensor.expand_shape %collapsed_447 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_449 = tensor.expand_shape %cst_142 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %900 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_449, %cst_510, %cst_509 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_448, %900 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %902 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%855, %901 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %903 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%902 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %904 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%903 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %905 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%904 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %906 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%905 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%906 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%907 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%902, %908 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%909 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_713, %910 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_450 = tensor.expand_shape %911 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_451 = tensor.expand_shape %cst_141 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_452 = tensor.dim %911, %c1 : tensor<1x?x4096xf16>
    %912 = tensor.empty(%dim_452) : tensor<1x?x11008xf16>
    %913 = linalg.fill ins(%cst_740 : f16) outs(%912 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %914 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_451, %cst_508, %cst_507 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_450, %914 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%913 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_453 = tensor.dim %915, %c1 : tensor<1x?x11008xf16>
    %916 = tensor.empty(%dim_453) : tensor<1x?x11008xf16>
    %917 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%915 : tensor<1x?x11008xf16>) outs(%916 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %918 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%917, %915 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%916 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_454 = tensor.expand_shape %cst_140 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %919 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_454, %cst_506, %cst_505 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %920 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_450, %919 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%913 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_455 = tensor.dim %920, %c1 : tensor<1x?x11008xf16>
    %921 = arith.cmpi eq, %dim_453, %dim_455 : index
    cf.assert %921, "mismatched size for broadcast"
    %922 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%918, %920 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%916 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_456 = tensor.expand_shape %922 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_457 = tensor.expand_shape %cst_139 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_458 = tensor.dim %922, %c1 : tensor<1x?x11008xf16>
    %923 = tensor.empty(%dim_458) : tensor<1x?x4096xf16>
    %924 = linalg.fill ins(%cst_740 : f16) outs(%923 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_457, %cst_504, %cst_503 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_456, %925 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%924 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_459 = tensor.dim %926, %c1 : tensor<1x?x4096xf16>
    %927 = arith.cmpi eq, %dim, %dim_459 : index
    cf.assert %927, "mismatched size for broadcast"
    %928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%902, %926 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%928 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %930 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%929 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%930 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%931 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%932 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %934 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%933 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %935 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%928, %934 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %936 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%935 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_712, %936 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_460 = tensor.expand_shape %937 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_461 = tensor.expand_shape %cst_138 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_462 = tensor.dim %937, %c1 : tensor<1x?x4096xf16>
    %938 = tensor.empty(%dim_462) : tensor<1x?x4096xf16>
    %939 = linalg.fill ins(%cst_740 : f16) outs(%938 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %940 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_461, %cst_502, %cst_501 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_460, %940 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%939 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_463 = tensor.expand_shape %cst_137 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %942 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_463, %cst_500, %cst_499 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_460, %942 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%939 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_464 = tensor.expand_shape %cst_136 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %944 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_464, %cst_498, %cst_497 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %945 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_460, %944 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%939 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_465 = tensor.cast %941 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_466 = tensor.expand_shape %cast_465 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %946 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_466 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_467 = tensor.cast %943 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_468 = tensor.expand_shape %cast_467 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_468 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_469 = tensor.cast %945 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_470 = tensor.expand_shape %cast_469 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_470 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%946, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_471 = tensor.extract_slice %946[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_472 = tensor.extract_slice %946[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_472 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%950 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_471 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_473 = tensor.insert_slice %951 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_474 = tensor.insert_slice %952 into %inserted_slice_473[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_474, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %954 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%949, %953 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %955 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%947, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_475 = tensor.extract_slice %947[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_476 = tensor.extract_slice %947[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %956 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_476 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %957 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%956 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %958 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_475 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_477 = tensor.insert_slice %957 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_478 = tensor.insert_slice %958 into %inserted_slice_477[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %959 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_478, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %960 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%955, %959 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %961 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%960 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_479 = tensor.collapse_shape %954 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_480 = tensor.collapse_shape %961 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %962 = linalg.batch_matmul ins(%collapsed_479, %collapsed_480 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_481 = tensor.expand_shape %962 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_481 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %964 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%963, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %965:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%964 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%964, %965#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%966 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%967 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%967, %968 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_482 = tensor.collapse_shape %969 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_483 = tensor.collapse_shape %948 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %970 = linalg.batch_matmul ins(%collapsed_482, %collapsed_483 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_484 = tensor.expand_shape %970 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_484 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%971 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_485 = tensor.collapse_shape %972 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_486 = tensor.expand_shape %collapsed_485 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_487 = tensor.expand_shape %cst_135 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_487, %cst_496, %cst_495 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_486, %973 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%928, %974 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %976 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%975 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %977 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%976 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %978 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%977 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%978 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %980 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%979 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %981 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%980 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %982 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%975, %981 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%982 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %984 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_711, %983 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_488 = tensor.expand_shape %984 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_489 = tensor.expand_shape %cst_134 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_490 = tensor.dim %984, %c1 : tensor<1x?x4096xf16>
    %985 = tensor.empty(%dim_490) : tensor<1x?x11008xf16>
    %986 = linalg.fill ins(%cst_740 : f16) outs(%985 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %987 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_489, %cst_494, %cst_493 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_488, %987 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%986 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_491 = tensor.dim %988, %c1 : tensor<1x?x11008xf16>
    %989 = tensor.empty(%dim_491) : tensor<1x?x11008xf16>
    %990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%988 : tensor<1x?x11008xf16>) outs(%989 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%990, %988 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%989 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_492 = tensor.expand_shape %cst_133 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %992 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_492, %cst_492, %cst_491 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %993 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_488, %992 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%986 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_493 = tensor.dim %993, %c1 : tensor<1x?x11008xf16>
    %994 = arith.cmpi eq, %dim_491, %dim_493 : index
    cf.assert %994, "mismatched size for broadcast"
    %995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%991, %993 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%989 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_494 = tensor.expand_shape %995 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_495 = tensor.expand_shape %cst_132 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_496 = tensor.dim %995, %c1 : tensor<1x?x11008xf16>
    %996 = tensor.empty(%dim_496) : tensor<1x?x4096xf16>
    %997 = linalg.fill ins(%cst_740 : f16) outs(%996 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %998 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_495, %cst_490, %cst_489 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %999 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_494, %998 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%997 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_497 = tensor.dim %999, %c1 : tensor<1x?x4096xf16>
    %1000 = arith.cmpi eq, %dim, %dim_497 : index
    cf.assert %1000, "mismatched size for broadcast"
    %1001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%975, %999 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1002 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1001 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1002 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1004 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1003 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1005 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1004 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1005 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1007 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1006 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1008 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1001, %1007 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1008 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_710, %1009 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_498 = tensor.expand_shape %1010 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_499 = tensor.expand_shape %cst_131 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_500 = tensor.dim %1010, %c1 : tensor<1x?x4096xf16>
    %1011 = tensor.empty(%dim_500) : tensor<1x?x4096xf16>
    %1012 = linalg.fill ins(%cst_740 : f16) outs(%1011 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_499, %cst_488, %cst_487 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_498, %1013 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1012 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_501 = tensor.expand_shape %cst_130 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1015 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_501, %cst_486, %cst_485 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1016 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_498, %1015 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1012 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_502 = tensor.expand_shape %cst_129 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_502, %cst_484, %cst_483 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1018 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_498, %1017 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1012 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_503 = tensor.cast %1014 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_504 = tensor.expand_shape %cast_503 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1019 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_504 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_505 = tensor.cast %1016 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_506 = tensor.expand_shape %cast_505 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1020 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_506 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_507 = tensor.cast %1018 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_508 = tensor.expand_shape %cast_507 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_508 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1022 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1019, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_509 = tensor.extract_slice %1019[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_510 = tensor.extract_slice %1019[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_510 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1023 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_509 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_511 = tensor.insert_slice %1024 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_512 = tensor.insert_slice %1025 into %inserted_slice_511[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_512, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1027 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1022, %1026 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1028 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1020, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_513 = tensor.extract_slice %1020[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_514 = tensor.extract_slice %1020[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_514 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1029 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_513 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_515 = tensor.insert_slice %1030 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_516 = tensor.insert_slice %1031 into %inserted_slice_515[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1032 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_516, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1033 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1028, %1032 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1034 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1033 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_517 = tensor.collapse_shape %1027 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_518 = tensor.collapse_shape %1034 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1035 = linalg.batch_matmul ins(%collapsed_517, %collapsed_518 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_519 = tensor.expand_shape %1035 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_519 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1036, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1038:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1037 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1037, %1038#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1040 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1039 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1040 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1040, %1041 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_520 = tensor.collapse_shape %1042 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_521 = tensor.collapse_shape %1021 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1043 = linalg.batch_matmul ins(%collapsed_520, %collapsed_521 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_522 = tensor.expand_shape %1043 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1044 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_522 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1044 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_523 = tensor.collapse_shape %1045 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_524 = tensor.expand_shape %collapsed_523 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_525 = tensor.expand_shape %cst_128 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_525, %cst_482, %cst_481 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_524, %1046 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1048 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1001, %1047 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1048 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1049 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1050 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1051 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1052 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1054 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1053 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1055 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1048, %1054 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1056 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1055 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1057 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_709, %1056 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_526 = tensor.expand_shape %1057 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_527 = tensor.expand_shape %cst_127 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_528 = tensor.dim %1057, %c1 : tensor<1x?x4096xf16>
    %1058 = tensor.empty(%dim_528) : tensor<1x?x11008xf16>
    %1059 = linalg.fill ins(%cst_740 : f16) outs(%1058 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1060 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_527, %cst_480, %cst_479 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_526, %1060 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1059 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_529 = tensor.dim %1061, %c1 : tensor<1x?x11008xf16>
    %1062 = tensor.empty(%dim_529) : tensor<1x?x11008xf16>
    %1063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1061 : tensor<1x?x11008xf16>) outs(%1062 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1063, %1061 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1062 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_530 = tensor.expand_shape %cst_126 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_530, %cst_478, %cst_477 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_526, %1065 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1059 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_531 = tensor.dim %1066, %c1 : tensor<1x?x11008xf16>
    %1067 = arith.cmpi eq, %dim_529, %dim_531 : index
    cf.assert %1067, "mismatched size for broadcast"
    %1068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1064, %1066 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1062 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_532 = tensor.expand_shape %1068 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_533 = tensor.expand_shape %cst_125 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_534 = tensor.dim %1068, %c1 : tensor<1x?x11008xf16>
    %1069 = tensor.empty(%dim_534) : tensor<1x?x4096xf16>
    %1070 = linalg.fill ins(%cst_740 : f16) outs(%1069 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_533, %cst_476, %cst_475 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_532, %1071 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1070 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_535 = tensor.dim %1072, %c1 : tensor<1x?x4096xf16>
    %1073 = arith.cmpi eq, %dim, %dim_535 : index
    cf.assert %1073, "mismatched size for broadcast"
    %1074 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1048, %1072 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1075 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1074 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1076 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1075 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1076 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1078 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1077 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1079 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1078 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1080 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1079 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1081 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1074, %1080 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1082 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1081 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1083 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_708, %1082 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_536 = tensor.expand_shape %1083 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_537 = tensor.expand_shape %cst_124 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_538 = tensor.dim %1083, %c1 : tensor<1x?x4096xf16>
    %1084 = tensor.empty(%dim_538) : tensor<1x?x4096xf16>
    %1085 = linalg.fill ins(%cst_740 : f16) outs(%1084 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_537, %cst_474, %cst_473 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_536, %1086 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1085 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_539 = tensor.expand_shape %cst_123 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_539, %cst_472, %cst_471 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_536, %1088 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1085 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_540 = tensor.expand_shape %cst_122 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_540, %cst_470, %cst_469 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1091 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_536, %1090 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1085 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_541 = tensor.cast %1087 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_542 = tensor.expand_shape %cast_541 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1092 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_542 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_543 = tensor.cast %1089 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_544 = tensor.expand_shape %cast_543 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_544 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_545 = tensor.cast %1091 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_546 = tensor.expand_shape %cast_545 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1094 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_546 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1095 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1092, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_547 = tensor.extract_slice %1092[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_548 = tensor.extract_slice %1092[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1096 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_548 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1097 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1096 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1098 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_547 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_549 = tensor.insert_slice %1097 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_550 = tensor.insert_slice %1098 into %inserted_slice_549[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1099 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_550, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1095, %1099 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1093, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_551 = tensor.extract_slice %1093[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_552 = tensor.extract_slice %1093[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_552 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1102 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_551 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_553 = tensor.insert_slice %1103 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_554 = tensor.insert_slice %1104 into %inserted_slice_553[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_554, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1106 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1101, %1105 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1106 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_555 = tensor.collapse_shape %1100 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_556 = tensor.collapse_shape %1107 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1108 = linalg.batch_matmul ins(%collapsed_555, %collapsed_556 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_557 = tensor.expand_shape %1108 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_557 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1109, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1111:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1110 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1110, %1111#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1112 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1113 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1113, %1114 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_558 = tensor.collapse_shape %1115 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_559 = tensor.collapse_shape %1094 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1116 = linalg.batch_matmul ins(%collapsed_558, %collapsed_559 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_560 = tensor.expand_shape %1116 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_560 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1117 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_561 = tensor.collapse_shape %1118 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_562 = tensor.expand_shape %collapsed_561 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_563 = tensor.expand_shape %cst_121 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_563, %cst_468, %cst_467 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1120 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_562, %1119 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1074, %1120 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1121 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1122 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1123 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1124 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1125 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1126 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1121, %1127 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1128 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_707, %1129 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_564 = tensor.expand_shape %1130 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_565 = tensor.expand_shape %cst_120 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_566 = tensor.dim %1130, %c1 : tensor<1x?x4096xf16>
    %1131 = tensor.empty(%dim_566) : tensor<1x?x11008xf16>
    %1132 = linalg.fill ins(%cst_740 : f16) outs(%1131 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_565, %cst_466, %cst_465 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_564, %1133 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1132 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_567 = tensor.dim %1134, %c1 : tensor<1x?x11008xf16>
    %1135 = tensor.empty(%dim_567) : tensor<1x?x11008xf16>
    %1136 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1134 : tensor<1x?x11008xf16>) outs(%1135 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1136, %1134 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1135 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_568 = tensor.expand_shape %cst_119 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_568, %cst_464, %cst_463 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_564, %1138 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1132 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_569 = tensor.dim %1139, %c1 : tensor<1x?x11008xf16>
    %1140 = arith.cmpi eq, %dim_567, %dim_569 : index
    cf.assert %1140, "mismatched size for broadcast"
    %1141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1137, %1139 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1135 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_570 = tensor.expand_shape %1141 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_571 = tensor.expand_shape %cst_118 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_572 = tensor.dim %1141, %c1 : tensor<1x?x11008xf16>
    %1142 = tensor.empty(%dim_572) : tensor<1x?x4096xf16>
    %1143 = linalg.fill ins(%cst_740 : f16) outs(%1142 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_571, %cst_462, %cst_461 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_570, %1144 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1143 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_573 = tensor.dim %1145, %c1 : tensor<1x?x4096xf16>
    %1146 = arith.cmpi eq, %dim, %dim_573 : index
    cf.assert %1146, "mismatched size for broadcast"
    %1147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1121, %1145 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1147 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1148 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1149 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1150 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1151 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1152 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1147, %1153 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1154 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_706, %1155 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_574 = tensor.expand_shape %1156 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_575 = tensor.expand_shape %cst_117 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_576 = tensor.dim %1156, %c1 : tensor<1x?x4096xf16>
    %1157 = tensor.empty(%dim_576) : tensor<1x?x4096xf16>
    %1158 = linalg.fill ins(%cst_740 : f16) outs(%1157 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_575, %cst_460, %cst_459 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_574, %1159 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1158 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_577 = tensor.expand_shape %cst_116 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_577, %cst_458, %cst_457 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1162 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_574, %1161 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1158 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_578 = tensor.expand_shape %cst_115 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_578, %cst_456, %cst_455 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_574, %1163 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1158 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_579 = tensor.cast %1160 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_580 = tensor.expand_shape %cast_579 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_580 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_581 = tensor.cast %1162 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_582 = tensor.expand_shape %cast_581 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_582 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_583 = tensor.cast %1164 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_584 = tensor.expand_shape %cast_583 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_584 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1165, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_585 = tensor.extract_slice %1165[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_586 = tensor.extract_slice %1165[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_586 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1169 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_585 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_587 = tensor.insert_slice %1170 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_588 = tensor.insert_slice %1171 into %inserted_slice_587[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_588, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1168, %1172 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1166, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_589 = tensor.extract_slice %1166[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_590 = tensor.extract_slice %1166[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_590 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1175 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_589 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_591 = tensor.insert_slice %1176 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_592 = tensor.insert_slice %1177 into %inserted_slice_591[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_592, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1174, %1178 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1179 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_593 = tensor.collapse_shape %1173 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_594 = tensor.collapse_shape %1180 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1181 = linalg.batch_matmul ins(%collapsed_593, %collapsed_594 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_595 = tensor.expand_shape %1181 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_595 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1182, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1184:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1183 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1183, %1184#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1185 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1186 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1186, %1187 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_596 = tensor.collapse_shape %1188 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_597 = tensor.collapse_shape %1167 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1189 = linalg.batch_matmul ins(%collapsed_596, %collapsed_597 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_598 = tensor.expand_shape %1189 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_598 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1190 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_599 = tensor.collapse_shape %1191 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_600 = tensor.expand_shape %collapsed_599 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_601 = tensor.expand_shape %cst_114 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_601, %cst_454, %cst_453 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_600, %1192 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1147, %1193 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1194 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1196 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1195 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1197 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1196 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1197 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1198 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1199 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1194, %1200 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1201 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_705, %1202 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_602 = tensor.expand_shape %1203 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_603 = tensor.expand_shape %cst_113 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_604 = tensor.dim %1203, %c1 : tensor<1x?x4096xf16>
    %1204 = tensor.empty(%dim_604) : tensor<1x?x11008xf16>
    %1205 = linalg.fill ins(%cst_740 : f16) outs(%1204 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_603, %cst_452, %cst_451 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_602, %1206 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1205 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_605 = tensor.dim %1207, %c1 : tensor<1x?x11008xf16>
    %1208 = tensor.empty(%dim_605) : tensor<1x?x11008xf16>
    %1209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1207 : tensor<1x?x11008xf16>) outs(%1208 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1209, %1207 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1208 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_606 = tensor.expand_shape %cst_112 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_606, %cst_450, %cst_449 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_602, %1211 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1205 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_607 = tensor.dim %1212, %c1 : tensor<1x?x11008xf16>
    %1213 = arith.cmpi eq, %dim_605, %dim_607 : index
    cf.assert %1213, "mismatched size for broadcast"
    %1214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1210, %1212 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1208 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_608 = tensor.expand_shape %1214 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_609 = tensor.expand_shape %cst_111 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_610 = tensor.dim %1214, %c1 : tensor<1x?x11008xf16>
    %1215 = tensor.empty(%dim_610) : tensor<1x?x4096xf16>
    %1216 = linalg.fill ins(%cst_740 : f16) outs(%1215 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_609, %cst_448, %cst_447 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_608, %1217 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1216 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_611 = tensor.dim %1218, %c1 : tensor<1x?x4096xf16>
    %1219 = arith.cmpi eq, %dim, %dim_611 : index
    cf.assert %1219, "mismatched size for broadcast"
    %1220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1194, %1218 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1220 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1221 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1222 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1223 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1224 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1225 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1220, %1226 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1227 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_704, %1228 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_612 = tensor.expand_shape %1229 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_613 = tensor.expand_shape %cst_110 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_614 = tensor.dim %1229, %c1 : tensor<1x?x4096xf16>
    %1230 = tensor.empty(%dim_614) : tensor<1x?x4096xf16>
    %1231 = linalg.fill ins(%cst_740 : f16) outs(%1230 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_613, %cst_446, %cst_445 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_612, %1232 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1231 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_615 = tensor.expand_shape %cst_109 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_615, %cst_444, %cst_443 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_612, %1234 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1231 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_616 = tensor.expand_shape %cst_108 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_616, %cst_442, %cst_441 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_612, %1236 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1231 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_617 = tensor.cast %1233 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_618 = tensor.expand_shape %cast_617 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_618 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_619 = tensor.cast %1235 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_620 = tensor.expand_shape %cast_619 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_620 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_621 = tensor.cast %1237 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_622 = tensor.expand_shape %cast_621 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_622 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1238, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_623 = tensor.extract_slice %1238[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_624 = tensor.extract_slice %1238[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_624 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1242 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_623 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_625 = tensor.insert_slice %1243 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_626 = tensor.insert_slice %1244 into %inserted_slice_625[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_626, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1241, %1245 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1239, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_627 = tensor.extract_slice %1239[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_628 = tensor.extract_slice %1239[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_628 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1248 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_627 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_629 = tensor.insert_slice %1249 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_630 = tensor.insert_slice %1250 into %inserted_slice_629[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_630, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1247, %1251 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1252 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_631 = tensor.collapse_shape %1246 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_632 = tensor.collapse_shape %1253 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1254 = linalg.batch_matmul ins(%collapsed_631, %collapsed_632 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_633 = tensor.expand_shape %1254 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_633 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1256 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1255, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1257:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1256 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1256, %1257#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1258 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1259 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1259, %1260 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_634 = tensor.collapse_shape %1261 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_635 = tensor.collapse_shape %1240 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1262 = linalg.batch_matmul ins(%collapsed_634, %collapsed_635 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_636 = tensor.expand_shape %1262 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_636 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1263 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_637 = tensor.collapse_shape %1264 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_638 = tensor.expand_shape %collapsed_637 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_639 = tensor.expand_shape %cst_107 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_639, %cst_440, %cst_439 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_638, %1265 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1220, %1266 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1267 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1268 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1269 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1270 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1271 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1272 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1274 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1267, %1273 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1274 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1276 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_703, %1275 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_640 = tensor.expand_shape %1276 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_641 = tensor.expand_shape %cst_106 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_642 = tensor.dim %1276, %c1 : tensor<1x?x4096xf16>
    %1277 = tensor.empty(%dim_642) : tensor<1x?x11008xf16>
    %1278 = linalg.fill ins(%cst_740 : f16) outs(%1277 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_641, %cst_438, %cst_437 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_640, %1279 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1278 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_643 = tensor.dim %1280, %c1 : tensor<1x?x11008xf16>
    %1281 = tensor.empty(%dim_643) : tensor<1x?x11008xf16>
    %1282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1280 : tensor<1x?x11008xf16>) outs(%1281 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1282, %1280 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1281 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_644 = tensor.expand_shape %cst_105 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_644, %cst_436, %cst_435 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_640, %1284 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1278 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_645 = tensor.dim %1285, %c1 : tensor<1x?x11008xf16>
    %1286 = arith.cmpi eq, %dim_643, %dim_645 : index
    cf.assert %1286, "mismatched size for broadcast"
    %1287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1283, %1285 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1281 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_646 = tensor.expand_shape %1287 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_647 = tensor.expand_shape %cst_104 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_648 = tensor.dim %1287, %c1 : tensor<1x?x11008xf16>
    %1288 = tensor.empty(%dim_648) : tensor<1x?x4096xf16>
    %1289 = linalg.fill ins(%cst_740 : f16) outs(%1288 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_647, %cst_434, %cst_433 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_646, %1290 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1289 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_649 = tensor.dim %1291, %c1 : tensor<1x?x4096xf16>
    %1292 = arith.cmpi eq, %dim, %dim_649 : index
    cf.assert %1292, "mismatched size for broadcast"
    %1293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1267, %1291 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1293 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1294 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1295 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1296 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1298 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1297 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1299 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1298 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1293, %1299 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1300 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_702, %1301 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_650 = tensor.expand_shape %1302 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_651 = tensor.expand_shape %cst_103 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_652 = tensor.dim %1302, %c1 : tensor<1x?x4096xf16>
    %1303 = tensor.empty(%dim_652) : tensor<1x?x4096xf16>
    %1304 = linalg.fill ins(%cst_740 : f16) outs(%1303 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_651, %cst_432, %cst_431 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_650, %1305 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1304 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_653 = tensor.expand_shape %cst_102 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_653, %cst_430, %cst_429 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1308 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_650, %1307 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1304 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_654 = tensor.expand_shape %cst_101 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_654, %cst_428, %cst_427 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_650, %1309 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1304 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_655 = tensor.cast %1306 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_656 = tensor.expand_shape %cast_655 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_656 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_657 = tensor.cast %1308 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_658 = tensor.expand_shape %cast_657 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_658 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_659 = tensor.cast %1310 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_660 = tensor.expand_shape %cast_659 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_660 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1311, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_661 = tensor.extract_slice %1311[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_662 = tensor.extract_slice %1311[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_662 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1315 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_661 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_663 = tensor.insert_slice %1316 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_664 = tensor.insert_slice %1317 into %inserted_slice_663[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_664, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1314, %1318 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1312, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_665 = tensor.extract_slice %1312[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_666 = tensor.extract_slice %1312[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_666 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1321 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_665 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_667 = tensor.insert_slice %1322 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_668 = tensor.insert_slice %1323 into %inserted_slice_667[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_668, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1320, %1324 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1325 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_669 = tensor.collapse_shape %1319 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_670 = tensor.collapse_shape %1326 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1327 = linalg.batch_matmul ins(%collapsed_669, %collapsed_670 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_671 = tensor.expand_shape %1327 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_671 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1328, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1330:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1329 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1329, %1330#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1332 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1331 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1332 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1332, %1333 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_672 = tensor.collapse_shape %1334 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_673 = tensor.collapse_shape %1313 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1335 = linalg.batch_matmul ins(%collapsed_672, %collapsed_673 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_674 = tensor.expand_shape %1335 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_674 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1336 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_675 = tensor.collapse_shape %1337 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_676 = tensor.expand_shape %collapsed_675 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_677 = tensor.expand_shape %cst_100 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_677, %cst_426, %cst_425 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_676, %1338 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1293, %1339 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1341 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1342 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1343 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1344 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1345 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340, %1346 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1347 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_701, %1348 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_678 = tensor.expand_shape %1349 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_679 = tensor.expand_shape %cst_99 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_680 = tensor.dim %1349, %c1 : tensor<1x?x4096xf16>
    %1350 = tensor.empty(%dim_680) : tensor<1x?x11008xf16>
    %1351 = linalg.fill ins(%cst_740 : f16) outs(%1350 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1352 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_679, %cst_424, %cst_423 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_678, %1352 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1351 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_681 = tensor.dim %1353, %c1 : tensor<1x?x11008xf16>
    %1354 = tensor.empty(%dim_681) : tensor<1x?x11008xf16>
    %1355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1353 : tensor<1x?x11008xf16>) outs(%1354 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1355, %1353 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1354 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_682 = tensor.expand_shape %cst_98 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_682, %cst_422, %cst_421 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_678, %1357 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1351 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_683 = tensor.dim %1358, %c1 : tensor<1x?x11008xf16>
    %1359 = arith.cmpi eq, %dim_681, %dim_683 : index
    cf.assert %1359, "mismatched size for broadcast"
    %1360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1356, %1358 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1354 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_684 = tensor.expand_shape %1360 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_685 = tensor.expand_shape %cst_97 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_686 = tensor.dim %1360, %c1 : tensor<1x?x11008xf16>
    %1361 = tensor.empty(%dim_686) : tensor<1x?x4096xf16>
    %1362 = linalg.fill ins(%cst_740 : f16) outs(%1361 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_685, %cst_420, %cst_419 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_684, %1363 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1362 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_687 = tensor.dim %1364, %c1 : tensor<1x?x4096xf16>
    %1365 = arith.cmpi eq, %dim, %dim_687 : index
    cf.assert %1365, "mismatched size for broadcast"
    %1366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340, %1364 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1366 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1367 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1368 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1369 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1370 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1372 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1371 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1366, %1372 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1373 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_700, %1374 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_688 = tensor.expand_shape %1375 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_689 = tensor.expand_shape %cst_96 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_690 = tensor.dim %1375, %c1 : tensor<1x?x4096xf16>
    %1376 = tensor.empty(%dim_690) : tensor<1x?x4096xf16>
    %1377 = linalg.fill ins(%cst_740 : f16) outs(%1376 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_689, %cst_418, %cst_417 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_688, %1378 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1377 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_691 = tensor.expand_shape %cst_95 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_691, %cst_416, %cst_415 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_688, %1380 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1377 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_692 = tensor.expand_shape %cst_94 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_692, %cst_414, %cst_413 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_688, %1382 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1377 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_693 = tensor.cast %1379 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_694 = tensor.expand_shape %cast_693 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_694 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_695 = tensor.cast %1381 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_696 = tensor.expand_shape %cast_695 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_696 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_697 = tensor.cast %1383 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_698 = tensor.expand_shape %cast_697 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_698 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1384, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_699 = tensor.extract_slice %1384[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_700 = tensor.extract_slice %1384[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_700 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1388 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_699 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_701 = tensor.insert_slice %1389 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_702 = tensor.insert_slice %1390 into %inserted_slice_701[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_702, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1387, %1391 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1385, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_703 = tensor.extract_slice %1385[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_704 = tensor.extract_slice %1385[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1394 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_704 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1394 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1396 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_703 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_705 = tensor.insert_slice %1395 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_706 = tensor.insert_slice %1396 into %inserted_slice_705[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1397 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_706, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1398 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1393, %1397 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1398 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_707 = tensor.collapse_shape %1392 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_708 = tensor.collapse_shape %1399 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1400 = linalg.batch_matmul ins(%collapsed_707, %collapsed_708 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_709 = tensor.expand_shape %1400 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_709 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1402 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1401, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1403:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1402 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1402, %1403#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1404 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1405 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1405, %1406 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_710 = tensor.collapse_shape %1407 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_711 = tensor.collapse_shape %1386 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1408 = linalg.batch_matmul ins(%collapsed_710, %collapsed_711 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_712 = tensor.expand_shape %1408 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_712 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1410 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1409 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_713 = tensor.collapse_shape %1410 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_714 = tensor.expand_shape %collapsed_713 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_715 = tensor.expand_shape %cst_93 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_715, %cst_412, %cst_411 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1412 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_714, %1411 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1413 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1366, %1412 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1414 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1413 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1414 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1416 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1415 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1416 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1417 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1418 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1413, %1419 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1420 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_699, %1421 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_716 = tensor.expand_shape %1422 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_717 = tensor.expand_shape %cst_92 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_718 = tensor.dim %1422, %c1 : tensor<1x?x4096xf16>
    %1423 = tensor.empty(%dim_718) : tensor<1x?x11008xf16>
    %1424 = linalg.fill ins(%cst_740 : f16) outs(%1423 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_717, %cst_410, %cst_409 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_716, %1425 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1424 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_719 = tensor.dim %1426, %c1 : tensor<1x?x11008xf16>
    %1427 = tensor.empty(%dim_719) : tensor<1x?x11008xf16>
    %1428 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1426 : tensor<1x?x11008xf16>) outs(%1427 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1428, %1426 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1427 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_720 = tensor.expand_shape %cst_91 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_720, %cst_408, %cst_407 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_716, %1430 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1424 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_721 = tensor.dim %1431, %c1 : tensor<1x?x11008xf16>
    %1432 = arith.cmpi eq, %dim_719, %dim_721 : index
    cf.assert %1432, "mismatched size for broadcast"
    %1433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1429, %1431 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1427 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_722 = tensor.expand_shape %1433 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_723 = tensor.expand_shape %cst_90 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_724 = tensor.dim %1433, %c1 : tensor<1x?x11008xf16>
    %1434 = tensor.empty(%dim_724) : tensor<1x?x4096xf16>
    %1435 = linalg.fill ins(%cst_740 : f16) outs(%1434 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1436 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_723, %cst_406, %cst_405 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_722, %1436 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1435 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_725 = tensor.dim %1437, %c1 : tensor<1x?x4096xf16>
    %1438 = arith.cmpi eq, %dim, %dim_725 : index
    cf.assert %1438, "mismatched size for broadcast"
    %1439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1413, %1437 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1440 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1439 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1440 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1441 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1442 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1443 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1444 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1439, %1445 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1446 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1448 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_698, %1447 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_726 = tensor.expand_shape %1448 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_727 = tensor.expand_shape %cst_89 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_728 = tensor.dim %1448, %c1 : tensor<1x?x4096xf16>
    %1449 = tensor.empty(%dim_728) : tensor<1x?x4096xf16>
    %1450 = linalg.fill ins(%cst_740 : f16) outs(%1449 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1451 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_727, %cst_404, %cst_403 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1452 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_726, %1451 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1450 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_729 = tensor.expand_shape %cst_88 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_729, %cst_402, %cst_401 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1454 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_726, %1453 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1450 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_730 = tensor.expand_shape %cst_87 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_730, %cst_400, %cst_399 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_726, %1455 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1450 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_731 = tensor.cast %1452 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_732 = tensor.expand_shape %cast_731 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_732 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_733 = tensor.cast %1454 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_734 = tensor.expand_shape %cast_733 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_734 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_735 = tensor.cast %1456 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_736 = tensor.expand_shape %cast_735 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_736 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1457, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_737 = tensor.extract_slice %1457[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_738 = tensor.extract_slice %1457[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_738 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1461 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_737 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_739 = tensor.insert_slice %1462 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_740 = tensor.insert_slice %1463 into %inserted_slice_739[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_740, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1460, %1464 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1458, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_741 = tensor.extract_slice %1458[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_742 = tensor.extract_slice %1458[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1467 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_742 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1467 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_741 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_743 = tensor.insert_slice %1468 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_744 = tensor.insert_slice %1469 into %inserted_slice_743[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1470 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_744, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1471 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1466, %1470 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1472 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1471 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_745 = tensor.collapse_shape %1465 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_746 = tensor.collapse_shape %1472 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1473 = linalg.batch_matmul ins(%collapsed_745, %collapsed_746 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_747 = tensor.expand_shape %1473 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1474 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_747 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1475 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1474, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1476:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1475 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1475, %1476#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1477 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1478 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1478, %1479 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_748 = tensor.collapse_shape %1480 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_749 = tensor.collapse_shape %1459 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1481 = linalg.batch_matmul ins(%collapsed_748, %collapsed_749 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_750 = tensor.expand_shape %1481 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_750 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1482 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_751 = tensor.collapse_shape %1483 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_752 = tensor.expand_shape %collapsed_751 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_753 = tensor.expand_shape %cst_86 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_753, %cst_398, %cst_397 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1485 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_752, %1484 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1486 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1439, %1485 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1486 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1488 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1487 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1489 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1488 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1490 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1489 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1491 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1490 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1492 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1491 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1486, %1492 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1494 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1493 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1495 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_697, %1494 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_754 = tensor.expand_shape %1495 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_755 = tensor.expand_shape %cst_85 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_756 = tensor.dim %1495, %c1 : tensor<1x?x4096xf16>
    %1496 = tensor.empty(%dim_756) : tensor<1x?x11008xf16>
    %1497 = linalg.fill ins(%cst_740 : f16) outs(%1496 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_755, %cst_396, %cst_395 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_754, %1498 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1497 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_757 = tensor.dim %1499, %c1 : tensor<1x?x11008xf16>
    %1500 = tensor.empty(%dim_757) : tensor<1x?x11008xf16>
    %1501 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1499 : tensor<1x?x11008xf16>) outs(%1500 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1501, %1499 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1500 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_758 = tensor.expand_shape %cst_84 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_758, %cst_394, %cst_393 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_754, %1503 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1497 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_759 = tensor.dim %1504, %c1 : tensor<1x?x11008xf16>
    %1505 = arith.cmpi eq, %dim_757, %dim_759 : index
    cf.assert %1505, "mismatched size for broadcast"
    %1506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1502, %1504 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1500 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_760 = tensor.expand_shape %1506 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_761 = tensor.expand_shape %cst_83 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_762 = tensor.dim %1506, %c1 : tensor<1x?x11008xf16>
    %1507 = tensor.empty(%dim_762) : tensor<1x?x4096xf16>
    %1508 = linalg.fill ins(%cst_740 : f16) outs(%1507 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_761, %cst_392, %cst_391 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_760, %1509 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1508 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_763 = tensor.dim %1510, %c1 : tensor<1x?x4096xf16>
    %1511 = arith.cmpi eq, %dim, %dim_763 : index
    cf.assert %1511, "mismatched size for broadcast"
    %1512 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1486, %1510 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1513 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1512 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1514 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1513 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1515 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1514 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1515 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1516 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1517 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1512, %1518 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1519 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_696, %1520 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_764 = tensor.expand_shape %1521 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_765 = tensor.expand_shape %cst_82 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_766 = tensor.dim %1521, %c1 : tensor<1x?x4096xf16>
    %1522 = tensor.empty(%dim_766) : tensor<1x?x4096xf16>
    %1523 = linalg.fill ins(%cst_740 : f16) outs(%1522 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1524 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_765, %cst_390, %cst_389 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_764, %1524 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1523 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_767 = tensor.expand_shape %cst_81 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1526 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_767, %cst_388, %cst_387 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1527 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_764, %1526 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1523 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_768 = tensor.expand_shape %cst_80 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1528 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_768, %cst_386, %cst_385 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_764, %1528 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1523 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_769 = tensor.cast %1525 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_770 = tensor.expand_shape %cast_769 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_770 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_771 = tensor.cast %1527 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_772 = tensor.expand_shape %cast_771 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_772 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_773 = tensor.cast %1529 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_774 = tensor.expand_shape %cast_773 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1532 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_774 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1530, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_775 = tensor.extract_slice %1530[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_776 = tensor.extract_slice %1530[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_776 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1534 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_775 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_777 = tensor.insert_slice %1535 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_778 = tensor.insert_slice %1536 into %inserted_slice_777[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1537 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_778, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1538 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1533, %1537 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1531, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_779 = tensor.extract_slice %1531[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_780 = tensor.extract_slice %1531[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_780 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1540 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_779 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_781 = tensor.insert_slice %1541 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_782 = tensor.insert_slice %1542 into %inserted_slice_781[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1543 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_782, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1544 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1539, %1543 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1544 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_783 = tensor.collapse_shape %1538 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_784 = tensor.collapse_shape %1545 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1546 = linalg.batch_matmul ins(%collapsed_783, %collapsed_784 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_785 = tensor.expand_shape %1546 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_785 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1548 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1547, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1549:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1548 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1550 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1548, %1549#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1550 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1551 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1551, %1552 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_786 = tensor.collapse_shape %1553 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_787 = tensor.collapse_shape %1532 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1554 = linalg.batch_matmul ins(%collapsed_786, %collapsed_787 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_788 = tensor.expand_shape %1554 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_788 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1555 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_789 = tensor.collapse_shape %1556 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_790 = tensor.expand_shape %collapsed_789 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_791 = tensor.expand_shape %cst_79 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_791, %cst_384, %cst_383 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1558 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_790, %1557 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1559 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1512, %1558 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1559 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1560 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1562 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1561 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1562 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1563 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1565 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1564 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1559, %1565 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1566 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1568 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_695, %1567 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_792 = tensor.expand_shape %1568 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_793 = tensor.expand_shape %cst_78 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_794 = tensor.dim %1568, %c1 : tensor<1x?x4096xf16>
    %1569 = tensor.empty(%dim_794) : tensor<1x?x11008xf16>
    %1570 = linalg.fill ins(%cst_740 : f16) outs(%1569 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_793, %cst_382, %cst_381 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1572 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_792, %1571 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1570 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_795 = tensor.dim %1572, %c1 : tensor<1x?x11008xf16>
    %1573 = tensor.empty(%dim_795) : tensor<1x?x11008xf16>
    %1574 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1572 : tensor<1x?x11008xf16>) outs(%1573 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1574, %1572 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1573 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_796 = tensor.expand_shape %cst_77 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_796, %cst_380, %cst_379 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_792, %1576 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1570 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_797 = tensor.dim %1577, %c1 : tensor<1x?x11008xf16>
    %1578 = arith.cmpi eq, %dim_795, %dim_797 : index
    cf.assert %1578, "mismatched size for broadcast"
    %1579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1575, %1577 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1573 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_798 = tensor.expand_shape %1579 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_799 = tensor.expand_shape %cst_76 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_800 = tensor.dim %1579, %c1 : tensor<1x?x11008xf16>
    %1580 = tensor.empty(%dim_800) : tensor<1x?x4096xf16>
    %1581 = linalg.fill ins(%cst_740 : f16) outs(%1580 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_799, %cst_378, %cst_377 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_798, %1582 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1581 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_801 = tensor.dim %1583, %c1 : tensor<1x?x4096xf16>
    %1584 = arith.cmpi eq, %dim, %dim_801 : index
    cf.assert %1584, "mismatched size for broadcast"
    %1585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1559, %1583 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1586 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1585 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1586 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1588 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1587 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1589 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1588 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1590 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1589 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1591 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1590 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1592 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1585, %1591 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1593 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1592 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_694, %1593 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_802 = tensor.expand_shape %1594 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_803 = tensor.expand_shape %cst_75 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_804 = tensor.dim %1594, %c1 : tensor<1x?x4096xf16>
    %1595 = tensor.empty(%dim_804) : tensor<1x?x4096xf16>
    %1596 = linalg.fill ins(%cst_740 : f16) outs(%1595 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_803, %cst_376, %cst_375 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_802, %1597 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1596 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_805 = tensor.expand_shape %cst_74 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_805, %cst_374, %cst_373 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1600 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_802, %1599 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1596 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_806 = tensor.expand_shape %cst_73 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_806, %cst_372, %cst_371 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_802, %1601 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1596 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_807 = tensor.cast %1598 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_808 = tensor.expand_shape %cast_807 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_808 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_809 = tensor.cast %1600 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_810 = tensor.expand_shape %cast_809 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1604 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_810 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_811 = tensor.cast %1602 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_812 = tensor.expand_shape %cast_811 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1605 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_812 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1606 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1603, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_813 = tensor.extract_slice %1603[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_814 = tensor.extract_slice %1603[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_814 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1608 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1607 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_813 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_815 = tensor.insert_slice %1608 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_816 = tensor.insert_slice %1609 into %inserted_slice_815[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1610 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_816, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1606, %1610 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1612 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1604, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_817 = tensor.extract_slice %1604[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_818 = tensor.extract_slice %1604[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1613 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_818 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1613 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_817 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_819 = tensor.insert_slice %1614 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_820 = tensor.insert_slice %1615 into %inserted_slice_819[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1616 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_820, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1612, %1616 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1617 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_821 = tensor.collapse_shape %1611 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_822 = tensor.collapse_shape %1618 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1619 = linalg.batch_matmul ins(%collapsed_821, %collapsed_822 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_823 = tensor.expand_shape %1619 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1620 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_823 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1620, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1622:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1621 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1621, %1622#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1624 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1623 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1624 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1626 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1624, %1625 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_824 = tensor.collapse_shape %1626 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_825 = tensor.collapse_shape %1605 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1627 = linalg.batch_matmul ins(%collapsed_824, %collapsed_825 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_826 = tensor.expand_shape %1627 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_826 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1628 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_827 = tensor.collapse_shape %1629 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_828 = tensor.expand_shape %collapsed_827 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_829 = tensor.expand_shape %cst_72 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1630 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_829, %cst_370, %cst_369 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_828, %1630 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1632 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1585, %1631 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1632 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1633 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1635 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1634 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1636 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1635 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1636 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1637 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1632, %1638 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1639 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1641 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_693, %1640 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_830 = tensor.expand_shape %1641 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_831 = tensor.expand_shape %cst_71 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_832 = tensor.dim %1641, %c1 : tensor<1x?x4096xf16>
    %1642 = tensor.empty(%dim_832) : tensor<1x?x11008xf16>
    %1643 = linalg.fill ins(%cst_740 : f16) outs(%1642 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_831, %cst_368, %cst_367 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_830, %1644 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1643 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_833 = tensor.dim %1645, %c1 : tensor<1x?x11008xf16>
    %1646 = tensor.empty(%dim_833) : tensor<1x?x11008xf16>
    %1647 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1645 : tensor<1x?x11008xf16>) outs(%1646 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1648 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1647, %1645 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1646 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_834 = tensor.expand_shape %cst_70 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_834, %cst_366, %cst_365 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1650 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_830, %1649 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1643 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_835 = tensor.dim %1650, %c1 : tensor<1x?x11008xf16>
    %1651 = arith.cmpi eq, %dim_833, %dim_835 : index
    cf.assert %1651, "mismatched size for broadcast"
    %1652 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1648, %1650 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1646 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_836 = tensor.expand_shape %1652 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_837 = tensor.expand_shape %cst_69 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_838 = tensor.dim %1652, %c1 : tensor<1x?x11008xf16>
    %1653 = tensor.empty(%dim_838) : tensor<1x?x4096xf16>
    %1654 = linalg.fill ins(%cst_740 : f16) outs(%1653 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_837, %cst_364, %cst_363 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_836, %1655 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1654 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_839 = tensor.dim %1656, %c1 : tensor<1x?x4096xf16>
    %1657 = arith.cmpi eq, %dim, %dim_839 : index
    cf.assert %1657, "mismatched size for broadcast"
    %1658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1632, %1656 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1658 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1659 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1660 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1661 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1663 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1662 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1664 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1663 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1658, %1664 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1666 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1665 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1667 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_692, %1666 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_840 = tensor.expand_shape %1667 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_841 = tensor.expand_shape %cst_68 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_842 = tensor.dim %1667, %c1 : tensor<1x?x4096xf16>
    %1668 = tensor.empty(%dim_842) : tensor<1x?x4096xf16>
    %1669 = linalg.fill ins(%cst_740 : f16) outs(%1668 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1670 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_841, %cst_362, %cst_361 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_840, %1670 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1669 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_843 = tensor.expand_shape %cst_67 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_843, %cst_360, %cst_359 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_840, %1672 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1669 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_844 = tensor.expand_shape %cst_66 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_844, %cst_358, %cst_357 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_840, %1674 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1669 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_845 = tensor.cast %1671 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_846 = tensor.expand_shape %cast_845 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_846 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_847 = tensor.cast %1673 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_848 = tensor.expand_shape %cast_847 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_848 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_849 = tensor.cast %1675 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_850 = tensor.expand_shape %cast_849 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1678 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_850 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1676, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_851 = tensor.extract_slice %1676[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_852 = tensor.extract_slice %1676[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_852 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1681 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1680 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_851 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_853 = tensor.insert_slice %1681 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_854 = tensor.insert_slice %1682 into %inserted_slice_853[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_854, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1684 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1679, %1683 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1685 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1677, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_855 = tensor.extract_slice %1677[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_856 = tensor.extract_slice %1677[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1686 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_856 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1687 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1686 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1688 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_855 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_857 = tensor.insert_slice %1687 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_858 = tensor.insert_slice %1688 into %inserted_slice_857[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1689 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_858, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1690 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1685, %1689 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1691 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1690 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_859 = tensor.collapse_shape %1684 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_860 = tensor.collapse_shape %1691 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1692 = linalg.batch_matmul ins(%collapsed_859, %collapsed_860 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_861 = tensor.expand_shape %1692 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_861 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1694 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1693, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1695:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1694 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1694, %1695#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1696 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1697 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1697, %1698 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_862 = tensor.collapse_shape %1699 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_863 = tensor.collapse_shape %1678 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1700 = linalg.batch_matmul ins(%collapsed_862, %collapsed_863 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_864 = tensor.expand_shape %1700 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_864 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1702 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1701 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_865 = tensor.collapse_shape %1702 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_866 = tensor.expand_shape %collapsed_865 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_867 = tensor.expand_shape %cst_65 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1703 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_867, %cst_356, %cst_355 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1704 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_866, %1703 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1705 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1658, %1704 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1706 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1705 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1707 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1706 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1708 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1707 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1708 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1710 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1709 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1711 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1710 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1705, %1711 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1712 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1714 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_691, %1713 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_868 = tensor.expand_shape %1714 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_869 = tensor.expand_shape %cst_64 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_870 = tensor.dim %1714, %c1 : tensor<1x?x4096xf16>
    %1715 = tensor.empty(%dim_870) : tensor<1x?x11008xf16>
    %1716 = linalg.fill ins(%cst_740 : f16) outs(%1715 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_869, %cst_354, %cst_353 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_868, %1717 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1716 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_871 = tensor.dim %1718, %c1 : tensor<1x?x11008xf16>
    %1719 = tensor.empty(%dim_871) : tensor<1x?x11008xf16>
    %1720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1718 : tensor<1x?x11008xf16>) outs(%1719 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1720, %1718 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1719 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_872 = tensor.expand_shape %cst_63 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_872, %cst_352, %cst_351 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_868, %1722 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1716 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_873 = tensor.dim %1723, %c1 : tensor<1x?x11008xf16>
    %1724 = arith.cmpi eq, %dim_871, %dim_873 : index
    cf.assert %1724, "mismatched size for broadcast"
    %1725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1721, %1723 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1719 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_874 = tensor.expand_shape %1725 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_875 = tensor.expand_shape %cst_62 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_876 = tensor.dim %1725, %c1 : tensor<1x?x11008xf16>
    %1726 = tensor.empty(%dim_876) : tensor<1x?x4096xf16>
    %1727 = linalg.fill ins(%cst_740 : f16) outs(%1726 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1728 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_875, %cst_350, %cst_349 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_874, %1728 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1727 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_877 = tensor.dim %1729, %c1 : tensor<1x?x4096xf16>
    %1730 = arith.cmpi eq, %dim, %dim_877 : index
    cf.assert %1730, "mismatched size for broadcast"
    %1731 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1705, %1729 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1731 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1732 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1733 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1734 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1735 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1736 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1731, %1737 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1738 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1740 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_690, %1739 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_878 = tensor.expand_shape %1740 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_879 = tensor.expand_shape %cst_61 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_880 = tensor.dim %1740, %c1 : tensor<1x?x4096xf16>
    %1741 = tensor.empty(%dim_880) : tensor<1x?x4096xf16>
    %1742 = linalg.fill ins(%cst_740 : f16) outs(%1741 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1743 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_879, %cst_348, %cst_347 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1744 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_878, %1743 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1742 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_881 = tensor.expand_shape %cst_60 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_881, %cst_346, %cst_345 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1746 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_878, %1745 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1742 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_882 = tensor.expand_shape %cst_59 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_882, %cst_344, %cst_343 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_878, %1747 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1742 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_883 = tensor.cast %1744 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_884 = tensor.expand_shape %cast_883 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_884 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_885 = tensor.cast %1746 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_886 = tensor.expand_shape %cast_885 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_886 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_887 = tensor.cast %1748 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_888 = tensor.expand_shape %cast_887 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_888 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1749, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_889 = tensor.extract_slice %1749[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_890 = tensor.extract_slice %1749[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_890 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1754 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1753 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_889 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_891 = tensor.insert_slice %1754 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_892 = tensor.insert_slice %1755 into %inserted_slice_891[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_892, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1752, %1756 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1750, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_893 = tensor.extract_slice %1750[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_894 = tensor.extract_slice %1750[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_894 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1759 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_893 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_895 = tensor.insert_slice %1760 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_896 = tensor.insert_slice %1761 into %inserted_slice_895[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1762 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_896, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1758, %1762 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1764 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1763 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_897 = tensor.collapse_shape %1757 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_898 = tensor.collapse_shape %1764 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1765 = linalg.batch_matmul ins(%collapsed_897, %collapsed_898 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_899 = tensor.expand_shape %1765 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1766 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_899 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1767 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1766, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1768:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1767 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1767, %1768#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1770 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1769 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1770 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1770, %1771 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_900 = tensor.collapse_shape %1772 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_901 = tensor.collapse_shape %1751 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1773 = linalg.batch_matmul ins(%collapsed_900, %collapsed_901 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_902 = tensor.expand_shape %1773 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_902 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1774 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_903 = tensor.collapse_shape %1775 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_904 = tensor.expand_shape %collapsed_903 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_905 = tensor.expand_shape %cst_58 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_905, %cst_342, %cst_341 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_904, %1776 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1731, %1777 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1779 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1779 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1781 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1780 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1782 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1781 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1783 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1782 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1784 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1783 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1785 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778, %1784 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1786 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1785 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1787 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_689, %1786 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_906 = tensor.expand_shape %1787 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_907 = tensor.expand_shape %cst_57 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_908 = tensor.dim %1787, %c1 : tensor<1x?x4096xf16>
    %1788 = tensor.empty(%dim_908) : tensor<1x?x11008xf16>
    %1789 = linalg.fill ins(%cst_740 : f16) outs(%1788 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_907, %cst_340, %cst_339 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_906, %1790 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1789 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_909 = tensor.dim %1791, %c1 : tensor<1x?x11008xf16>
    %1792 = tensor.empty(%dim_909) : tensor<1x?x11008xf16>
    %1793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1791 : tensor<1x?x11008xf16>) outs(%1792 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1793, %1791 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1792 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_910 = tensor.expand_shape %cst_56 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_910, %cst_338, %cst_337 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_906, %1795 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1789 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_911 = tensor.dim %1796, %c1 : tensor<1x?x11008xf16>
    %1797 = arith.cmpi eq, %dim_909, %dim_911 : index
    cf.assert %1797, "mismatched size for broadcast"
    %1798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1794, %1796 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1792 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_912 = tensor.expand_shape %1798 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_913 = tensor.expand_shape %cst_55 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_914 = tensor.dim %1798, %c1 : tensor<1x?x11008xf16>
    %1799 = tensor.empty(%dim_914) : tensor<1x?x4096xf16>
    %1800 = linalg.fill ins(%cst_740 : f16) outs(%1799 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1801 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_913, %cst_336, %cst_335 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1802 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_912, %1801 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1800 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_915 = tensor.dim %1802, %c1 : tensor<1x?x4096xf16>
    %1803 = arith.cmpi eq, %dim, %dim_915 : index
    cf.assert %1803, "mismatched size for broadcast"
    %1804 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778, %1802 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1805 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1804 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1806 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1805 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1807 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1806 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1808 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1807 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1809 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1808 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1809 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1804, %1810 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1811 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_688, %1812 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_916 = tensor.expand_shape %1813 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_917 = tensor.expand_shape %cst_54 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_918 = tensor.dim %1813, %c1 : tensor<1x?x4096xf16>
    %1814 = tensor.empty(%dim_918) : tensor<1x?x4096xf16>
    %1815 = linalg.fill ins(%cst_740 : f16) outs(%1814 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1816 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_917, %cst_334, %cst_333 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_916, %1816 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1815 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_919 = tensor.expand_shape %cst_53 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_919, %cst_332, %cst_331 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1819 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_916, %1818 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1815 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_920 = tensor.expand_shape %cst_52 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1820 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_920, %cst_330, %cst_329 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_916, %1820 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1815 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_921 = tensor.cast %1817 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_922 = tensor.expand_shape %cast_921 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1822 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_922 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_923 = tensor.cast %1819 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_924 = tensor.expand_shape %cast_923 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_924 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_925 = tensor.cast %1821 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_926 = tensor.expand_shape %cast_925 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1824 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_926 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1822, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_927 = tensor.extract_slice %1822[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_928 = tensor.extract_slice %1822[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1826 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_928 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1826 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1828 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_927 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_929 = tensor.insert_slice %1827 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_930 = tensor.insert_slice %1828 into %inserted_slice_929[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_930, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1825, %1829 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1823, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_931 = tensor.extract_slice %1823[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_932 = tensor.extract_slice %1823[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1832 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_932 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1832 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_931 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_933 = tensor.insert_slice %1833 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_934 = tensor.insert_slice %1834 into %inserted_slice_933[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_934, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1831, %1835 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1836 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_935 = tensor.collapse_shape %1830 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_936 = tensor.collapse_shape %1837 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1838 = linalg.batch_matmul ins(%collapsed_935, %collapsed_936 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_937 = tensor.expand_shape %1838 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_937 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1840 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1839, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1841:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1840 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1842 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1840, %1841#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1843 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1842 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1844 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1843 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1843, %1844 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_938 = tensor.collapse_shape %1845 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_939 = tensor.collapse_shape %1824 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1846 = linalg.batch_matmul ins(%collapsed_938, %collapsed_939 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_940 = tensor.expand_shape %1846 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_940 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1848 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1847 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_941 = tensor.collapse_shape %1848 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_942 = tensor.expand_shape %collapsed_941 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_943 = tensor.expand_shape %cst_51 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_943, %cst_328, %cst_327 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_942, %1849 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1804, %1850 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1852 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1853 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1854 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1855 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1856 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851, %1857 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1859 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1858 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_687, %1859 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_944 = tensor.expand_shape %1860 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_945 = tensor.expand_shape %cst_50 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_946 = tensor.dim %1860, %c1 : tensor<1x?x4096xf16>
    %1861 = tensor.empty(%dim_946) : tensor<1x?x11008xf16>
    %1862 = linalg.fill ins(%cst_740 : f16) outs(%1861 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1863 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_945, %cst_326, %cst_325 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1864 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_944, %1863 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1862 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_947 = tensor.dim %1864, %c1 : tensor<1x?x11008xf16>
    %1865 = tensor.empty(%dim_947) : tensor<1x?x11008xf16>
    %1866 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1864 : tensor<1x?x11008xf16>) outs(%1865 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1867 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1866, %1864 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1865 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_948 = tensor.expand_shape %cst_49 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_948, %cst_324, %cst_323 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_944, %1868 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1862 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_949 = tensor.dim %1869, %c1 : tensor<1x?x11008xf16>
    %1870 = arith.cmpi eq, %dim_947, %dim_949 : index
    cf.assert %1870, "mismatched size for broadcast"
    %1871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1867, %1869 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1865 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_950 = tensor.expand_shape %1871 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_951 = tensor.expand_shape %cst_48 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_952 = tensor.dim %1871, %c1 : tensor<1x?x11008xf16>
    %1872 = tensor.empty(%dim_952) : tensor<1x?x4096xf16>
    %1873 = linalg.fill ins(%cst_740 : f16) outs(%1872 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_951, %cst_322, %cst_321 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_950, %1874 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1873 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_953 = tensor.dim %1875, %c1 : tensor<1x?x4096xf16>
    %1876 = arith.cmpi eq, %dim, %dim_953 : index
    cf.assert %1876, "mismatched size for broadcast"
    %1877 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851, %1875 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1878 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1877 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1879 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1878 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1880 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1879 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1881 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1880 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1882 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1881 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1883 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1882 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1884 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1877, %1883 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1884 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1886 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_686, %1885 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_954 = tensor.expand_shape %1886 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_955 = tensor.expand_shape %cst_47 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_956 = tensor.dim %1886, %c1 : tensor<1x?x4096xf16>
    %1887 = tensor.empty(%dim_956) : tensor<1x?x4096xf16>
    %1888 = linalg.fill ins(%cst_740 : f16) outs(%1887 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1889 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_955, %cst_320, %cst_319 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_954, %1889 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1888 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_957 = tensor.expand_shape %cst_46 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_957, %cst_318, %cst_317 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1892 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_954, %1891 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1888 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_958 = tensor.expand_shape %cst_45 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_958, %cst_316, %cst_315 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_954, %1893 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1888 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_959 = tensor.cast %1890 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_960 = tensor.expand_shape %cast_959 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_960 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_961 = tensor.cast %1892 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_962 = tensor.expand_shape %cast_961 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1896 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_962 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_963 = tensor.cast %1894 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_964 = tensor.expand_shape %cast_963 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1897 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_964 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1895, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_965 = tensor.extract_slice %1895[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_966 = tensor.extract_slice %1895[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_966 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1900 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1899 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_965 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_967 = tensor.insert_slice %1900 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_968 = tensor.insert_slice %1901 into %inserted_slice_967[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1902 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_968, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1903 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1898, %1902 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1904 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1896, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_969 = tensor.extract_slice %1896[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_970 = tensor.extract_slice %1896[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1905 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_970 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1906 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1905 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_969 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_971 = tensor.insert_slice %1906 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_972 = tensor.insert_slice %1907 into %inserted_slice_971[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_972, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1904, %1908 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1909 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_973 = tensor.collapse_shape %1903 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_974 = tensor.collapse_shape %1910 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1911 = linalg.batch_matmul ins(%collapsed_973, %collapsed_974 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_975 = tensor.expand_shape %1911 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_975 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1912, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1914:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1913 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1913, %1914#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1916 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1915 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1917 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1916 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1918 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1916, %1917 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_976 = tensor.collapse_shape %1918 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_977 = tensor.collapse_shape %1897 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1919 = linalg.batch_matmul ins(%collapsed_976, %collapsed_977 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_978 = tensor.expand_shape %1919 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1920 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_978 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1920 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_979 = tensor.collapse_shape %1921 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_980 = tensor.expand_shape %collapsed_979 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_981 = tensor.expand_shape %cst_44 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1922 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_981, %cst_314, %cst_313 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1923 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_980, %1922 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1924 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1877, %1923 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1924 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1925 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1927 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1926 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1927 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1928 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1930 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1929 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1924, %1930 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1931 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_685, %1932 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_982 = tensor.expand_shape %1933 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_983 = tensor.expand_shape %cst_43 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_984 = tensor.dim %1933, %c1 : tensor<1x?x4096xf16>
    %1934 = tensor.empty(%dim_984) : tensor<1x?x11008xf16>
    %1935 = linalg.fill ins(%cst_740 : f16) outs(%1934 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %1936 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_983, %cst_312, %cst_311 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_982, %1936 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1935 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_985 = tensor.dim %1937, %c1 : tensor<1x?x11008xf16>
    %1938 = tensor.empty(%dim_985) : tensor<1x?x11008xf16>
    %1939 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1937 : tensor<1x?x11008xf16>) outs(%1938 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %1940 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1939, %1937 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1938 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_986 = tensor.expand_shape %cst_42 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_986, %cst_310, %cst_309 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %1942 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_982, %1941 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%1935 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_987 = tensor.dim %1942, %c1 : tensor<1x?x11008xf16>
    %1943 = arith.cmpi eq, %dim_985, %dim_987 : index
    cf.assert %1943, "mismatched size for broadcast"
    %1944 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1940, %1942 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%1938 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_988 = tensor.expand_shape %1944 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_989 = tensor.expand_shape %cst_41 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_990 = tensor.dim %1944, %c1 : tensor<1x?x11008xf16>
    %1945 = tensor.empty(%dim_990) : tensor<1x?x4096xf16>
    %1946 = linalg.fill ins(%cst_740 : f16) outs(%1945 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_989, %cst_308, %cst_307 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %1948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_988, %1947 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%1946 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_991 = tensor.dim %1948, %c1 : tensor<1x?x4096xf16>
    %1949 = arith.cmpi eq, %dim, %dim_991 : index
    cf.assert %1949, "mismatched size for broadcast"
    %1950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1924, %1948 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1950 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1951 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1952 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1954 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1953 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1955 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1954 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %1956 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1955 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %1957 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1950, %1956 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1958 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1957 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %1959 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_684, %1958 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_992 = tensor.expand_shape %1959 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_993 = tensor.expand_shape %cst_40 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_994 = tensor.dim %1959, %c1 : tensor<1x?x4096xf16>
    %1960 = tensor.empty(%dim_994) : tensor<1x?x4096xf16>
    %1961 = linalg.fill ins(%cst_740 : f16) outs(%1960 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %1962 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_993, %cst_306, %cst_305 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_992, %1962 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1961 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_995 = tensor.expand_shape %cst_39 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1964 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_995, %cst_304, %cst_303 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1965 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_992, %1964 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1961 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_996 = tensor.expand_shape %cst_38 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_996, %cst_302, %cst_301 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_992, %1966 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%1961 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_997 = tensor.cast %1963 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_998 = tensor.expand_shape %cast_997 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_998 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_999 = tensor.cast %1965 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1000 = tensor.expand_shape %cast_999 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1000 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1001 = tensor.cast %1967 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1002 = tensor.expand_shape %cast_1001 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %1970 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1002 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1968, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1003 = tensor.extract_slice %1968[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1004 = tensor.extract_slice %1968[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1004 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1972 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1003 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1005 = tensor.insert_slice %1973 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1006 = tensor.insert_slice %1974 into %inserted_slice_1005[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1006, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1976 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1971, %1975 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1977 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1969, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1007 = tensor.extract_slice %1969[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1008 = tensor.extract_slice %1969[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %1978 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1008 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %1979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1978 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %1980 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1007 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1009 = tensor.insert_slice %1979 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1010 = tensor.insert_slice %1980 into %inserted_slice_1009[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %1981 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1010, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1982 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1977, %1981 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %1983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1982 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1011 = tensor.collapse_shape %1976 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_1012 = tensor.collapse_shape %1983 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1984 = linalg.batch_matmul ins(%collapsed_1011, %collapsed_1012 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_1013 = tensor.expand_shape %1984 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %1985 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1013 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %1986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1985, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1987:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1986 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %1988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1986, %1987#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1988 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %1990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1989 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %1991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1989, %1990 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_1014 = tensor.collapse_shape %1991 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_1015 = tensor.collapse_shape %1970 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1992 = linalg.batch_matmul ins(%collapsed_1014, %collapsed_1015 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_1016 = tensor.expand_shape %1992 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %1993 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1016 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %1994 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1993 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_1017 = tensor.collapse_shape %1994 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_1018 = tensor.expand_shape %collapsed_1017 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1019 = tensor.expand_shape %cst_37 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1019, %cst_300, %cst_299 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %1996 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1018, %1995 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %1997 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1950, %1996 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %1998 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1997 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %1999 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1998 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2000 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1999 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2000 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2002 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2001 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2002 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2004 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1997, %2003 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2005 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2004 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_683, %2005 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1020 = tensor.expand_shape %2006 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1021 = tensor.expand_shape %cst_36 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_1022 = tensor.dim %2006, %c1 : tensor<1x?x4096xf16>
    %2007 = tensor.empty(%dim_1022) : tensor<1x?x11008xf16>
    %2008 = linalg.fill ins(%cst_740 : f16) outs(%2007 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %2009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1021, %cst_298, %cst_297 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1020, %2009 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2008 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1023 = tensor.dim %2010, %c1 : tensor<1x?x11008xf16>
    %2011 = tensor.empty(%dim_1023) : tensor<1x?x11008xf16>
    %2012 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2010 : tensor<1x?x11008xf16>) outs(%2011 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %2013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2012, %2010 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2011 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1024 = tensor.expand_shape %cst_35 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1024, %cst_296, %cst_295 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2015 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1020, %2014 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2008 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1025 = tensor.dim %2015, %c1 : tensor<1x?x11008xf16>
    %2016 = arith.cmpi eq, %dim_1023, %dim_1025 : index
    cf.assert %2016, "mismatched size for broadcast"
    %2017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2013, %2015 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2011 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1026 = tensor.expand_shape %2017 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_1027 = tensor.expand_shape %cst_34 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_1028 = tensor.dim %2017, %c1 : tensor<1x?x11008xf16>
    %2018 = tensor.empty(%dim_1028) : tensor<1x?x4096xf16>
    %2019 = linalg.fill ins(%cst_740 : f16) outs(%2018 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2020 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1027, %cst_294, %cst_293 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %2021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1026, %2020 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%2019 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_1029 = tensor.dim %2021, %c1 : tensor<1x?x4096xf16>
    %2022 = arith.cmpi eq, %dim, %dim_1029 : index
    cf.assert %2022, "mismatched size for broadcast"
    %2023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1997, %2021 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2023 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2024 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2025 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2027 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2026 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2028 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2027 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2028 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2023, %2029 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2030 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2032 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_682, %2031 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1030 = tensor.expand_shape %2032 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1031 = tensor.expand_shape %cst_33 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_1032 = tensor.dim %2032, %c1 : tensor<1x?x4096xf16>
    %2033 = tensor.empty(%dim_1032) : tensor<1x?x4096xf16>
    %2034 = linalg.fill ins(%cst_740 : f16) outs(%2033 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2035 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1031, %cst_292, %cst_291 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1030, %2035 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2034 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1033 = tensor.expand_shape %cst_32 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1033, %cst_290, %cst_289 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2038 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1030, %2037 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2034 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1034 = tensor.expand_shape %cst_31 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1034, %cst_288, %cst_287 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2040 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1030, %2039 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2034 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_1035 = tensor.cast %2036 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1036 = tensor.expand_shape %cast_1035 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1036 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1037 = tensor.cast %2038 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1038 = tensor.expand_shape %cast_1037 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1038 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1039 = tensor.cast %2040 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1040 = tensor.expand_shape %cast_1039 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2043 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1040 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2044 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2041, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1041 = tensor.extract_slice %2041[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1042 = tensor.extract_slice %2041[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1042 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2045 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1041 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1043 = tensor.insert_slice %2046 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1044 = tensor.insert_slice %2047 into %inserted_slice_1043[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2048 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1044, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2044, %2048 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2042, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1045 = tensor.extract_slice %2042[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1046 = tensor.extract_slice %2042[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1046 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2051 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1045 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1047 = tensor.insert_slice %2052 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1048 = tensor.insert_slice %2053 into %inserted_slice_1047[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2054 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1048, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2055 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2050, %2054 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2056 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2055 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1049 = tensor.collapse_shape %2049 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_1050 = tensor.collapse_shape %2056 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2057 = linalg.batch_matmul ins(%collapsed_1049, %collapsed_1050 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_1051 = tensor.expand_shape %2057 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %2058 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1051 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %2059 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2058, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2060:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2059 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %2061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2059, %2060#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2062 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2061 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2062 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %2064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2062, %2063 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_1052 = tensor.collapse_shape %2064 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_1053 = tensor.collapse_shape %2043 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2065 = linalg.batch_matmul ins(%collapsed_1052, %collapsed_1053 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_1054 = tensor.expand_shape %2065 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %2066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1054 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %2067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2066 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_1055 = tensor.collapse_shape %2067 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_1056 = tensor.expand_shape %collapsed_1055 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1057 = tensor.expand_shape %cst_30 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1057, %cst_286, %cst_285 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2069 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1056, %2068 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %2070 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2023, %2069 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2070 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2071 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2073 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2072 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2074 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2073 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2075 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2074 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2076 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2075 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2070, %2076 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2078 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2077 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2079 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_681, %2078 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1058 = tensor.expand_shape %2079 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1059 = tensor.expand_shape %cst_29 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_1060 = tensor.dim %2079, %c1 : tensor<1x?x4096xf16>
    %2080 = tensor.empty(%dim_1060) : tensor<1x?x11008xf16>
    %2081 = linalg.fill ins(%cst_740 : f16) outs(%2080 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %2082 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1059, %cst_284, %cst_283 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2083 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1058, %2082 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2081 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1061 = tensor.dim %2083, %c1 : tensor<1x?x11008xf16>
    %2084 = tensor.empty(%dim_1061) : tensor<1x?x11008xf16>
    %2085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2083 : tensor<1x?x11008xf16>) outs(%2084 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %2086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2085, %2083 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2084 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1062 = tensor.expand_shape %cst_28 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1062, %cst_282, %cst_281 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1058, %2087 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2081 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1063 = tensor.dim %2088, %c1 : tensor<1x?x11008xf16>
    %2089 = arith.cmpi eq, %dim_1061, %dim_1063 : index
    cf.assert %2089, "mismatched size for broadcast"
    %2090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2086, %2088 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2084 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1064 = tensor.expand_shape %2090 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_1065 = tensor.expand_shape %cst_27 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_1066 = tensor.dim %2090, %c1 : tensor<1x?x11008xf16>
    %2091 = tensor.empty(%dim_1066) : tensor<1x?x4096xf16>
    %2092 = linalg.fill ins(%cst_740 : f16) outs(%2091 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1065, %cst_280, %cst_279 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %2094 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1064, %2093 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%2092 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_1067 = tensor.dim %2094, %c1 : tensor<1x?x4096xf16>
    %2095 = arith.cmpi eq, %dim, %dim_1067 : index
    cf.assert %2095, "mismatched size for broadcast"
    %2096 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2070, %2094 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2097 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2096 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2098 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2097 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2099 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2098 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2099 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2100 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2101 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2096, %2102 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2103 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_680, %2104 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1068 = tensor.expand_shape %2105 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1069 = tensor.expand_shape %cst_26 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_1070 = tensor.dim %2105, %c1 : tensor<1x?x4096xf16>
    %2106 = tensor.empty(%dim_1070) : tensor<1x?x4096xf16>
    %2107 = linalg.fill ins(%cst_740 : f16) outs(%2106 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2108 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1069, %cst_278, %cst_277 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1068, %2108 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2107 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1071 = tensor.expand_shape %cst_25 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1071, %cst_276, %cst_275 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2111 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1068, %2110 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2107 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1072 = tensor.expand_shape %cst_24 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1072, %cst_274, %cst_273 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1068, %2112 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2107 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_1073 = tensor.cast %2109 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1074 = tensor.expand_shape %cast_1073 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1074 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1075 = tensor.cast %2111 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1076 = tensor.expand_shape %cast_1075 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1076 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1077 = tensor.cast %2113 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1078 = tensor.expand_shape %cast_1077 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1078 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2114, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1079 = tensor.extract_slice %2114[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1080 = tensor.extract_slice %2114[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1080 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2118 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2120 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1079 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1081 = tensor.insert_slice %2119 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1082 = tensor.insert_slice %2120 into %inserted_slice_1081[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1082, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2117, %2121 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2115, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1083 = tensor.extract_slice %2115[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1084 = tensor.extract_slice %2115[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1084 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2124 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1083 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1085 = tensor.insert_slice %2125 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1086 = tensor.insert_slice %2126 into %inserted_slice_1085[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1086, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2123, %2127 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2128 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1087 = tensor.collapse_shape %2122 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_1088 = tensor.collapse_shape %2129 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2130 = linalg.batch_matmul ins(%collapsed_1087, %collapsed_1088 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_1089 = tensor.expand_shape %2130 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %2131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1089 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %2132 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2131, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2133:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2132 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %2134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2132, %2133#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2134 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2136 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2135 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %2137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2135, %2136 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_1090 = tensor.collapse_shape %2137 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_1091 = tensor.collapse_shape %2116 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2138 = linalg.batch_matmul ins(%collapsed_1090, %collapsed_1091 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_1092 = tensor.expand_shape %2138 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %2139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1092 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %2140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2139 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_1093 = tensor.collapse_shape %2140 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_1094 = tensor.expand_shape %collapsed_1093 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1095 = tensor.expand_shape %cst_23 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1095, %cst_272, %cst_271 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1094, %2141 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %2143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2096, %2142 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2143 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2144 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2145 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2146 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2147 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2148 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2143, %2149 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2150 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_679, %2151 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1096 = tensor.expand_shape %2152 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1097 = tensor.expand_shape %cst_22 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_1098 = tensor.dim %2152, %c1 : tensor<1x?x4096xf16>
    %2153 = tensor.empty(%dim_1098) : tensor<1x?x11008xf16>
    %2154 = linalg.fill ins(%cst_740 : f16) outs(%2153 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %2155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1097, %cst_270, %cst_269 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1096, %2155 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2154 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1099 = tensor.dim %2156, %c1 : tensor<1x?x11008xf16>
    %2157 = tensor.empty(%dim_1099) : tensor<1x?x11008xf16>
    %2158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2156 : tensor<1x?x11008xf16>) outs(%2157 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %2159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2158, %2156 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2157 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1100 = tensor.expand_shape %cst_21 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1100, %cst_268, %cst_267 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1096, %2160 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2154 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1101 = tensor.dim %2161, %c1 : tensor<1x?x11008xf16>
    %2162 = arith.cmpi eq, %dim_1099, %dim_1101 : index
    cf.assert %2162, "mismatched size for broadcast"
    %2163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2159, %2161 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2157 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1102 = tensor.expand_shape %2163 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_1103 = tensor.expand_shape %cst_20 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_1104 = tensor.dim %2163, %c1 : tensor<1x?x11008xf16>
    %2164 = tensor.empty(%dim_1104) : tensor<1x?x4096xf16>
    %2165 = linalg.fill ins(%cst_740 : f16) outs(%2164 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1103, %cst_266, %cst_265 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %2167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1102, %2166 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%2165 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_1105 = tensor.dim %2167, %c1 : tensor<1x?x4096xf16>
    %2168 = arith.cmpi eq, %dim, %dim_1105 : index
    cf.assert %2168, "mismatched size for broadcast"
    %2169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2143, %2167 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2169 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2170 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2171 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2172 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2173 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2174 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2169, %2175 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2176 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_678, %2177 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1106 = tensor.expand_shape %2178 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1107 = tensor.expand_shape %cst_19 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_1108 = tensor.dim %2178, %c1 : tensor<1x?x4096xf16>
    %2179 = tensor.empty(%dim_1108) : tensor<1x?x4096xf16>
    %2180 = linalg.fill ins(%cst_740 : f16) outs(%2179 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1107, %cst_264, %cst_263 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1106, %2181 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2180 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1109 = tensor.expand_shape %cst_18 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1109, %cst_262, %cst_261 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1106, %2183 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2180 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1110 = tensor.expand_shape %cst_17 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1110, %cst_260, %cst_259 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1106, %2185 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2180 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_1111 = tensor.cast %2182 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1112 = tensor.expand_shape %cast_1111 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1112 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1113 = tensor.cast %2184 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1114 = tensor.expand_shape %cast_1113 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1114 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1115 = tensor.cast %2186 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1116 = tensor.expand_shape %cast_1115 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1116 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2187, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1117 = tensor.extract_slice %2187[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1118 = tensor.extract_slice %2187[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1118 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2191 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1117 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1119 = tensor.insert_slice %2192 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1120 = tensor.insert_slice %2193 into %inserted_slice_1119[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1120, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2190, %2194 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2196 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2188, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1121 = tensor.extract_slice %2188[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1122 = tensor.extract_slice %2188[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2197 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1122 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2197 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1121 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1123 = tensor.insert_slice %2198 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1124 = tensor.insert_slice %2199 into %inserted_slice_1123[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1124, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2196, %2200 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2201 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1125 = tensor.collapse_shape %2195 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_1126 = tensor.collapse_shape %2202 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2203 = linalg.batch_matmul ins(%collapsed_1125, %collapsed_1126 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_1127 = tensor.expand_shape %2203 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %2204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1127 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %2205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2204, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2206:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2205 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %2207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2205, %2206#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2207 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2208 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %2210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2208, %2209 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_1128 = tensor.collapse_shape %2210 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_1129 = tensor.collapse_shape %2189 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2211 = linalg.batch_matmul ins(%collapsed_1128, %collapsed_1129 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_1130 = tensor.expand_shape %2211 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %2212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1130 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %2213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2212 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_1131 = tensor.collapse_shape %2213 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_1132 = tensor.expand_shape %collapsed_1131 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1133 = tensor.expand_shape %cst_16 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1133, %cst_258, %cst_257 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1132, %2214 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %2216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2169, %2215 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2216 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2217 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2218 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2219 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2220 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2221 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2216, %2222 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2223 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_677, %2224 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1134 = tensor.expand_shape %2225 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1135 = tensor.expand_shape %cst_15 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_1136 = tensor.dim %2225, %c1 : tensor<1x?x4096xf16>
    %2226 = tensor.empty(%dim_1136) : tensor<1x?x11008xf16>
    %2227 = linalg.fill ins(%cst_740 : f16) outs(%2226 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %2228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1135, %cst_256, %cst_255 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1134, %2228 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2227 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1137 = tensor.dim %2229, %c1 : tensor<1x?x11008xf16>
    %2230 = tensor.empty(%dim_1137) : tensor<1x?x11008xf16>
    %2231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2229 : tensor<1x?x11008xf16>) outs(%2230 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %2232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2231, %2229 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2230 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1138 = tensor.expand_shape %cst_14 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1138, %cst_254, %cst_253 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1134, %2233 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2227 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1139 = tensor.dim %2234, %c1 : tensor<1x?x11008xf16>
    %2235 = arith.cmpi eq, %dim_1137, %dim_1139 : index
    cf.assert %2235, "mismatched size for broadcast"
    %2236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2232, %2234 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2230 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1140 = tensor.expand_shape %2236 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_1141 = tensor.expand_shape %cst_13 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_1142 = tensor.dim %2236, %c1 : tensor<1x?x11008xf16>
    %2237 = tensor.empty(%dim_1142) : tensor<1x?x4096xf16>
    %2238 = linalg.fill ins(%cst_740 : f16) outs(%2237 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1141, %cst_252, %cst_251 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %2240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1140, %2239 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%2238 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_1143 = tensor.dim %2240, %c1 : tensor<1x?x4096xf16>
    %2241 = arith.cmpi eq, %dim, %dim_1143 : index
    cf.assert %2241, "mismatched size for broadcast"
    %2242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2216, %2240 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2242 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2243 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2244 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2245 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2246 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2247 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2242, %2248 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2249 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_676, %2250 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1144 = tensor.expand_shape %2251 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1145 = tensor.expand_shape %cst_12 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_1146 = tensor.dim %2251, %c1 : tensor<1x?x4096xf16>
    %2252 = tensor.empty(%dim_1146) : tensor<1x?x4096xf16>
    %2253 = linalg.fill ins(%cst_740 : f16) outs(%2252 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2254 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1145, %cst_250, %cst_249 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1144, %2254 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2253 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1147 = tensor.expand_shape %cst_11 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2256 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1147, %cst_248, %cst_247 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1144, %2256 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2253 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1148 = tensor.expand_shape %cst_10 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1148, %cst_246, %cst_245 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1144, %2258 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2253 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_1149 = tensor.cast %2255 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1150 = tensor.expand_shape %cast_1149 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1150 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1151 = tensor.cast %2257 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1152 = tensor.expand_shape %cast_1151 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1152 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1153 = tensor.cast %2259 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1154 = tensor.expand_shape %cast_1153 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1154 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2260, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1155 = tensor.extract_slice %2260[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1156 = tensor.extract_slice %2260[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1156 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2264 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1155 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1157 = tensor.insert_slice %2265 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1158 = tensor.insert_slice %2266 into %inserted_slice_1157[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1158, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2263, %2267 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2261, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1159 = tensor.extract_slice %2261[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1160 = tensor.extract_slice %2261[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1160 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2270 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1159 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1161 = tensor.insert_slice %2271 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1162 = tensor.insert_slice %2272 into %inserted_slice_1161[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1162, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2274 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2269, %2273 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2274 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1163 = tensor.collapse_shape %2268 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_1164 = tensor.collapse_shape %2275 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2276 = linalg.batch_matmul ins(%collapsed_1163, %collapsed_1164 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_1165 = tensor.expand_shape %2276 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %2277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1165 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %2278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2277, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2279:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2278 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %2280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2278, %2279#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2280 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2281 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %2283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2281, %2282 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_1166 = tensor.collapse_shape %2283 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_1167 = tensor.collapse_shape %2262 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2284 = linalg.batch_matmul ins(%collapsed_1166, %collapsed_1167 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_1168 = tensor.expand_shape %2284 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %2285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1168 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %2286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2285 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_1169 = tensor.collapse_shape %2286 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_1170 = tensor.expand_shape %collapsed_1169 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1171 = tensor.expand_shape %cst_9 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1171, %cst_244, %cst_243 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1170, %2287 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %2289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2242, %2288 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2289 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2290 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2291 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2292 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2293 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2294 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2289, %2295 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2296 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2298 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_675, %2297 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1172 = tensor.expand_shape %2298 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1173 = tensor.expand_shape %cst_8 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_1174 = tensor.dim %2298, %c1 : tensor<1x?x4096xf16>
    %2299 = tensor.empty(%dim_1174) : tensor<1x?x11008xf16>
    %2300 = linalg.fill ins(%cst_740 : f16) outs(%2299 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %2301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1173, %cst_242, %cst_241 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1172, %2301 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2300 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1175 = tensor.dim %2302, %c1 : tensor<1x?x11008xf16>
    %2303 = tensor.empty(%dim_1175) : tensor<1x?x11008xf16>
    %2304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2302 : tensor<1x?x11008xf16>) outs(%2303 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %2305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2304, %2302 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2303 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1176 = tensor.expand_shape %cst_7 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1176, %cst_240, %cst_239 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1172, %2306 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2300 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1177 = tensor.dim %2307, %c1 : tensor<1x?x11008xf16>
    %2308 = arith.cmpi eq, %dim_1175, %dim_1177 : index
    cf.assert %2308, "mismatched size for broadcast"
    %2309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2305, %2307 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2303 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1178 = tensor.expand_shape %2309 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_1179 = tensor.expand_shape %cst_6 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_1180 = tensor.dim %2309, %c1 : tensor<1x?x11008xf16>
    %2310 = tensor.empty(%dim_1180) : tensor<1x?x4096xf16>
    %2311 = linalg.fill ins(%cst_740 : f16) outs(%2310 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1179, %cst_238, %cst_237 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %2313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1178, %2312 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%2311 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_1181 = tensor.dim %2313, %c1 : tensor<1x?x4096xf16>
    %2314 = arith.cmpi eq, %dim, %dim_1181 : index
    cf.assert %2314, "mismatched size for broadcast"
    %2315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2289, %2313 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2315 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2316 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2317 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2318 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2319 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2320 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2315, %2321 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2322 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_674, %2323 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1182 = tensor.expand_shape %2324 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1183 = tensor.expand_shape %cst_5 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %dim_1184 = tensor.dim %2324, %c1 : tensor<1x?x4096xf16>
    %2325 = tensor.empty(%dim_1184) : tensor<1x?x4096xf16>
    %2326 = linalg.fill ins(%cst_740 : f16) outs(%2325 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1183, %cst_236, %cst_235 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1182, %2327 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2326 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1185 = tensor.expand_shape %cst_4 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1185, %cst_234, %cst_233 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1182, %2329 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2326 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1186 = tensor.expand_shape %cst_3 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1186, %cst_232, %cst_231 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2332 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1182, %2331 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%2326 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %cast_1187 = tensor.cast %2328 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1188 = tensor.expand_shape %cast_1187 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1188 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1189 = tensor.cast %2330 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1190 = tensor.expand_shape %cast_1189 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1190 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %cast_1191 = tensor.cast %2332 : tensor<1x?x4096xf16> to tensor<1x?x4096xf16>
    %expanded_1192 = tensor.expand_shape %cast_1191 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %2335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1192 : tensor<1x?x32x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2333, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1193 = tensor.extract_slice %2333[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1194 = tensor.extract_slice %2333[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1194 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2337 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1193 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1195 = tensor.insert_slice %2338 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1196 = tensor.insert_slice %2339 into %inserted_slice_1195[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1196, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2336, %2340 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2334, %expanded_14 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %extracted_slice_1197 = tensor.extract_slice %2334[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %extracted_slice_1198 = tensor.extract_slice %2334[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x128xf16> to tensor<1x32x?x64xf16>
    %2343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1198 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x64xf16>
    %2344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2343 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %2345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1197 : tensor<1x32x?x64xf16>) outs(%56 : tensor<1x32x?x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x64xf16>
    %inserted_slice_1199 = tensor.insert_slice %2344 into %48[0, 0, 0, 0] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1200 = tensor.insert_slice %2345 into %inserted_slice_1199[0, 0, 0, 64] [1, 32, %dim, 64] [1, 1, 1, 1] : tensor<1x32x?x64xf16> into tensor<1x32x?x128xf16>
    %2346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1200, %expanded_15 : tensor<1x32x?x128xf16>, tensor<1x1x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2342, %2346 : tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) outs(%48 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x128xf16>
    %2348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2347 : tensor<1x32x?x128xf16>) outs(%68 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1201 = tensor.collapse_shape %2341 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %collapsed_1202 = tensor.collapse_shape %2348 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2349 = linalg.batch_matmul ins(%collapsed_1201, %collapsed_1202 : tensor<32x?x128xf16>, tensor<32x128x?xf16>) outs(%71 : tensor<32x?x?xf16>) -> tensor<32x?x?xf16>
    %expanded_1203 = tensor.expand_shape %2349 [[0, 1], [2], [3]] : tensor<32x?x?xf16> into tensor<1x32x?x?xf16>
    %2350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1203 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.truncf %cst_746 : f64 to f16
      %2404 = arith.divf %in, %2403 : f16
      linalg.yield %2404 : f16
    } -> tensor<1x32x?x?xf16>
    %2351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2350, %24 : tensor<1x32x?x?xf16>, tensor<1x1x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2352:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2351 : tensor<1x32x?x?xf16>) outs(%79, %77 : tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1222: i64):
      %2403 = linalg.index 3 : index
      %2404 = arith.index_cast %2403 : index to i64
      %2405 = arith.maximumf %in, %out : f16
      %2406 = arith.cmpf ogt, %in, %out : f16
      %2407 = arith.select %2406, %2404, %out_1222 : i64
      linalg.yield %2405, %2407 : f16, i64
    } -> (tensor<1x32x?x1xf16>, tensor<1x32x?x1xi64>)
    %2353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2351, %2352#0 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.subf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2353 : tensor<1x32x?x?xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = math.exp %in : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %2355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2354 : tensor<1x32x?x?xf16>) outs(%83 : tensor<1x32x?x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.addf %in, %out : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x1xf16>
    %2356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2354, %2355 : tensor<1x32x?x?xf16>, tensor<1x32x?x1xf16>) outs(%73 : tensor<1x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.divf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x32x?x?xf16>
    %collapsed_1204 = tensor.collapse_shape %2356 [[0, 1], [2], [3]] : tensor<1x32x?x?xf16> into tensor<32x?x?xf16>
    %collapsed_1205 = tensor.collapse_shape %2335 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2357 = linalg.batch_matmul ins(%collapsed_1204, %collapsed_1205 : tensor<32x?x?xf16>, tensor<32x?x128xf16>) outs(%87 : tensor<32x?x128xf16>) -> tensor<32x?x128xf16>
    %expanded_1206 = tensor.expand_shape %2357 [[0, 1], [2], [3]] : tensor<32x?x128xf16> into tensor<1x32x?x128xf16>
    %2358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1206 : tensor<1x32x?x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %2359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2358 : tensor<1x?x32x128xf16>) outs(%89 : tensor<1x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x?x32x128xf16>
    %collapsed_1207 = tensor.collapse_shape %2359 [[0], [1], [2, 3]] : tensor<1x?x32x128xf16> into tensor<1x?x4096xf16>
    %expanded_1208 = tensor.expand_shape %collapsed_1207 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1209 = tensor.expand_shape %cst_2 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1209, %cst_230, %cst_229 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%39 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x32x128xf16>
    %2361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1208, %2360 : tensor<1x?x32x128xf16>, tensor<4096x32x128xf16>) outs(%93 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %96, "mismatched size for broadcast"
    %2362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2315, %2361 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2362 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2363 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2364 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2365 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2366 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2367 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2362, %2368 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2369 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_673, %2370 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %expanded_1210 = tensor.expand_shape %2371 [[0], [1], [2, 3]] : tensor<1x?x4096xf16> into tensor<1x?x32x128xf16>
    %expanded_1211 = tensor.expand_shape %cst_1 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %dim_1212 = tensor.dim %2371, %c1 : tensor<1x?x4096xf16>
    %2372 = tensor.empty(%dim_1212) : tensor<1x?x11008xf16>
    %2373 = linalg.fill ins(%cst_740 : f16) outs(%2372 : tensor<1x?x11008xf16>) -> tensor<1x?x11008xf16>
    %2374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1211, %cst_228, %cst_227 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1210, %2374 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2373 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1213 = tensor.dim %2375, %c1 : tensor<1x?x11008xf16>
    %2376 = tensor.empty(%dim_1213) : tensor<1x?x11008xf16>
    %2377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2375 : tensor<1x?x11008xf16>) outs(%2376 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2403 = arith.negf %in : f16
      %2404 = math.exp %2403 : f16
      %2405 = arith.addf %2404, %cst_743 : f16
      %2406 = arith.divf %cst_743, %2405 : f16
      linalg.yield %2406 : f16
    } -> tensor<1x?x11008xf16>
    %2378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2377, %2375 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2376 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1214 = tensor.expand_shape %cst_0 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1214, %cst_226, %cst_225 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%107 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<11008x32x128xf16>
    %2380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1210, %2379 : tensor<1x?x32x128xf16>, tensor<11008x32x128xf16>) outs(%2373 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x11008xf16>
    %dim_1215 = tensor.dim %2380, %c1 : tensor<1x?x11008xf16>
    %2381 = arith.cmpi eq, %dim_1213, %dim_1215 : index
    cf.assert %2381, "mismatched size for broadcast"
    %2382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2378, %2380 : tensor<1x?x11008xf16>, tensor<1x?x11008xf16>) outs(%2376 : tensor<1x?x11008xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x11008xf16>
    %expanded_1216 = tensor.expand_shape %2382 [[0], [1], [2, 3]] : tensor<1x?x11008xf16> into tensor<1x?x86x128xf16>
    %expanded_1217 = tensor.expand_shape %cst [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %dim_1218 = tensor.dim %2382, %c1 : tensor<1x?x11008xf16>
    %2383 = tensor.empty(%dim_1218) : tensor<1x?x4096xf16>
    %2384 = linalg.fill ins(%cst_740 : f16) outs(%2383 : tensor<1x?x4096xf16>) -> tensor<1x?x4096xf16>
    %2385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1217, %cst_224, %cst_223 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%119 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1222: f16, %in_1223: f16, %out: f16):
      %2403 = arith.extui %in : i4 to i32
      %2404 = arith.uitofp %2403 : i32 to f16
      %2405 = arith.subf %2404, %in_1223 : f16
      %2406 = arith.mulf %2405, %in_1222 : f16
      linalg.yield %2406 : f16
    } -> tensor<4096x86x128xf16>
    %2386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1216, %2385 : tensor<1x?x86x128xf16>, tensor<4096x86x128xf16>) outs(%2384 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      %2404 = arith.addf %2403, %out : f16
      linalg.yield %2404 : f16
    } -> tensor<1x?x4096xf16>
    %dim_1219 = tensor.dim %2386, %c1 : tensor<1x?x4096xf16>
    %2387 = arith.cmpi eq, %dim, %dim_1219 : index
    cf.assert %2387, "mismatched size for broadcast"
    %2388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2362, %2386 : tensor<1x?x4096xf16>, tensor<1x?x4096xf16>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.addf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2388 : tensor<1x?x4096xf16>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2389 : tensor<1x?x4096xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.powf %in, %cst_747 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x4096xf32>
    %2391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2390 : tensor<1x?x4096xf32>) outs(%31 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.addf %in, %out : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2391 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.divf %in, %cst_748 : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2392 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = arith.truncf %cst_745 : f64 to f32
      %2404 = arith.addf %in, %2403 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x1xf32>
    %2394 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2393 : tensor<1x?x1xf32>) outs(%30 : tensor<1x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2403 = math.rsqrt %in : f32
      linalg.yield %2403 : f32
    } -> tensor<1x?x1xf32>
    %2395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2388, %2394 : tensor<1x?x4096xf16>, tensor<1x?x1xf32>) outs(%27 : tensor<1x?x4096xf32>) {
    ^bb0(%in: f16, %in_1222: f32, %out: f32):
      %2403 = arith.extf %in : f16 to f32
      %2404 = arith.mulf %2403, %in_1222 : f32
      linalg.yield %2404 : f32
    } -> tensor<1x?x4096xf32>
    cf.assert %26, "negative values not allowed in new dimensions"
    %2396 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2395 : tensor<1x?x4096xf32>) outs(%2 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2403 = arith.truncf %in : f32 to f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2397 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_672, %2396 : tensor<4096xf16>, tensor<1x?x4096xf16>) outs(%92 : tensor<1x?x4096xf16>) {
    ^bb0(%in: f16, %in_1222: f16, %out: f16):
      %2403 = arith.mulf %in, %in_1222 : f16
      linalg.yield %2403 : f16
    } -> tensor<1x?x4096xf16>
    %2398 = tensor.empty() : tensor<4096x32000xf16>
    %2399 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%cst_671 : tensor<32000x4096xf16>) outs(%2398 : tensor<4096x32000xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x32000xf16>
    %collapsed_1220 = tensor.collapse_shape %2397 [[0, 1], [2]] : tensor<1x?x4096xf16> into tensor<?x4096xf16>
    %2400 = tensor.empty(%dim) : tensor<?x32000xf16>
    %2401 = linalg.fill ins(%cst_740 : f16) outs(%2400 : tensor<?x32000xf16>) -> tensor<?x32000xf16>
    %2402 = linalg.matmul ins(%collapsed_1220, %2399 : tensor<?x4096xf16>, tensor<4096x32000xf16>) outs(%2401 : tensor<?x32000xf16>) -> tensor<?x32000xf16>
    %expanded_1221 = tensor.expand_shape %2402 [[0, 1], [2]] : tensor<?x32000xf16> into tensor<1x?x32000xf16>
    return %expanded_1221, %67, %51, %157, %145, %230, %218, %303, %291, %376, %364, %449, %437, %522, %510, %595, %583, %668, %656, %741, %729, %814, %802, %887, %875, %960, %948, %1033, %1021, %1106, %1094, %1179, %1167, %1252, %1240, %1325, %1313, %1398, %1386, %1471, %1459, %1544, %1532, %1617, %1605, %1690, %1678, %1763, %1751, %1836, %1824, %1909, %1897, %1982, %1970, %2055, %2043, %2128, %2116, %2201, %2189, %2274, %2262, %2347, %2335 : tensor<1x?x32000xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>
  }
  func.func @second_vicuna_forward(%arg0: tensor<1x1xi64>, %arg1: tensor<1x32x?x128xf16>, %arg2: tensor<1x32x?x128xf16>, %arg3: tensor<1x32x?x128xf16>, %arg4: tensor<1x32x?x128xf16>, %arg5: tensor<1x32x?x128xf16>, %arg6: tensor<1x32x?x128xf16>, %arg7: tensor<1x32x?x128xf16>, %arg8: tensor<1x32x?x128xf16>, %arg9: tensor<1x32x?x128xf16>, %arg10: tensor<1x32x?x128xf16>, %arg11: tensor<1x32x?x128xf16>, %arg12: tensor<1x32x?x128xf16>, %arg13: tensor<1x32x?x128xf16>, %arg14: tensor<1x32x?x128xf16>, %arg15: tensor<1x32x?x128xf16>, %arg16: tensor<1x32x?x128xf16>, %arg17: tensor<1x32x?x128xf16>, %arg18: tensor<1x32x?x128xf16>, %arg19: tensor<1x32x?x128xf16>, %arg20: tensor<1x32x?x128xf16>, %arg21: tensor<1x32x?x128xf16>, %arg22: tensor<1x32x?x128xf16>, %arg23: tensor<1x32x?x128xf16>, %arg24: tensor<1x32x?x128xf16>, %arg25: tensor<1x32x?x128xf16>, %arg26: tensor<1x32x?x128xf16>, %arg27: tensor<1x32x?x128xf16>, %arg28: tensor<1x32x?x128xf16>, %arg29: tensor<1x32x?x128xf16>, %arg30: tensor<1x32x?x128xf16>, %arg31: tensor<1x32x?x128xf16>, %arg32: tensor<1x32x?x128xf16>, %arg33: tensor<1x32x?x128xf16>, %arg34: tensor<1x32x?x128xf16>, %arg35: tensor<1x32x?x128xf16>, %arg36: tensor<1x32x?x128xf16>, %arg37: tensor<1x32x?x128xf16>, %arg38: tensor<1x32x?x128xf16>, %arg39: tensor<1x32x?x128xf16>, %arg40: tensor<1x32x?x128xf16>, %arg41: tensor<1x32x?x128xf16>, %arg42: tensor<1x32x?x128xf16>, %arg43: tensor<1x32x?x128xf16>, %arg44: tensor<1x32x?x128xf16>, %arg45: tensor<1x32x?x128xf16>, %arg46: tensor<1x32x?x128xf16>, %arg47: tensor<1x32x?x128xf16>, %arg48: tensor<1x32x?x128xf16>, %arg49: tensor<1x32x?x128xf16>, %arg50: tensor<1x32x?x128xf16>, %arg51: tensor<1x32x?x128xf16>, %arg52: tensor<1x32x?x128xf16>, %arg53: tensor<1x32x?x128xf16>, %arg54: tensor<1x32x?x128xf16>, %arg55: tensor<1x32x?x128xf16>, %arg56: tensor<1x32x?x128xf16>, %arg57: tensor<1x32x?x128xf16>, %arg58: tensor<1x32x?x128xf16>, %arg59: tensor<1x32x?x128xf16>, %arg60: tensor<1x32x?x128xf16>, %arg61: tensor<1x32x?x128xf16>, %arg62: tensor<1x32x?x128xf16>, %arg63: tensor<1x32x?x128xf16>, %arg64: tensor<1x32x?x128xf16>) -> (tensor<1x1x32000xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>) {
    %cst_728 = util.global.load @cst_728 : tensor<4096xf16>
    %cst_599 = util.global.load @cst_599 : tensor<4096x32x1xf16>
    %cst_632 = util.global.load @cst_632 : tensor<11008x32x1xf16>
    %cst_489 = util.global.load @cst_489 : tensor<4096x86x1xf16>
    %cst_443 = util.global.load @cst_443 : tensor<4096x32x1xf16>
    %cst_58 = util.global.load @cst_58 : tensor<4096x4096xi4>
    %cst_29 = util.global.load @cst_29 : tensor<11008x4096xi4>
    %cst_383 = util.global.load @cst_383 : tensor<4096x32x1xf16>
    %cst_367 = util.global.load @cst_367 : tensor<11008x32x1xf16>
    %cst_501 = util.global.load @cst_501 : tensor<4096x32x1xf16>
    %cst_592 = util.global.load @cst_592 : tensor<11008x32x1xf16>
    %cst_524 = util.global.load @cst_524 : tensor<4096x32x1xf16>
    %cst_56 = util.global.load @cst_56 : tensor<11008x4096xi4>
    %cst_107 = util.global.load @cst_107 : tensor<4096x4096xi4>
    %cst_421 = util.global.load @cst_421 : tensor<11008x32x1xf16>
    %cst_190 = util.global.load @cst_190 : tensor<11008x4096xi4>
    %cst_570 = util.global.load @cst_570 : tensor<4096x32x1xf16>
    %cst_642 = util.global.load @cst_642 : tensor<4096x32x1xf16>
    %cst_48 = util.global.load @cst_48 : tensor<4096x11008xi4>
    %cst_252 = util.global.load @cst_252 : tensor<4096x86x1xf16>
    %cst_18 = util.global.load @cst_18 : tensor<4096x4096xi4>
    %cst_541 = util.global.load @cst_541 : tensor<4096x32x1xf16>
    %cst_75 = util.global.load @cst_75 : tensor<4096x4096xi4>
    %cst_231 = util.global.load @cst_231 : tensor<4096x32x1xf16>
    %cst_745 = util.global.load @cst_745 : f64
    %cst_665 = util.global.load @cst_665 : tensor<4096x32x1xf16>
    %cst_712 = util.global.load @cst_712 : tensor<4096xf16>
    %cst_557 = util.global.load @cst_557 : tensor<4096x32x1xf16>
    %cst_159 = util.global.load @cst_159 : tensor<4096x4096xi4>
    %cst_701 = util.global.load @cst_701 : tensor<4096xf16>
    %cst_497 = util.global.load @cst_497 : tensor<4096x32x1xf16>
    %cst_401 = util.global.load @cst_401 : tensor<4096x32x1xf16>
    %cst_737 = util.global.load @cst_737 : tensor<1x1x4096x128xf16>
    %cst_31 = util.global.load @cst_31 : tensor<4096x4096xi4>
    %cst_727 = util.global.load @cst_727 : tensor<4096xf16>
    %cst_580 = util.global.load @cst_580 : tensor<4096x32x1xf16>
    %cst_391 = util.global.load @cst_391 : tensor<4096x86x1xf16>
    %cst_365 = util.global.load @cst_365 : tensor<11008x32x1xf16>
    %cst_302 = util.global.load @cst_302 : tensor<4096x32x1xf16>
    %cst_76 = util.global.load @cst_76 : tensor<4096x11008xi4>
    %cst_120 = util.global.load @cst_120 : tensor<11008x4096xi4>
    %cst_385 = util.global.load @cst_385 : tensor<4096x32x1xf16>
    %cst_255 = util.global.load @cst_255 : tensor<11008x32x1xf16>
    %cst_65 = util.global.load @cst_65 : tensor<4096x4096xi4>
    %cst_203 = util.global.load @cst_203 : tensor<11008x4096xi4>
    %cst_397 = util.global.load @cst_397 : tensor<4096x32x1xf16>
    %cst_176 = util.global.load @cst_176 : tensor<11008x4096xi4>
    %cst_239 = util.global.load @cst_239 : tensor<11008x32x1xf16>
    %cst_660 = util.global.load @cst_660 : tensor<11008x32x1xf16>
    %cst_3 = util.global.load @cst_3 : tensor<4096x4096xi4>
    %cst_461 = util.global.load @cst_461 : tensor<4096x86x1xf16>
    %cst_124 = util.global.load @cst_124 : tensor<4096x4096xi4>
    %cst_649 = util.global.load @cst_649 : tensor<4096x32x1xf16>
    %cst = util.global.load @cst : tensor<4096x11008xi4>
    %cst_644 = util.global.load @cst_644 : tensor<4096x86x1xf16>
    %cst_559 = util.global.load @cst_559 : tensor<4096x86x1xf16>
    %cst_234 = util.global.load @cst_234 : tensor<4096x32x1xf16>
    %cst_530 = util.global.load @cst_530 : tensor<4096x32x1xf16>
    %cst_527 = util.global.load @cst_527 : tensor<4096x32x1xf16>
    %cst_634 = util.global.load @cst_634 : tensor<11008x32x1xf16>
    %cst_256 = util.global.load @cst_256 : tensor<11008x32x1xf16>
    %cst_375 = util.global.load @cst_375 : tensor<4096x32x1xf16>
    %cst_683 = util.global.load @cst_683 : tensor<4096xf16>
    %cst_561 = util.global.load @cst_561 : tensor<11008x32x1xf16>
    %cst_503 = util.global.load @cst_503 : tensor<4096x86x1xf16>
    %cst_428 = util.global.load @cst_428 : tensor<4096x32x1xf16>
    %cst_303 = util.global.load @cst_303 : tensor<4096x32x1xf16>
    %cst_435 = util.global.load @cst_435 : tensor<11008x32x1xf16>
    %cst_703 = util.global.load @cst_703 : tensor<4096xf16>
    %cst_438 = util.global.load @cst_438 : tensor<11008x32x1xf16>
    %cst_193 = util.global.load @cst_193 : tensor<4096x4096xi4>
    %cst_183 = util.global.load @cst_183 : tensor<11008x4096xi4>
    %cst_139 = util.global.load @cst_139 : tensor<4096x11008xi4>
    %cst_422 = util.global.load @cst_422 : tensor<11008x32x1xf16>
    %cst_569 = util.global.load @cst_569 : tensor<4096x32x1xf16>
    %cst_317 = util.global.load @cst_317 : tensor<4096x32x1xf16>
    %cst_565 = util.global.load @cst_565 : tensor<4096x32x1xf16>
    %cst_291 = util.global.load @cst_291 : tensor<4096x32x1xf16>
    %cst_160 = util.global.load @cst_160 : tensor<4096x11008xi4>
    %cst_162 = util.global.load @cst_162 : tensor<11008x4096xi4>
    %cst_170 = util.global.load @cst_170 : tensor<4096x4096xi4>
    %cst_216 = util.global.load @cst_216 : tensor<4096x11008xi4>
    %cst_482 = util.global.load @cst_482 : tensor<4096x32x1xf16>
    %cst_112 = util.global.load @cst_112 : tensor<11008x4096xi4>
    %cst_246 = util.global.load @cst_246 : tensor<4096x32x1xf16>
    %cst_549 = util.global.load @cst_549 : tensor<11008x32x1xf16>
    %cst_406 = util.global.load @cst_406 : tensor<4096x86x1xf16>
    %cst_586 = util.global.load @cst_586 : tensor<4096x32x1xf16>
    %cst_247 = util.global.load @cst_247 : tensor<4096x32x1xf16>
    %cst_542 = util.global.load @cst_542 : tensor<4096x32x1xf16>
    %cst_114 = util.global.load @cst_114 : tensor<4096x4096xi4>
    %cst_214 = util.global.load @cst_214 : tensor<4096x4096xi4>
    %cst_339 = util.global.load @cst_339 : tensor<11008x32x1xf16>
    %cst_725 = util.global.load @cst_725 : tensor<4096xf16>
    %cst_623 = util.global.load @cst_623 : tensor<4096x32x1xf16>
    %cst_271 = util.global.load @cst_271 : tensor<4096x32x1xf16>
    %cst_215 = util.global.load @cst_215 : tensor<4096x4096xi4>
    %cst_423 = util.global.load @cst_423 : tensor<11008x32x1xf16>
    %cst_518 = util.global.load @cst_518 : tensor<4096x86x1xf16>
    %cst_566 = util.global.load @cst_566 : tensor<4096x32x1xf16>
    %cst_478 = util.global.load @cst_478 : tensor<11008x32x1xf16>
    %cst_529 = util.global.load @cst_529 : tensor<4096x32x1xf16>
    %cst_719 = util.global.load @cst_719 : tensor<4096xf16>
    %cst_309 = util.global.load @cst_309 : tensor<11008x32x1xf16>
    %cst_306 = util.global.load @cst_306 : tensor<4096x32x1xf16>
    %cst_17 = util.global.load @cst_17 : tensor<4096x4096xi4>
    %cst_748 = util.global.load @cst_748 : f32
    %cst_70 = util.global.load @cst_70 : tensor<11008x4096xi4>
    %cst_709 = util.global.load @cst_709 : tensor<4096xf16>
    %cst_509 = util.global.load @cst_509 : tensor<4096x32x1xf16>
    %cst_136 = util.global.load @cst_136 : tensor<4096x4096xi4>
    %cst_680 = util.global.load @cst_680 : tensor<4096xf16>
    %cst_263 = util.global.load @cst_263 : tensor<4096x32x1xf16>
    %cst_477 = util.global.load @cst_477 : tensor<11008x32x1xf16>
    %cst_676 = util.global.load @cst_676 : tensor<4096xf16>
    %cst_289 = util.global.load @cst_289 : tensor<4096x32x1xf16>
    %cst_340 = util.global.load @cst_340 : tensor<11008x32x1xf16>
    %cst_447 = util.global.load @cst_447 : tensor<4096x86x1xf16>
    %cst_520 = util.global.load @cst_520 : tensor<11008x32x1xf16>
    %cst_348 = util.global.load @cst_348 : tensor<4096x32x1xf16>
    %cst_651 = util.global.load @cst_651 : tensor<4096x32x1xf16>
    %cst_188 = util.global.load @cst_188 : tensor<4096x11008xi4>
    %cst_104 = util.global.load @cst_104 : tensor<4096x11008xi4>
    %cst_457 = util.global.load @cst_457 : tensor<4096x32x1xf16>
    %c19 = util.global.load @c19 : index
    %cst_184 = util.global.load @cst_184 : tensor<4096x4096xi4>
    %cst_296 = util.global.load @cst_296 : tensor<11008x32x1xf16>
    %cst_629 = util.global.load @cst_629 : tensor<4096x86x1xf16>
    %cst_668 = util.global.load @cst_668 : tensor<4096x32x1xf16>
    %cst_589 = util.global.load @cst_589 : tensor<11008x32x1xf16>
    %cst_167 = util.global.load @cst_167 : tensor<4096x11008xi4>
    %cst_66 = util.global.load @cst_66 : tensor<4096x4096xi4>
    %cst_149 = util.global.load @cst_149 : tensor<4096x4096xi4>
    %cst_146 = util.global.load @cst_146 : tensor<4096x11008xi4>
    %cst_156 = util.global.load @cst_156 : tensor<4096x4096xi4>
    %cst_336 = util.global.load @cst_336 : tensor<4096x86x1xf16>
    %cst_242 = util.global.load @cst_242 : tensor<11008x32x1xf16>
    %cst_358 = util.global.load @cst_358 : tensor<4096x32x1xf16>
    %cst_227 = util.global.load @cst_227 : tensor<11008x32x1xf16>
    %cst_605 = util.global.load @cst_605 : tensor<11008x32x1xf16>
    %cst_236 = util.global.load @cst_236 : tensor<4096x32x1xf16>
    %cst_102 = util.global.load @cst_102 : tensor<4096x4096xi4>
    %cst_610 = util.global.load @cst_610 : tensor<4096x32x1xf16>
    %cst_697 = util.global.load @cst_697 : tensor<4096xf16>
    %cst_677 = util.global.load @cst_677 : tensor<4096xf16>
    %cst_59 = util.global.load @cst_59 : tensor<4096x4096xi4>
    %cst_8 = util.global.load @cst_8 : tensor<11008x4096xi4>
    %cst_398 = util.global.load @cst_398 : tensor<4096x32x1xf16>
    %cst_608 = util.global.load @cst_608 : tensor<4096x32x1xf16>
    %cst_161 = util.global.load @cst_161 : tensor<11008x4096xi4>
    %cst_33 = util.global.load @cst_33 : tensor<4096x4096xi4>
    %cst_313 = util.global.load @cst_313 : tensor<4096x32x1xf16>
    %cst_364 = util.global.load @cst_364 : tensor<4096x86x1xf16>
    %cst_519 = util.global.load @cst_519 : tensor<11008x32x1xf16>
    %cst_647 = util.global.load @cst_647 : tensor<11008x32x1xf16>
    %cst_650 = util.global.load @cst_650 : tensor<4096x32x1xf16>
    %cst_596 = util.global.load @cst_596 : tensor<4096x32x1xf16>
    %cst_321 = util.global.load @cst_321 : tensor<4096x86x1xf16>
    %cst_64 = util.global.load @cst_64 : tensor<11008x4096xi4>
    %c1_i64 = util.global.load @c1_i64 : i64
    %cst_626 = util.global.load @cst_626 : tensor<4096x32x1xf16>
    %cst_493 = util.global.load @cst_493 : tensor<11008x32x1xf16>
    %cst_699 = util.global.load @cst_699 : tensor<4096xf16>
    %c1 = util.global.load @c1 : index
    %cst_551 = util.global.load @cst_551 : tensor<4096x32x1xf16>
    %cst_284 = util.global.load @cst_284 : tensor<11008x32x1xf16>
    %cst_413 = util.global.load @cst_413 : tensor<4096x32x1xf16>
    %cst_441 = util.global.load @cst_441 : tensor<4096x32x1xf16>
    %cst_87 = util.global.load @cst_87 : tensor<4096x4096xi4>
    %cst_708 = util.global.load @cst_708 : tensor<4096xf16>
    %cst_121 = util.global.load @cst_121 : tensor<4096x4096xi4>
    %cst_390 = util.global.load @cst_390 : tensor<4096x32x1xf16>
    %cst_379 = util.global.load @cst_379 : tensor<11008x32x1xf16>
    %cst_19 = util.global.load @cst_19 : tensor<4096x4096xi4>
    %cst_290 = util.global.load @cst_290 : tensor<4096x32x1xf16>
    %cst_468 = util.global.load @cst_468 : tensor<4096x32x1xf16>
    %cst_103 = util.global.load @cst_103 : tensor<4096x4096xi4>
    %cst_454 = util.global.load @cst_454 : tensor<4096x32x1xf16>
    %cst_577 = util.global.load @cst_577 : tensor<11008x32x1xf16>
    %cst_424 = util.global.load @cst_424 : tensor<11008x32x1xf16>
    %cst_747 = util.global.load @cst_747 : f32
    %cst_221 = util.global.load @cst_221 : tensor<4096x4096xi4>
    %cst_265 = util.global.load @cst_265 : tensor<4096x86x1xf16>
    %c2 = util.global.load @c2 : index
    %cst_722 = util.global.load @cst_722 : tensor<4096xf16>
    %cst_151 = util.global.load @cst_151 : tensor<4096x4096xi4>
    %cst_613 = util.global.load @cst_613 : tensor<4096x32x1xf16>
    %cst_35 = util.global.load @cst_35 : tensor<11008x4096xi4>
    %cst_606 = util.global.load @cst_606 : tensor<11008x32x1xf16>
    %cst_663 = util.global.load @cst_663 : tensor<4096x32x1xf16>
    %cst_158 = util.global.load @cst_158 : tensor<4096x4096xi4>
    %cst_479 = util.global.load @cst_479 : tensor<11008x32x1xf16>
    %cst_491 = util.global.load @cst_491 : tensor<11008x32x1xf16>
    %cst_392 = util.global.load @cst_392 : tensor<4096x86x1xf16>
    %cst_420 = util.global.load @cst_420 : tensor<4096x86x1xf16>
    %cst_288 = util.global.load @cst_288 : tensor<4096x32x1xf16>
    %cst_222 = util.global.load @cst_222 : tensor<4096x4096xi4>
    %cst_85 = util.global.load @cst_85 : tensor<11008x4096xi4>
    %cst_207 = util.global.load @cst_207 : tensor<4096x4096xi4>
    %cst_621 = util.global.load @cst_621 : tensor<4096x32x1xf16>
    %cst_733 = util.global.load @cst_733 : tensor<4096xf16>
    %cst_259 = util.global.load @cst_259 : tensor<4096x32x1xf16>
    %cst_718 = util.global.load @cst_718 : tensor<4096xf16>
    %cst_396 = util.global.load @cst_396 : tensor<11008x32x1xf16>
    %cst_600 = util.global.load @cst_600 : tensor<4096x32x1xf16>
    %cst_178 = util.global.load @cst_178 : tensor<4096x4096xi4>
    %cst_342 = util.global.load @cst_342 : tensor<4096x32x1xf16>
    %cst_591 = util.global.load @cst_591 : tensor<11008x32x1xf16>
    %cst_746 = util.global.load @cst_746 : f64
    %cst_281 = util.global.load @cst_281 : tensor<11008x32x1xf16>
    %cst_16 = util.global.load @cst_16 : tensor<4096x4096xi4>
    %cst_688 = util.global.load @cst_688 : tensor<4096xf16>
    %cst_476 = util.global.load @cst_476 : tensor<4096x86x1xf16>
    %cst_394 = util.global.load @cst_394 : tensor<11008x32x1xf16>
    %cst_521 = util.global.load @cst_521 : tensor<11008x32x1xf16>
    %c19_i64 = util.global.load @c19_i64 : i64
    %cst_14 = util.global.load @cst_14 : tensor<11008x4096xi4>
    %cst_458 = util.global.load @cst_458 : tensor<4096x32x1xf16>
    %cst_679 = util.global.load @cst_679 : tensor<4096xf16>
    %cst_164 = util.global.load @cst_164 : tensor<4096x4096xi4>
    %cst_739 = util.global.load @cst_739 : tensor<32000x4096xf16>
    %cst_735 = util.global.load @cst_735 : tensor<4096xf16>
    %cst_483 = util.global.load @cst_483 : tensor<4096x32x1xf16>
    %cst_26 = util.global.load @cst_26 : tensor<4096x4096xi4>
    %cst_593 = util.global.load @cst_593 : tensor<4096x32x1xf16>
    %cst_407 = util.global.load @cst_407 : tensor<11008x32x1xf16>
    %cst_384 = util.global.load @cst_384 : tensor<4096x32x1xf16>
    %cst_344 = util.global.load @cst_344 : tensor<4096x32x1xf16>
    %cst_7 = util.global.load @cst_7 : tensor<11008x4096xi4>
    %cst_563 = util.global.load @cst_563 : tensor<11008x32x1xf16>
    %cst_616 = util.global.load @cst_616 : tensor<4096x86x1xf16>
    %cst_499 = util.global.load @cst_499 : tensor<4096x32x1xf16>
    %cst_403 = util.global.load @cst_403 : tensor<4096x32x1xf16>
    %cst_110 = util.global.load @cst_110 : tensor<4096x4096xi4>
    %cst_141 = util.global.load @cst_141 : tensor<11008x4096xi4>
    %cst_168 = util.global.load @cst_168 : tensor<11008x4096xi4>
    %cst_345 = util.global.load @cst_345 : tensor<4096x32x1xf16>
    %cst_506 = util.global.load @cst_506 : tensor<11008x32x1xf16>
    %cst_544 = util.global.load @cst_544 : tensor<4096x32x1xf16>
    %cst_243 = util.global.load @cst_243 : tensor<4096x32x1xf16>
    %cst_690 = util.global.load @cst_690 : tensor<4096xf16>
    %cst_507 = util.global.load @cst_507 : tensor<11008x32x1xf16>
    %cst_95 = util.global.load @cst_95 : tensor<4096x4096xi4>
    %cst_125 = util.global.load @cst_125 : tensor<4096x11008xi4>
    %cst_716 = util.global.load @cst_716 : tensor<4096xf16>
    %cst_36 = util.global.load @cst_36 : tensor<11008x4096xi4>
    %cst_15 = util.global.load @cst_15 : tensor<11008x4096xi4>
    %cst_260 = util.global.load @cst_260 : tensor<4096x32x1xf16>
    %cst_225 = util.global.load @cst_225 : tensor<11008x32x1xf16>
    %cst_555 = util.global.load @cst_555 : tensor<4096x32x1xf16>
    %cst_678 = util.global.load @cst_678 : tensor<4096xf16>
    %cst_152 = util.global.load @cst_152 : tensor<4096x4096xi4>
    %cst_275 = util.global.load @cst_275 : tensor<4096x32x1xf16>
    %cst_692 = util.global.load @cst_692 : tensor<4096xf16>
    %cst_724 = util.global.load @cst_724 : tensor<4096xf16>
    %cst_177 = util.global.load @cst_177 : tensor<4096x4096xi4>
    %cst_734 = util.global.load @cst_734 : tensor<4096xf16>
    %cst_175 = util.global.load @cst_175 : tensor<11008x4096xi4>
    %cst_145 = util.global.load @cst_145 : tensor<4096x4096xi4>
    %cst_552 = util.global.load @cst_552 : tensor<4096x32x1xf16>
    %cst_182 = util.global.load @cst_182 : tensor<11008x4096xi4>
    %cst_523 = util.global.load @cst_523 : tensor<4096x32x1xf16>
    %cst_444 = util.global.load @cst_444 : tensor<4096x32x1xf16>
    %cst_180 = util.global.load @cst_180 : tensor<4096x4096xi4>
    %cst_464 = util.global.load @cst_464 : tensor<11008x32x1xf16>
    %cst_119 = util.global.load @cst_119 : tensor<11008x4096xi4>
    %cst_235 = util.global.load @cst_235 : tensor<4096x32x1xf16>
    %cst_360 = util.global.load @cst_360 : tensor<4096x32x1xf16>
    %cst_196 = util.global.load @cst_196 : tensor<11008x4096xi4>
    %cst_597 = util.global.load @cst_597 : tensor<4096x32x1xf16>
    %cst_579 = util.global.load @cst_579 : tensor<4096x32x1xf16>
    %c0_i64 = util.global.load @c0_i64 : i64
    %cst_23 = util.global.load @cst_23 : tensor<4096x4096xi4>
    %cst_169 = util.global.load @cst_169 : tensor<11008x4096xi4>
    %cst_267 = util.global.load @cst_267 : tensor<11008x32x1xf16>
    %cst_192 = util.global.load @cst_192 : tensor<4096x4096xi4>
    %cst_717 = util.global.load @cst_717 : tensor<4096xf16>
    %cst_485 = util.global.load @cst_485 : tensor<4096x32x1xf16>
    %cst_442 = util.global.load @cst_442 : tensor<4096x32x1xf16>
    %cst_208 = util.global.load @cst_208 : tensor<4096x4096xi4>
    %cst_163 = util.global.load @cst_163 : tensor<4096x4096xi4>
    %cst_439 = util.global.load @cst_439 : tensor<4096x32x1xf16>
    %cst_620 = util.global.load @cst_620 : tensor<11008x32x1xf16>
    %cst_324 = util.global.load @cst_324 : tensor<11008x32x1xf16>
    %cst_532 = util.global.load @cst_532 : tensor<4096x86x1xf16>
    %cst_315 = util.global.load @cst_315 : tensor<4096x32x1xf16>
    %cst_157 = util.global.load @cst_157 : tensor<4096x4096xi4>
    %cst_513 = util.global.load @cst_513 : tensor<4096x32x1xf16>
    %cst_318 = util.global.load @cst_318 : tensor<4096x32x1xf16>
    %cst_581 = util.global.load @cst_581 : tensor<4096x32x1xf16>
    %cst_224 = util.global.load @cst_224 : tensor<4096x86x1xf16>
    %cst_453 = util.global.load @cst_453 : tensor<4096x32x1xf16>
    %cst_77 = util.global.load @cst_77 : tensor<11008x4096xi4>
    %cst_72 = util.global.load @cst_72 : tensor<4096x4096xi4>
    %cst_282 = util.global.load @cst_282 : tensor<11008x32x1xf16>
    %cst_553 = util.global.load @cst_553 : tensor<4096x32x1xf16>
    %cst_257 = util.global.load @cst_257 : tensor<4096x32x1xf16>
    %cst_535 = util.global.load @cst_535 : tensor<11008x32x1xf16>
    %cst_187 = util.global.load @cst_187 : tensor<4096x4096xi4>
    %cst_673 = util.global.load @cst_673 : tensor<4096xf16>
    %cst_128 = util.global.load @cst_128 : tensor<4096x4096xi4>
    %cst_486 = util.global.load @cst_486 : tensor<4096x32x1xf16>
    %cst_736 = util.global.load @cst_736 : tensor<1x1x4096x128xf16>
    %cst_131 = util.global.load @cst_131 : tensor<4096x4096xi4>
    %cst_171 = util.global.load @cst_171 : tensor<4096x4096xi4>
    %cst_533 = util.global.load @cst_533 : tensor<11008x32x1xf16>
    %cst_189 = util.global.load @cst_189 : tensor<11008x4096xi4>
    %cst_615 = util.global.load @cst_615 : tensor<4096x86x1xf16>
    %cst_118 = util.global.load @cst_118 : tensor<4096x11008xi4>
    %cst_329 = util.global.load @cst_329 : tensor<4096x32x1xf16>
    %cst_232 = util.global.load @cst_232 : tensor<4096x32x1xf16>
    %cst_388 = util.global.load @cst_388 : tensor<4096x32x1xf16>
    %cst_704 = util.global.load @cst_704 : tensor<4096xf16>
    %cst_410 = util.global.load @cst_410 : tensor<11008x32x1xf16>
    %cst_425 = util.global.load @cst_425 : tensor<4096x32x1xf16>
    %cst_238 = util.global.load @cst_238 : tensor<4096x86x1xf16>
    %cst_539 = util.global.load @cst_539 : tensor<4096x32x1xf16>
    %cst_327 = util.global.load @cst_327 : tensor<4096x32x1xf16>
    %cst_638 = util.global.load @cst_638 : tensor<4096x32x1xf16>
    %cst_27 = util.global.load @cst_27 : tensor<4096x11008xi4>
    %cst_362 = util.global.load @cst_362 : tensor<4096x32x1xf16>
    %cst_249 = util.global.load @cst_249 : tensor<4096x32x1xf16>
    %cst_106 = util.global.load @cst_106 : tensor<11008x4096xi4>
    %cst_698 = util.global.load @cst_698 : tensor<4096xf16>
    %cst_298 = util.global.load @cst_298 : tensor<11008x32x1xf16>
    %cst_434 = util.global.load @cst_434 : tensor<4096x86x1xf16>
    %cst_381 = util.global.load @cst_381 : tensor<11008x32x1xf16>
    %cst_496 = util.global.load @cst_496 : tensor<4096x32x1xf16>
    %cst_494 = util.global.load @cst_494 : tensor<11008x32x1xf16>
    %cst_143 = util.global.load @cst_143 : tensor<4096x4096xi4>
    %cst_69 = util.global.load @cst_69 : tensor<4096x11008xi4>
    %cst_645 = util.global.load @cst_645 : tensor<11008x32x1xf16>
    %cst_720 = util.global.load @cst_720 : tensor<4096xf16>
    %cst_305 = util.global.load @cst_305 : tensor<4096x32x1xf16>
    %cst_50 = util.global.load @cst_50 : tensor<11008x4096xi4>
    %cst_526 = util.global.load @cst_526 : tensor<4096x32x1xf16>
    %cst_669 = util.global.load @cst_669 : tensor<4096x32x1xf16>
    %cst_97 = util.global.load @cst_97 : tensor<4096x11008xi4>
    %cst_568 = util.global.load @cst_568 : tensor<4096x32x1xf16>
    %cst_576 = util.global.load @cst_576 : tensor<11008x32x1xf16>
    %cst_6 = util.global.load @cst_6 : tensor<4096x11008xi4>
    %cst_625 = util.global.load @cst_625 : tensor<4096x32x1xf16>
    %cst_210 = util.global.load @cst_210 : tensor<11008x4096xi4>
    %cst_500 = util.global.load @cst_500 : tensor<4096x32x1xf16>
    %cst_662 = util.global.load @cst_662 : tensor<11008x32x1xf16>
    %cst_590 = util.global.load @cst_590 : tensor<11008x32x1xf16>
    %cst_198 = util.global.load @cst_198 : tensor<4096x4096xi4>
    %cst_172 = util.global.load @cst_172 : tensor<4096x4096xi4>
    %cst_10 = util.global.load @cst_10 : tensor<4096x4096xi4>
    %cst_111 = util.global.load @cst_111 : tensor<4096x11008xi4>
    %cst_205 = util.global.load @cst_205 : tensor<4096x4096xi4>
    %cst_594 = util.global.load @cst_594 : tensor<4096x32x1xf16>
    %cst_386 = util.global.load @cst_386 : tensor<4096x32x1xf16>
    %cst_272 = util.global.load @cst_272 : tensor<4096x32x1xf16>
    %cst_598 = util.global.load @cst_598 : tensor<4096x32x1xf16>
    %cst_283 = util.global.load @cst_283 : tensor<11008x32x1xf16>
    %cst_488 = util.global.load @cst_488 : tensor<4096x32x1xf16>
    %cst_20 = util.global.load @cst_20 : tensor<4096x11008xi4>
    %cst_316 = util.global.load @cst_316 : tensor<4096x32x1xf16>
    %cst_611 = util.global.load @cst_611 : tensor<4096x32x1xf16>
    %cst_212 = util.global.load @cst_212 : tensor<4096x4096xi4>
    %true = util.global.load @true : i1
    %cst_333 = util.global.load @cst_333 : tensor<4096x32x1xf16>
    %cst_738 = util.global.load @cst_738 : tensor<4096xf16>
    %cst_400 = util.global.load @cst_400 : tensor<4096x32x1xf16>
    %cst_560 = util.global.load @cst_560 : tensor<4096x86x1xf16>
    %cst_684 = util.global.load @cst_684 : tensor<4096xf16>
    %cst_179 = util.global.load @cst_179 : tensor<4096x4096xi4>
    %cst_528 = util.global.load @cst_528 : tensor<4096x32x1xf16>
    %cst_268 = util.global.load @cst_268 : tensor<11008x32x1xf16>
    %cst_90 = util.global.load @cst_90 : tensor<4096x11008xi4>
    %cst_654 = util.global.load @cst_654 : tensor<4096x32x1xf16>
    %cst_269 = util.global.load @cst_269 : tensor<11008x32x1xf16>
    %cst_186 = util.global.load @cst_186 : tensor<4096x4096xi4>
    %cst_463 = util.global.load @cst_463 : tensor<11008x32x1xf16>
    %cst_515 = util.global.load @cst_515 : tensor<4096x32x1xf16>
    %cst_43 = util.global.load @cst_43 : tensor<11008x4096xi4>
    %cst_416 = util.global.load @cst_416 : tensor<4096x32x1xf16>
    %cst_174 = util.global.load @cst_174 : tensor<4096x11008xi4>
    %cst_633 = util.global.load @cst_633 : tensor<11008x32x1xf16>
    %cst_22 = util.global.load @cst_22 : tensor<11008x4096xi4>
    %cst_450 = util.global.load @cst_450 : tensor<11008x32x1xf16>
    %cst_92 = util.global.load @cst_92 : tensor<11008x4096xi4>
    %cst_522 = util.global.load @cst_522 : tensor<11008x32x1xf16>
    %cst_0 = util.global.load @cst_0 : tensor<11008x4096xi4>
    %cst_38 = util.global.load @cst_38 : tensor<4096x4096xi4>
    %cst_341 = util.global.load @cst_341 : tensor<4096x32x1xf16>
    %cst_492 = util.global.load @cst_492 : tensor<11008x32x1xf16>
    %cst_270 = util.global.load @cst_270 : tensor<11008x32x1xf16>
    %cst_82 = util.global.load @cst_82 : tensor<4096x4096xi4>
    %cst_652 = util.global.load @cst_652 : tensor<4096x32x1xf16>
    %cst_399 = util.global.load @cst_399 : tensor<4096x32x1xf16>
    %cst_711 = util.global.load @cst_711 : tensor<4096xf16>
    %cst_374 = util.global.load @cst_374 : tensor<4096x32x1xf16>
    %cst_11 = util.global.load @cst_11 : tensor<4096x4096xi4>
    %cst_418 = util.global.load @cst_418 : tensor<4096x32x1xf16>
    %cst_355 = util.global.load @cst_355 : tensor<4096x32x1xf16>
    %cst_508 = util.global.load @cst_508 : tensor<11008x32x1xf16>
    %cst_547 = util.global.load @cst_547 : tensor<11008x32x1xf16>
    %cst_202 = util.global.load @cst_202 : tensor<4096x11008xi4>
    %cst_28 = util.global.load @cst_28 : tensor<11008x4096xi4>
    %cst_34 = util.global.load @cst_34 : tensor<4096x11008xi4>
    %cst_481 = util.global.load @cst_481 : tensor<4096x32x1xf16>
    %cst_122 = util.global.load @cst_122 : tensor<4096x4096xi4>
    %cst_84 = util.global.load @cst_84 : tensor<11008x4096xi4>
    %cst_47 = util.global.load @cst_47 : tensor<4096x4096xi4>
    %cst_108 = util.global.load @cst_108 : tensor<4096x4096xi4>
    %cst_531 = util.global.load @cst_531 : tensor<4096x86x1xf16>
    %cst_40 = util.global.load @cst_40 : tensor<4096x4096xi4>
    %cst_351 = util.global.load @cst_351 : tensor<11008x32x1xf16>
    %cst_74 = util.global.load @cst_74 : tensor<4096x4096xi4>
    %cst_380 = util.global.load @cst_380 : tensor<11008x32x1xf16>
    %cst_307 = util.global.load @cst_307 : tensor<4096x86x1xf16>
    %cst_382 = util.global.load @cst_382 : tensor<11008x32x1xf16>
    %cst_675 = util.global.load @cst_675 : tensor<4096xf16>
    %cst_277 = util.global.load @cst_277 : tensor<4096x32x1xf16>
    %cst_534 = util.global.load @cst_534 : tensor<11008x32x1xf16>
    %cst_729 = util.global.load @cst_729 : tensor<4096xf16>
    %cst_368 = util.global.load @cst_368 : tensor<11008x32x1xf16>
    %cst_116 = util.global.load @cst_116 : tensor<4096x4096xi4>
    %cst_195 = util.global.load @cst_195 : tensor<4096x11008xi4>
    %cst_21 = util.global.load @cst_21 : tensor<11008x4096xi4>
    %cst_89 = util.global.load @cst_89 : tensor<4096x4096xi4>
    %cst_194 = util.global.load @cst_194 : tensor<4096x4096xi4>
    %cst_363 = util.global.load @cst_363 : tensor<4096x86x1xf16>
    %cst_607 = util.global.load @cst_607 : tensor<4096x32x1xf16>
    %cst_361 = util.global.load @cst_361 : tensor<4096x32x1xf16>
    %cst_332 = util.global.load @cst_332 : tensor<4096x32x1xf16>
    %cst_295 = util.global.load @cst_295 : tensor<11008x32x1xf16>
    %cst_323 = util.global.load @cst_323 : tensor<11008x32x1xf16>
    %cst_517 = util.global.load @cst_517 : tensor<4096x86x1xf16>
    %cst_628 = util.global.load @cst_628 : tensor<4096x32x1xf16>
    %cst_637 = util.global.load @cst_637 : tensor<4096x32x1xf16>
    %cst_325 = util.global.load @cst_325 : tensor<11008x32x1xf16>
    %cst_129 = util.global.load @cst_129 : tensor<4096x4096xi4>
    %cst_657 = util.global.load @cst_657 : tensor<4096x86x1xf16>
    %cst_68 = util.global.load @cst_68 : tensor<4096x4096xi4>
    %cst_343 = util.global.load @cst_343 : tensor<4096x32x1xf16>
    %cst_258 = util.global.load @cst_258 : tensor<4096x32x1xf16>
    %cst_113 = util.global.load @cst_113 : tensor<11008x4096xi4>
    %cst_504 = util.global.load @cst_504 : tensor<4096x86x1xf16>
    %cst_51 = util.global.load @cst_51 : tensor<4096x4096xi4>
    %cst_409 = util.global.load @cst_409 : tensor<11008x32x1xf16>
    %cst_150 = util.global.load @cst_150 : tensor<4096x4096xi4>
    %cst_427 = util.global.load @cst_427 : tensor<4096x32x1xf16>
    %cst_726 = util.global.load @cst_726 : tensor<4096xf16>
    %cst_334 = util.global.load @cst_334 : tensor<4096x32x1xf16>
    %cst_730 = util.global.load @cst_730 : tensor<4096xf16>
    %cst_39 = util.global.load @cst_39 : tensor<4096x4096xi4>
    %cst_79 = util.global.load @cst_79 : tensor<4096x4096xi4>
    %cst_462 = util.global.load @cst_462 : tensor<4096x86x1xf16>
    %cst_538 = util.global.load @cst_538 : tensor<4096x32x1xf16>
    %cst_250 = util.global.load @cst_250 : tensor<4096x32x1xf16>
    %cst_322 = util.global.load @cst_322 : tensor<4096x86x1xf16>
    %cst_130 = util.global.load @cst_130 : tensor<4096x4096xi4>
    %cst_134 = util.global.load @cst_134 : tensor<11008x4096xi4>
    %cst_543 = util.global.load @cst_543 : tensor<4096x32x1xf16>
    %cst_53 = util.global.load @cst_53 : tensor<4096x4096xi4>
    %cst_13 = util.global.load @cst_13 : tensor<4096x11008xi4>
    %cst_604 = util.global.load @cst_604 : tensor<11008x32x1xf16>
    %cst_155 = util.global.load @cst_155 : tensor<11008x4096xi4>
    %cst_426 = util.global.load @cst_426 : tensor<4096x32x1xf16>
    %cst_140 = util.global.load @cst_140 : tensor<11008x4096xi4>
    %cst_414 = util.global.load @cst_414 : tensor<4096x32x1xf16>
    %cst_505 = util.global.load @cst_505 : tensor<11008x32x1xf16>
    %cst_287 = util.global.load @cst_287 : tensor<4096x32x1xf16>
    %cst_42 = util.global.load @cst_42 : tensor<11008x4096xi4>
    %cst_366 = util.global.load @cst_366 : tensor<11008x32x1xf16>
    %cst_480 = util.global.load @cst_480 : tensor<11008x32x1xf16>
    %cst_81 = util.global.load @cst_81 : tensor<4096x4096xi4>
    %cst_137 = util.global.load @cst_137 : tensor<4096x4096xi4>
    %cst_408 = util.global.load @cst_408 : tensor<11008x32x1xf16>
    %cst_147 = util.global.load @cst_147 : tensor<11008x4096xi4>
    %cst_209 = util.global.load @cst_209 : tensor<4096x11008xi4>
    %cst_37 = util.global.load @cst_37 : tensor<4096x4096xi4>
    %cst_567 = util.global.load @cst_567 : tensor<4096x32x1xf16>
    %cst_658 = util.global.load @cst_658 : tensor<4096x86x1xf16>
    %cst_411 = util.global.load @cst_411 : tensor<4096x32x1xf16>
    %cst_206 = util.global.load @cst_206 : tensor<4096x4096xi4>
    %cst_80 = util.global.load @cst_80 : tensor<4096x4096xi4>
    %cst_614 = util.global.load @cst_614 : tensor<4096x32x1xf16>
    %cst_700 = util.global.load @cst_700 : tensor<4096xf16>
    %cst_204 = util.global.load @cst_204 : tensor<11008x4096xi4>
    %cst_588 = util.global.load @cst_588 : tensor<4096x86x1xf16>
    %cst_371 = util.global.load @cst_371 : tensor<4096x32x1xf16>
    %cst_230 = util.global.load @cst_230 : tensor<4096x32x1xf16>
    %cst_62 = util.global.load @cst_62 : tensor<4096x11008xi4>
    %cst_142 = util.global.load @cst_142 : tensor<4096x4096xi4>
    %cst_292 = util.global.load @cst_292 : tensor<4096x32x1xf16>
    %cst_88 = util.global.load @cst_88 : tensor<4096x4096xi4>
    %cst_473 = util.global.load @cst_473 : tensor<4096x32x1xf16>
    %cst_387 = util.global.load @cst_387 : tensor<4096x32x1xf16>
    %cst_742 = util.global.load @cst_742 : f16
    %cst_578 = util.global.load @cst_578 : tensor<11008x32x1xf16>
    %cst_83 = util.global.load @cst_83 : tensor<4096x11008xi4>
    %cst_154 = util.global.load @cst_154 : tensor<11008x4096xi4>
    %cst_197 = util.global.load @cst_197 : tensor<11008x4096xi4>
    %cst_525 = util.global.load @cst_525 : tensor<4096x32x1xf16>
    %cst_640 = util.global.load @cst_640 : tensor<4096x32x1xf16>
    %cst_299 = util.global.load @cst_299 : tensor<4096x32x1xf16>
    %cst_100 = util.global.load @cst_100 : tensor<4096x4096xi4>
    %cst_144 = util.global.load @cst_144 : tensor<4096x4096xi4>
    %cst_354 = util.global.load @cst_354 : tensor<11008x32x1xf16>
    %cst_689 = util.global.load @cst_689 : tensor<4096xf16>
    %cst_732 = util.global.load @cst_732 : tensor<4096xf16>
    %cst_226 = util.global.load @cst_226 : tensor<11008x32x1xf16>
    %cst_415 = util.global.load @cst_415 : tensor<4096x32x1xf16>
    %cst_101 = util.global.load @cst_101 : tensor<4096x4096xi4>
    %cst_714 = util.global.load @cst_714 : tensor<4096xf16>
    %cst_132 = util.global.load @cst_132 : tensor<4096x11008xi4>
    %cst_446 = util.global.load @cst_446 : tensor<4096x32x1xf16>
    %cst_57 = util.global.load @cst_57 : tensor<11008x4096xi4>
    %cst_337 = util.global.load @cst_337 : tensor<11008x32x1xf16>
    %cst_93 = util.global.load @cst_93 : tensor<4096x4096xi4>
    %cst_127 = util.global.load @cst_127 : tensor<11008x4096xi4>
    %cst_511 = util.global.load @cst_511 : tensor<4096x32x1xf16>
    %cst_622 = util.global.load @cst_622 : tensor<4096x32x1xf16>
    %cst_395 = util.global.load @cst_395 : tensor<11008x32x1xf16>
    %cst_279 = util.global.load @cst_279 : tensor<4096x86x1xf16>
    %cst_393 = util.global.load @cst_393 : tensor<11008x32x1xf16>
    %cst_135 = util.global.load @cst_135 : tensor<4096x4096xi4>
    %cst_12 = util.global.load @cst_12 : tensor<4096x4096xi4>
    %cst_278 = util.global.load @cst_278 : tensor<4096x32x1xf16>
    %cst_25 = util.global.load @cst_25 : tensor<4096x4096xi4>
    %cst_512 = util.global.load @cst_512 : tensor<4096x32x1xf16>
    %cst_370 = util.global.load @cst_370 : tensor<4096x32x1xf16>
    %cst_99 = util.global.load @cst_99 : tensor<11008x4096xi4>
    %cst_573 = util.global.load @cst_573 : tensor<4096x86x1xf16>
    %cst_661 = util.global.load @cst_661 : tensor<11008x32x1xf16>
    %cst_743 = util.global.load @cst_743 : f16
    %cst_98 = util.global.load @cst_98 : tensor<11008x4096xi4>
    %cst_656 = util.global.load @cst_656 : tensor<4096x32x1xf16>
    %cst_465 = util.global.load @cst_465 : tensor<11008x32x1xf16>
    %cst_237 = util.global.load @cst_237 : tensor<4096x86x1xf16>
    %cst_5 = util.global.load @cst_5 : tensor<4096x4096xi4>
    %cst_312 = util.global.load @cst_312 : tensor<11008x32x1xf16>
    %cst_514 = util.global.load @cst_514 : tensor<4096x32x1xf16>
    %cst_314 = util.global.load @cst_314 : tensor<4096x32x1xf16>
    %cst_540 = util.global.load @cst_540 : tensor<4096x32x1xf16>
    %cst_466 = util.global.load @cst_466 : tensor<11008x32x1xf16>
    %cst_691 = util.global.load @cst_691 : tensor<4096xf16>
    %cst_220 = util.global.load @cst_220 : tensor<4096x4096xi4>
    %cst_304 = util.global.load @cst_304 : tensor<4096x32x1xf16>
    %cst_429 = util.global.load @cst_429 : tensor<4096x32x1xf16>
    %cst_510 = util.global.load @cst_510 : tensor<4096x32x1xf16>
    %cst_554 = util.global.load @cst_554 : tensor<4096x32x1xf16>
    %cst_376 = util.global.load @cst_376 : tensor<4096x32x1xf16>
    %cst_550 = util.global.load @cst_550 : tensor<11008x32x1xf16>
    %cst_437 = util.global.load @cst_437 : tensor<11008x32x1xf16>
    %cst_311 = util.global.load @cst_311 : tensor<11008x32x1xf16>
    %cst_653 = util.global.load @cst_653 : tensor<4096x32x1xf16>
    %cst_685 = util.global.load @cst_685 : tensor<4096xf16>
    %cst_603 = util.global.load @cst_603 : tensor<11008x32x1xf16>
    %cst_353 = util.global.load @cst_353 : tensor<11008x32x1xf16>
    %cst_585 = util.global.load @cst_585 : tensor<4096x32x1xf16>
    %cst_671 = util.global.load @cst_671 : tensor<32000x4096xf16>
    %cst_301 = util.global.load @cst_301 : tensor<4096x32x1xf16>
    %cst_133 = util.global.load @cst_133 : tensor<11008x4096xi4>
    %cst_44 = util.global.load @cst_44 : tensor<4096x4096xi4>
    %cst_571 = util.global.load @cst_571 : tensor<4096x32x1xf16>
    %cst_617 = util.global.load @cst_617 : tensor<11008x32x1xf16>
    %cst_264 = util.global.load @cst_264 : tensor<4096x32x1xf16>
    %cst_359 = util.global.load @cst_359 : tensor<4096x32x1xf16>
    %cst_639 = util.global.load @cst_639 : tensor<4096x32x1xf16>
    %cst_46 = util.global.load @cst_46 : tensor<4096x4096xi4>
    %cst_30 = util.global.load @cst_30 : tensor<4096x4096xi4>
    %cst_412 = util.global.load @cst_412 : tensor<4096x32x1xf16>
    %cst_474 = util.global.load @cst_474 : tensor<4096x32x1xf16>
    %cst_582 = util.global.load @cst_582 : tensor<4096x32x1xf16>
    %cst_433 = util.global.load @cst_433 : tensor<4096x86x1xf16>
    %cst_648 = util.global.load @cst_648 : tensor<11008x32x1xf16>
    %cst_45 = util.global.load @cst_45 : tensor<4096x4096xi4>
    %cst_583 = util.global.load @cst_583 : tensor<4096x32x1xf16>
    %cst_350 = util.global.load @cst_350 : tensor<4096x86x1xf16>
    %cst_682 = util.global.load @cst_682 : tensor<4096xf16>
    %cst_448 = util.global.load @cst_448 : tensor<4096x86x1xf16>
    %cst_612 = util.global.load @cst_612 : tensor<4096x32x1xf16>
    %cst_643 = util.global.load @cst_643 : tensor<4096x86x1xf16>
    %cst_52 = util.global.load @cst_52 : tensor<4096x4096xi4>
    %cst_548 = util.global.load @cst_548 : tensor<11008x32x1xf16>
    %cst_702 = util.global.load @cst_702 : tensor<4096xf16>
    %cst_67 = util.global.load @cst_67 : tensor<4096x4096xi4>
    %cst_331 = util.global.load @cst_331 : tensor<4096x32x1xf16>
    %cst_148 = util.global.load @cst_148 : tensor<11008x4096xi4>
    %cst_347 = util.global.load @cst_347 : tensor<4096x32x1xf16>
    %cst_687 = util.global.load @cst_687 : tensor<4096xf16>
    %cst_73 = util.global.load @cst_73 : tensor<4096x4096xi4>
    %cst_41 = util.global.load @cst_41 : tensor<4096x11008xi4>
    %cst_431 = util.global.load @cst_431 : tensor<4096x32x1xf16>
    %cst_274 = util.global.load @cst_274 : tensor<4096x32x1xf16>
    %cst_659 = util.global.load @cst_659 : tensor<11008x32x1xf16>
    %cst_372 = util.global.load @cst_372 : tensor<4096x32x1xf16>
    %cst_695 = util.global.load @cst_695 : tensor<4096xf16>
    %cst_244 = util.global.load @cst_244 : tensor<4096x32x1xf16>
    %cst_138 = util.global.load @cst_138 : tensor<4096x4096xi4>
    %cst_627 = util.global.load @cst_627 : tensor<4096x32x1xf16>
    %cst_335 = util.global.load @cst_335 : tensor<4096x86x1xf16>
    %cst_667 = util.global.load @cst_667 : tensor<4096x32x1xf16>
    %cst_55 = util.global.load @cst_55 : tensor<4096x11008xi4>
    %cst_96 = util.global.load @cst_96 : tensor<4096x4096xi4>
    %cst_218 = util.global.load @cst_218 : tensor<11008x4096xi4>
    %cst_254 = util.global.load @cst_254 : tensor<11008x32x1xf16>
    %cst_219 = util.global.load @cst_219 : tensor<4096x4096xi4>
    %cst_356 = util.global.load @cst_356 : tensor<4096x32x1xf16>
    %cst_609 = util.global.load @cst_609 : tensor<4096x32x1xf16>
    %cst_459 = util.global.load @cst_459 : tensor<4096x32x1xf16>
    %cst_602 = util.global.load @cst_602 : tensor<4096x86x1xf16>
    %cst_731 = util.global.load @cst_731 : tensor<4096xf16>
    %cst_233 = util.global.load @cst_233 : tensor<4096x32x1xf16>
    %cst_352 = util.global.load @cst_352 : tensor<11008x32x1xf16>
    %cst_713 = util.global.load @cst_713 : tensor<4096xf16>
    %cst_338 = util.global.load @cst_338 : tensor<11008x32x1xf16>
    %cst_308 = util.global.load @cst_308 : tensor<4096x86x1xf16>
    %cst_63 = util.global.load @cst_63 : tensor<11008x4096xi4>
    %cst_185 = util.global.load @cst_185 : tensor<4096x4096xi4>
    %cst_115 = util.global.load @cst_115 : tensor<4096x4096xi4>
    %cst_32 = util.global.load @cst_32 : tensor<4096x4096xi4>
    %cst_117 = util.global.load @cst_117 : tensor<4096x4096xi4>
    %cst_253 = util.global.load @cst_253 : tensor<11008x32x1xf16>
    %cst_715 = util.global.load @cst_715 : tensor<4096xf16>
    %cst_696 = util.global.load @cst_696 : tensor<4096xf16>
    %cst_228 = util.global.load @cst_228 : tensor<11008x32x1xf16>
    %cst_619 = util.global.load @cst_619 : tensor<11008x32x1xf16>
    %cst_166 = util.global.load @cst_166 : tensor<4096x4096xi4>
    %cst_389 = util.global.load @cst_389 : tensor<4096x32x1xf16>
    %cst_419 = util.global.load @cst_419 : tensor<4096x86x1xf16>
    %cst_201 = util.global.load @cst_201 : tensor<4096x4096xi4>
    %cst_710 = util.global.load @cst_710 : tensor<4096xf16>
    %cst_460 = util.global.load @cst_460 : tensor<4096x32x1xf16>
    %cst_635 = util.global.load @cst_635 : tensor<4096x32x1xf16>
    %cst_498 = util.global.load @cst_498 : tensor<4096x32x1xf16>
    %cst_706 = util.global.load @cst_706 : tensor<4096xf16>
    %cst_248 = util.global.load @cst_248 : tensor<4096x32x1xf16>
    %cst_261 = util.global.load @cst_261 : tensor<4096x32x1xf16>
    %cst_211 = util.global.load @cst_211 : tensor<11008x4096xi4>
    %cst_241 = util.global.load @cst_241 : tensor<11008x32x1xf16>
    %cst_240 = util.global.load @cst_240 : tensor<11008x32x1xf16>
    %cst_213 = util.global.load @cst_213 : tensor<4096x4096xi4>
    %cst_707 = util.global.load @cst_707 : tensor<4096xf16>
    %cst_24 = util.global.load @cst_24 : tensor<4096x4096xi4>
    %cst_9 = util.global.load @cst_9 : tensor<4096x4096xi4>
    %cst_595 = util.global.load @cst_595 : tensor<4096x32x1xf16>
    %cst_641 = util.global.load @cst_641 : tensor<4096x32x1xf16>
    %cst_452 = util.global.load @cst_452 : tensor<11008x32x1xf16>
    %cst_377 = util.global.load @cst_377 : tensor<4096x86x1xf16>
    %cst_436 = util.global.load @cst_436 : tensor<11008x32x1xf16>
    %cst_574 = util.global.load @cst_574 : tensor<4096x86x1xf16>
    %cst_537 = util.global.load @cst_537 : tensor<4096x32x1xf16>
    %cst_94 = util.global.load @cst_94 : tensor<4096x4096xi4>
    %cst_173 = util.global.load @cst_173 : tensor<4096x4096xi4>
    %cst_273 = util.global.load @cst_273 : tensor<4096x32x1xf16>
    %cst_109 = util.global.load @cst_109 : tensor<4096x4096xi4>
    %cst_741 = util.global.load @cst_741 : f32
    %cst_223 = util.global.load @cst_223 : tensor<4096x86x1xf16>
    %cst_584 = util.global.load @cst_584 : tensor<4096x32x1xf16>
    %cst_378 = util.global.load @cst_378 : tensor<4096x86x1xf16>
    %cst_61 = util.global.load @cst_61 : tensor<4096x4096xi4>
    %cst_470 = util.global.load @cst_470 : tensor<4096x32x1xf16>
    %cst_417 = util.global.load @cst_417 : tensor<4096x32x1xf16>
    %cst_455 = util.global.load @cst_455 : tensor<4096x32x1xf16>
    %cst_664 = util.global.load @cst_664 : tensor<4096x32x1xf16>
    %cst_449 = util.global.load @cst_449 : tensor<11008x32x1xf16>
    %cst_328 = util.global.load @cst_328 : tensor<4096x32x1xf16>
    %cst_191 = util.global.load @cst_191 : tensor<4096x4096xi4>
    %cst_320 = util.global.load @cst_320 : tensor<4096x32x1xf16>
    %cst_319 = util.global.load @cst_319 : tensor<4096x32x1xf16>
    %cst_666 = util.global.load @cst_666 : tensor<4096x32x1xf16>
    %cst_636 = util.global.load @cst_636 : tensor<4096x32x1xf16>
    %cst_655 = util.global.load @cst_655 : tensor<4096x32x1xf16>
    %cst_49 = util.global.load @cst_49 : tensor<11008x4096xi4>
    %cst_126 = util.global.load @cst_126 : tensor<11008x4096xi4>
    %cst_471 = util.global.load @cst_471 : tensor<4096x32x1xf16>
    %cst_495 = util.global.load @cst_495 : tensor<4096x32x1xf16>
    %cst_686 = util.global.load @cst_686 : tensor<4096xf16>
    %cst_276 = util.global.load @cst_276 : tensor<4096x32x1xf16>
    %cst_672 = util.global.load @cst_672 : tensor<4096xf16>
    %cst_199 = util.global.load @cst_199 : tensor<4096x4096xi4>
    %cst_217 = util.global.load @cst_217 : tensor<11008x4096xi4>
    %cst_294 = util.global.load @cst_294 : tensor<4096x86x1xf16>
    %cst_54 = util.global.load @cst_54 : tensor<4096x4096xi4>
    %cst_165 = util.global.load @cst_165 : tensor<4096x4096xi4>
    %cst_693 = util.global.load @cst_693 : tensor<4096xf16>
    %cst_562 = util.global.load @cst_562 : tensor<11008x32x1xf16>
    %cst_330 = util.global.load @cst_330 : tensor<4096x32x1xf16>
    %cst_229 = util.global.load @cst_229 : tensor<4096x32x1xf16>
    %cst_558 = util.global.load @cst_558 : tensor<4096x32x1xf16>
    %cst_245 = util.global.load @cst_245 : tensor<4096x32x1xf16>
    %cst_487 = util.global.load @cst_487 : tensor<4096x32x1xf16>
    %cst_740 = util.global.load @cst_740 : f16
    %cst_300 = util.global.load @cst_300 : tensor<4096x32x1xf16>
    %cst_516 = util.global.load @cst_516 : tensor<4096x32x1xf16>
    %cst_572 = util.global.load @cst_572 : tensor<4096x32x1xf16>
    %cst_631 = util.global.load @cst_631 : tensor<11008x32x1xf16>
    %cst_670 = util.global.load @cst_670 : tensor<4096x32x1xf16>
    %cst_618 = util.global.load @cst_618 : tensor<11008x32x1xf16>
    %cst_293 = util.global.load @cst_293 : tensor<4096x86x1xf16>
    %cst_123 = util.global.load @cst_123 : tensor<4096x4096xi4>
    %cst_349 = util.global.load @cst_349 : tensor<4096x86x1xf16>
    %cst_445 = util.global.load @cst_445 : tensor<4096x32x1xf16>
    %cst_326 = util.global.load @cst_326 : tensor<11008x32x1xf16>
    %cst_60 = util.global.load @cst_60 : tensor<4096x4096xi4>
    %cst_402 = util.global.load @cst_402 : tensor<4096x32x1xf16>
    %cst_469 = util.global.load @cst_469 : tensor<4096x32x1xf16>
    %cst_467 = util.global.load @cst_467 : tensor<4096x32x1xf16>
    %cst_286 = util.global.load @cst_286 : tensor<4096x32x1xf16>
    %cst_484 = util.global.load @cst_484 : tensor<4096x32x1xf16>
    %cst_285 = util.global.load @cst_285 : tensor<4096x32x1xf16>
    %cst_456 = util.global.load @cst_456 : tensor<4096x32x1xf16>
    %cst_373 = util.global.load @cst_373 : tensor<4096x32x1xf16>
    %cst_556 = util.global.load @cst_556 : tensor<4096x32x1xf16>
    %cst_105 = util.global.load @cst_105 : tensor<11008x4096xi4>
    %cst_674 = util.global.load @cst_674 : tensor<4096xf16>
    %c32000 = util.global.load @c32000 : index
    %cst_266 = util.global.load @cst_266 : tensor<4096x86x1xf16>
    %cst_404 = util.global.load @cst_404 : tensor<4096x32x1xf16>
    %cst_451 = util.global.load @cst_451 : tensor<11008x32x1xf16>
    %cst_575 = util.global.load @cst_575 : tensor<11008x32x1xf16>
    %cst_1 = util.global.load @cst_1 : tensor<11008x4096xi4>
    %cst_564 = util.global.load @cst_564 : tensor<11008x32x1xf16>
    %cst_502 = util.global.load @cst_502 : tensor<4096x32x1xf16>
    %cst_472 = util.global.load @cst_472 : tensor<4096x32x1xf16>
    %cst_536 = util.global.load @cst_536 : tensor<11008x32x1xf16>
    %cst_546 = util.global.load @cst_546 : tensor<4096x86x1xf16>
    %cst_262 = util.global.load @cst_262 : tensor<4096x32x1xf16>
    %cst_78 = util.global.load @cst_78 : tensor<11008x4096xi4>
    %cst_200 = util.global.load @cst_200 : tensor<4096x4096xi4>
    %cst_475 = util.global.load @cst_475 : tensor<4096x86x1xf16>
    %cst_2 = util.global.load @cst_2 : tensor<4096x4096xi4>
    %cst_624 = util.global.load @cst_624 : tensor<4096x32x1xf16>
    %cst_357 = util.global.load @cst_357 : tensor<4096x32x1xf16>
    %cst_490 = util.global.load @cst_490 : tensor<4096x86x1xf16>
    %cst_86 = util.global.load @cst_86 : tensor<4096x4096xi4>
    %cst_153 = util.global.load @cst_153 : tensor<4096x11008xi4>
    %cst_310 = util.global.load @cst_310 : tensor<11008x32x1xf16>
    %cst_430 = util.global.load @cst_430 : tensor<4096x32x1xf16>
    %cst_440 = util.global.load @cst_440 : tensor<4096x32x1xf16>
    %cst_601 = util.global.load @cst_601 : tensor<4096x86x1xf16>
    %cst_71 = util.global.load @cst_71 : tensor<11008x4096xi4>
    %cst_694 = util.global.load @cst_694 : tensor<4096xf16>
    %cst_646 = util.global.load @cst_646 : tensor<11008x32x1xf16>
    %cst_545 = util.global.load @cst_545 : tensor<4096x86x1xf16>
    %cst_4 = util.global.load @cst_4 : tensor<4096x4096xi4>
    %cst_705 = util.global.load @cst_705 : tensor<4096xf16>
    %cst_369 = util.global.load @cst_369 : tensor<4096x32x1xf16>
    %cst_432 = util.global.load @cst_432 : tensor<4096x32x1xf16>
    %cst_297 = util.global.load @cst_297 : tensor<11008x32x1xf16>
    %cst_251 = util.global.load @cst_251 : tensor<4096x86x1xf16>
    %cst_681 = util.global.load @cst_681 : tensor<4096xf16>
    %cst_405 = util.global.load @cst_405 : tensor<4096x86x1xf16>
    %cst_723 = util.global.load @cst_723 : tensor<4096xf16>
    %cst_721 = util.global.load @cst_721 : tensor<4096xf16>
    %cst_630 = util.global.load @cst_630 : tensor<4096x86x1xf16>
    %cst_280 = util.global.load @cst_280 : tensor<4096x86x1xf16>
    %cst_744 = util.global.load @cst_744 : f64
    %cst_587 = util.global.load @cst_587 : tensor<4096x86x1xf16>
    %cst_91 = util.global.load @cst_91 : tensor<11008x4096xi4>
    %cst_181 = util.global.load @cst_181 : tensor<4096x11008xi4>
    %cst_346 = util.global.load @cst_346 : tensor<4096x32x1xf16>
    %dim = tensor.dim %arg1, %c2 : tensor<1x32x?x128xf16>
    %0 = arith.index_cast %dim : index to i64
    %1 = arith.addi %0, %c1_i64 : i64
    %2 = arith.index_cast %1 : i64 to index
    %3 = tensor.empty() : tensor<1xi64>
    %4 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} outs(%3 : tensor<1xi64>) {
    ^bb0(%out: i64):
      %2395 = linalg.index 0 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.addi %2396, %0 : i64
      linalg.yield %2397 : i64
    } -> tensor<1xi64>
    %expanded = tensor.expand_shape %4 [[0, 1]] : tensor<1xi64> into tensor<1x1xi64>
    %5 = tensor.empty() : tensor<1x1x4096xf16>
    %6 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg0 : tensor<1x1xi64>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2395 = arith.index_cast %in : i64 to index
      %2396 = linalg.index 2 : index
      %2397 = arith.cmpi slt, %2395, %c32000 : index
      cf.assert %2397, "index must be smaller than dim size"
      %2398 = arith.cmpi sge, %in, %c0_i64 : i64
      cf.assert %2398, "index must be larger or equal to 0"
      %extracted = tensor.extract %cst_739[%2395, %2396] : tensor<32000x4096xf16>
      linalg.yield %extracted : f16
    } -> tensor<1x1x4096xf16>
    %7 = tensor.empty(%2) : tensor<1x?xi1>
    %expanded_0 = tensor.expand_shape %7 [[0], [1, 2, 3]] : tensor<1x?xi1> into tensor<1x1x1x?xi1>
    %8 = linalg.fill ins(%true : i1) outs(%expanded_0 : tensor<1x1x1x?xi1>) -> tensor<1x1x1x?xi1>
    %9 = tensor.empty(%2) : tensor<1x1x1x?xf16>
    %10 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%8 : tensor<1x1x1x?xi1>) outs(%9 : tensor<1x1x1x?xf16>) {
    ^bb0(%in: i1, %out: f16):
      %2395 = arith.uitofp %in : i1 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x1x?xf16>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%10 : tensor<1x1x1x?xf16>) outs(%9 : tensor<1x1x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.subf %cst_743, %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x1x?xf16>
    %12 = tensor.empty(%2) : tensor<1x1x1x?xi1>
    %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%11 : tensor<1x1x1x?xf16>) outs(%12 : tensor<1x1x1x?xi1>) {
    ^bb0(%in: f16, %out: i1):
      %2395 = arith.cmpf une, %in, %cst_740 : f16
      linalg.yield %2395 : i1
    } -> tensor<1x1x1x?xi1>
    %14 = tensor.empty() : tensor<f64>
    %15 = linalg.fill ins(%cst_744 : f64) outs(%14 : tensor<f64>) -> tensor<f64>
    %16 = tensor.empty() : tensor<f16>
    %17 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%15 : tensor<f64>) outs(%16 : tensor<f16>) {
    ^bb0(%in: f64, %out: f16):
      %2395 = arith.truncf %in : f64 to f16
      linalg.yield %2395 : f16
    } -> tensor<f16>
    %18 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> ()>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%13, %17, %11 : tensor<1x1x1x?xi1>, tensor<f16>, tensor<1x1x1x?xf16>) outs(%9 : tensor<1x1x1x?xf16>) {
    ^bb0(%in: i1, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.select %in, %in_1189, %in_1190 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x1x?xf16>
    %19 = tensor.empty() : tensor<1x1x4096xf32>
    %20 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%6 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %21 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%20 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %22 = tensor.empty() : tensor<1x1x1xf32>
    %23 = linalg.fill ins(%cst_741 : f32) outs(%22 : tensor<1x1x1xf32>) -> tensor<1x1x1xf32>
    %24 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%21 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %25 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%24 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %26 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%25 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %27 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%26 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %28 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%6, %27 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %29 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%28 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %30 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_738, %29 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1 = tensor.expand_shape %30 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_2 = tensor.expand_shape %cst_222 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %31 = tensor.empty() : tensor<4096x32x128xf16>
    %32 = linalg.fill ins(%cst_740 : f16) outs(%5 : tensor<1x1x4096xf16>) -> tensor<1x1x4096xf16>
    %33 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2, %cst_670, %cst_669 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %34 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1, %33 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_3 = tensor.expand_shape %cst_221 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %35 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3, %cst_668, %cst_667 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %36 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1, %35 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_4 = tensor.expand_shape %cst_220 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %37 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4, %cst_666, %cst_665 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %38 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1, %37 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_5 = tensor.expand_shape %34 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %39 = tensor.empty() : tensor<1x32x1x128xf16>
    %40 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_5 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_6 = tensor.expand_shape %36 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %41 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_6 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_7 = tensor.expand_shape %38 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %42 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_7 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice = tensor.extract_slice %cst_737[0, 0, 0, 0] [1, 1, %2, 128] [1, 1, 1, 1] : tensor<1x1x4096x128xf16> to tensor<1x1x?x128xf16>
    %extracted_slice_8 = tensor.extract_slice %cst_736[0, 0, 0, 0] [1, 1, %2, 128] [1, 1, 1, 1] : tensor<1x1x4096x128xf16> to tensor<1x1x?x128xf16>
    %collapsed = tensor.collapse_shape %extracted_slice [[0, 1, 2], [3]] : tensor<1x1x?x128xf16> into tensor<?x128xf16>
    %collapsed_9 = tensor.collapse_shape %extracted_slice_8 [[0, 1, 2], [3]] : tensor<1x1x?x128xf16> into tensor<?x128xf16>
    %43 = tensor.empty() : tensor<1x1x128xf16>
    %44 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded : tensor<1x1xi64>) outs(%43 : tensor<1x1x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2395 = arith.cmpi slt, %in, %c0_i64 : i64
      %2396 = arith.addi %in, %1 : i64
      %2397 = arith.select %2395, %2396, %in : i64
      %2398 = arith.index_cast %2397 : i64 to index
      %2399 = linalg.index 2 : index
      %extracted = tensor.extract %collapsed[%2398, %2399] : tensor<?x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<1x1x128xf16>
    %expanded_10 = tensor.expand_shape %44 [[0], [1, 2], [3]] : tensor<1x1x128xf16> into tensor<1x1x1x128xf16>
    %45 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded : tensor<1x1xi64>) outs(%43 : tensor<1x1x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2395 = arith.cmpi slt, %in, %c0_i64 : i64
      %2396 = arith.addi %in, %1 : i64
      %2397 = arith.select %2395, %2396, %in : i64
      %2398 = arith.index_cast %2397 : i64 to index
      %2399 = linalg.index 2 : index
      %extracted = tensor.extract %collapsed_9[%2398, %2399] : tensor<?x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<1x1x128xf16>
    %expanded_11 = tensor.expand_shape %45 [[0], [1, 2], [3]] : tensor<1x1x128xf16> into tensor<1x1x1x128xf16>
    %46 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%40, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_12 = tensor.extract_slice %40[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_13 = tensor.extract_slice %40[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %47 = tensor.empty() : tensor<1x32x1x64xf16>
    %48 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_13 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %49 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%48 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %50 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_12 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice = tensor.insert_slice %49 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_14 = tensor.insert_slice %50 into %inserted_slice[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %51 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_14, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %52 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%46, %51 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %53 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%41, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_15 = tensor.extract_slice %41[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_16 = tensor.extract_slice %41[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %54 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_16 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %55 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%54 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %56 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_15 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_17 = tensor.insert_slice %55 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_18 = tensor.insert_slice %56 into %inserted_slice_17[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %57 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_18, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %58 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%53, %57 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_19 = tensor.dim %arg1, %c2 : tensor<1x32x?x128xf16>
    %59 = tensor.empty(%dim_19) : tensor<1x32x?x128xf16>
    %60 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg1 : tensor<1x32x?x128xf16>) outs(%59 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %61 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%58 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %62 = arith.addi %dim_19, %c1 : index
    %63 = tensor.empty(%62) : tensor<1x32x?x128xf16>
    %inserted_slice_20 = tensor.insert_slice %60 into %63[0, 0, 0, 0] [1, 32, %dim_19, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_21 = tensor.insert_slice %61 into %inserted_slice_20[0, 0, %dim_19, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_22 = tensor.dim %arg2, %c2 : tensor<1x32x?x128xf16>
    %64 = tensor.empty(%dim_22) : tensor<1x32x?x128xf16>
    %65 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg2 : tensor<1x32x?x128xf16>) outs(%64 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %66 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%42 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %67 = arith.addi %dim_22, %c1 : index
    %68 = tensor.empty(%67) : tensor<1x32x?x128xf16>
    %inserted_slice_23 = tensor.insert_slice %65 into %68[0, 0, 0, 0] [1, 32, %dim_22, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_24 = tensor.insert_slice %66 into %inserted_slice_23[0, 0, %dim_22, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %69 = tensor.empty(%2) : tensor<1x32x128x?xf16>
    %cast = tensor.cast %inserted_slice_21 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %70 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_25 = tensor.collapse_shape %52 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_26 = tensor.collapse_shape %70 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %71 = tensor.empty(%2) : tensor<32x1x?xf16>
    %72 = linalg.fill ins(%cst_740 : f16) outs(%71 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %73 = linalg.batch_matmul ins(%collapsed_25, %collapsed_26 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_27 = tensor.expand_shape %73 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %74 = tensor.empty(%2) : tensor<1x32x1x?xf16>
    %75 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_27 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %76 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%75, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %77 = tensor.empty() : tensor<1x32x1x1xi64>
    %78 = linalg.fill ins(%c0_i64 : i64) outs(%77 : tensor<1x32x1x1xi64>) -> tensor<1x32x1x1xi64>
    %79 = tensor.empty() : tensor<1x32x1x1xf16>
    %80 = linalg.fill ins(%cst_742 : f16) outs(%79 : tensor<1x32x1x1xf16>) -> tensor<1x32x1x1xf16>
    %81:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%76 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %82 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%76, %81#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %83 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%82 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %84 = linalg.fill ins(%cst_740 : f16) outs(%79 : tensor<1x32x1x1xf16>) -> tensor<1x32x1x1xf16>
    %85 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%83 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %86 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%83, %85 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_28 = tensor.collapse_shape %86 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_29 = tensor.cast %inserted_slice_24 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_30 = tensor.collapse_shape %cast_29 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %87 = tensor.empty() : tensor<32x1x128xf16>
    %88 = linalg.fill ins(%cst_740 : f16) outs(%87 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %89 = linalg.batch_matmul ins(%collapsed_28, %collapsed_30 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_31 = tensor.expand_shape %89 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %90 = tensor.empty() : tensor<1x1x32x128xf16>
    %91 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_31 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_32 = tensor.collapse_shape %91 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_33 = tensor.expand_shape %collapsed_32 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_34 = tensor.expand_shape %cst_219 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %92 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_34, %cst_664, %cst_663 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %93 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_33, %92 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %94 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%6, %93 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %95 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%94 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %96 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%95 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %97 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%96 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %98 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%97 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %99 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%98 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%99 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%94, %100 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%101 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_735, %102 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_35 = tensor.expand_shape %103 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_36 = tensor.expand_shape %cst_218 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %104 = tensor.empty() : tensor<11008x32x128xf16>
    %105 = tensor.empty() : tensor<1x1x11008xf16>
    %106 = linalg.fill ins(%cst_740 : f16) outs(%105 : tensor<1x1x11008xf16>) -> tensor<1x1x11008xf16>
    %107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_36, %cst_662, %cst_661 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %108 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_35, %107 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%108 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%109, %108 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_37 = tensor.expand_shape %cst_217 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %111 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_37, %cst_660, %cst_659 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_35, %111 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%110, %112 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_38 = tensor.expand_shape %113 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_39 = tensor.expand_shape %cst_216 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %114 = tensor.empty() : tensor<4096x86x128xf16>
    %115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_39, %cst_658, %cst_657 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_38, %115 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%94, %116 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%117 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%118 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %120 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%119 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%120 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%121 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%122 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%117, %123 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%124 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_734, %125 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_40 = tensor.expand_shape %126 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_41 = tensor.expand_shape %cst_215 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_41, %cst_656, %cst_655 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_40, %127 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_42 = tensor.expand_shape %cst_214 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_42, %cst_654, %cst_653 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_40, %129 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_43 = tensor.expand_shape %cst_213 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_43, %cst_652, %cst_651 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %132 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_40, %131 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_44 = tensor.expand_shape %128 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_44 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_45 = tensor.expand_shape %130 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_45 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_46 = tensor.expand_shape %132 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_46 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %136 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%133, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_47 = tensor.extract_slice %133[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_48 = tensor.extract_slice %133[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_48 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%137 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_47 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_49 = tensor.insert_slice %138 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_50 = tensor.insert_slice %139 into %inserted_slice_49[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_50, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%136, %140 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%134, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_51 = tensor.extract_slice %134[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_52 = tensor.extract_slice %134[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_52 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%143 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_51 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_53 = tensor.insert_slice %144 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_54 = tensor.insert_slice %145 into %inserted_slice_53[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_54, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%142, %146 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_55 = tensor.dim %arg3, %c2 : tensor<1x32x?x128xf16>
    %148 = tensor.empty(%dim_55) : tensor<1x32x?x128xf16>
    %149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg3 : tensor<1x32x?x128xf16>) outs(%148 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%147 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %151 = arith.addi %dim_55, %c1 : index
    %152 = tensor.empty(%151) : tensor<1x32x?x128xf16>
    %inserted_slice_56 = tensor.insert_slice %149 into %152[0, 0, 0, 0] [1, 32, %dim_55, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_57 = tensor.insert_slice %150 into %inserted_slice_56[0, 0, %dim_55, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_58 = tensor.dim %arg4, %c2 : tensor<1x32x?x128xf16>
    %153 = tensor.empty(%dim_58) : tensor<1x32x?x128xf16>
    %154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg4 : tensor<1x32x?x128xf16>) outs(%153 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%135 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %156 = arith.addi %dim_58, %c1 : index
    %157 = tensor.empty(%156) : tensor<1x32x?x128xf16>
    %inserted_slice_59 = tensor.insert_slice %154 into %157[0, 0, 0, 0] [1, 32, %dim_58, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_60 = tensor.insert_slice %155 into %inserted_slice_59[0, 0, %dim_58, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_61 = tensor.cast %inserted_slice_57 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_61 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_62 = tensor.collapse_shape %141 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_63 = tensor.collapse_shape %158 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %159 = linalg.batch_matmul ins(%collapsed_62, %collapsed_63 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_64 = tensor.expand_shape %159 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_64 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%160, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %162:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%161 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%161, %162#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%163 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%164 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%164, %165 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_65 = tensor.collapse_shape %166 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_66 = tensor.cast %inserted_slice_60 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_67 = tensor.collapse_shape %cast_66 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %167 = linalg.batch_matmul ins(%collapsed_65, %collapsed_67 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_68 = tensor.expand_shape %167 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_68 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_69 = tensor.collapse_shape %168 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_70 = tensor.expand_shape %collapsed_69 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_71 = tensor.expand_shape %cst_212 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_71, %cst_650, %cst_649 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_70, %169 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%117, %170 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%171 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%172 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%173 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%174 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%175 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%176 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%171, %177 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%178 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_733, %179 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_72 = tensor.expand_shape %180 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_73 = tensor.expand_shape %cst_211 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_73, %cst_648, %cst_647 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_72, %181 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%182 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%183, %182 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_74 = tensor.expand_shape %cst_210 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_74, %cst_646, %cst_645 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_72, %185 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%184, %186 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_75 = tensor.expand_shape %187 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_76 = tensor.expand_shape %cst_209 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_76, %cst_644, %cst_643 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_75, %188 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%171, %189 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%190 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%191 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%192 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%193 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%194 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %196 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%195 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %197 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%190, %196 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%197 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_732, %198 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_77 = tensor.expand_shape %199 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_78 = tensor.expand_shape %cst_208 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_78, %cst_642, %cst_641 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_77, %200 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_79 = tensor.expand_shape %cst_207 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_79, %cst_640, %cst_639 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_77, %202 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_80 = tensor.expand_shape %cst_206 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_80, %cst_638, %cst_637 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_77, %204 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_81 = tensor.expand_shape %201 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_81 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_82 = tensor.expand_shape %203 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_82 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_83 = tensor.expand_shape %205 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_83 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%206, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_84 = tensor.extract_slice %206[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_85 = tensor.extract_slice %206[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_85 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%210 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_84 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_86 = tensor.insert_slice %211 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_87 = tensor.insert_slice %212 into %inserted_slice_86[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_87, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%209, %213 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%207, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_88 = tensor.extract_slice %207[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_89 = tensor.extract_slice %207[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_89 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%216 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_88 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_90 = tensor.insert_slice %217 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_91 = tensor.insert_slice %218 into %inserted_slice_90[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_91, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%215, %219 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_92 = tensor.dim %arg5, %c2 : tensor<1x32x?x128xf16>
    %221 = tensor.empty(%dim_92) : tensor<1x32x?x128xf16>
    %222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg5 : tensor<1x32x?x128xf16>) outs(%221 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%220 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %224 = arith.addi %dim_92, %c1 : index
    %225 = tensor.empty(%224) : tensor<1x32x?x128xf16>
    %inserted_slice_93 = tensor.insert_slice %222 into %225[0, 0, 0, 0] [1, 32, %dim_92, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_94 = tensor.insert_slice %223 into %inserted_slice_93[0, 0, %dim_92, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_95 = tensor.dim %arg6, %c2 : tensor<1x32x?x128xf16>
    %226 = tensor.empty(%dim_95) : tensor<1x32x?x128xf16>
    %227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg6 : tensor<1x32x?x128xf16>) outs(%226 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%208 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %229 = arith.addi %dim_95, %c1 : index
    %230 = tensor.empty(%229) : tensor<1x32x?x128xf16>
    %inserted_slice_96 = tensor.insert_slice %227 into %230[0, 0, 0, 0] [1, 32, %dim_95, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_97 = tensor.insert_slice %228 into %inserted_slice_96[0, 0, %dim_95, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_98 = tensor.cast %inserted_slice_94 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_98 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_99 = tensor.collapse_shape %214 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_100 = tensor.collapse_shape %231 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %232 = linalg.batch_matmul ins(%collapsed_99, %collapsed_100 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_101 = tensor.expand_shape %232 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_101 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%233, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %235:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%234 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%234, %235#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%236 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%237 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%237, %238 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_102 = tensor.collapse_shape %239 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_103 = tensor.cast %inserted_slice_97 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_104 = tensor.collapse_shape %cast_103 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %240 = linalg.batch_matmul ins(%collapsed_102, %collapsed_104 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_105 = tensor.expand_shape %240 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_105 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_106 = tensor.collapse_shape %241 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_107 = tensor.expand_shape %collapsed_106 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_108 = tensor.expand_shape %cst_205 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_108, %cst_636, %cst_635 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_107, %242 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%190, %243 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%244 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%245 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%246 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%247 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%248 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%249 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%244, %250 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%251 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_731, %252 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_109 = tensor.expand_shape %253 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_110 = tensor.expand_shape %cst_204 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %254 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_110, %cst_634, %cst_633 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_109, %254 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %256 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%255 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%256, %255 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_111 = tensor.expand_shape %cst_203 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_111, %cst_632, %cst_631 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_109, %258 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%257, %259 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_112 = tensor.expand_shape %260 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_113 = tensor.expand_shape %cst_202 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_113, %cst_630, %cst_629 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_112, %261 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%244, %262 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%263 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%264 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%265 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%266 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%267 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%268 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%263, %269 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%270 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_730, %271 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_114 = tensor.expand_shape %272 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_115 = tensor.expand_shape %cst_201 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_115, %cst_628, %cst_627 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %274 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_114, %273 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_116 = tensor.expand_shape %cst_200 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_116, %cst_626, %cst_625 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %276 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_114, %275 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_117 = tensor.expand_shape %cst_199 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_117, %cst_624, %cst_623 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_114, %277 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_118 = tensor.expand_shape %274 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_118 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_119 = tensor.expand_shape %276 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_119 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_120 = tensor.expand_shape %278 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_120 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%279, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_121 = tensor.extract_slice %279[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_122 = tensor.extract_slice %279[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_122 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%283 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_121 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_123 = tensor.insert_slice %284 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_124 = tensor.insert_slice %285 into %inserted_slice_123[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_124, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%282, %286 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%280, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_125 = tensor.extract_slice %280[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_126 = tensor.extract_slice %280[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_126 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%289 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_125 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_127 = tensor.insert_slice %290 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_128 = tensor.insert_slice %291 into %inserted_slice_127[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_128, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%288, %292 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_129 = tensor.dim %arg7, %c2 : tensor<1x32x?x128xf16>
    %294 = tensor.empty(%dim_129) : tensor<1x32x?x128xf16>
    %295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg7 : tensor<1x32x?x128xf16>) outs(%294 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%293 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %297 = arith.addi %dim_129, %c1 : index
    %298 = tensor.empty(%297) : tensor<1x32x?x128xf16>
    %inserted_slice_130 = tensor.insert_slice %295 into %298[0, 0, 0, 0] [1, 32, %dim_129, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_131 = tensor.insert_slice %296 into %inserted_slice_130[0, 0, %dim_129, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_132 = tensor.dim %arg8, %c2 : tensor<1x32x?x128xf16>
    %299 = tensor.empty(%dim_132) : tensor<1x32x?x128xf16>
    %300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg8 : tensor<1x32x?x128xf16>) outs(%299 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%281 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %302 = arith.addi %dim_132, %c1 : index
    %303 = tensor.empty(%302) : tensor<1x32x?x128xf16>
    %inserted_slice_133 = tensor.insert_slice %300 into %303[0, 0, 0, 0] [1, 32, %dim_132, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_134 = tensor.insert_slice %301 into %inserted_slice_133[0, 0, %dim_132, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_135 = tensor.cast %inserted_slice_131 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_135 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_136 = tensor.collapse_shape %287 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_137 = tensor.collapse_shape %304 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %305 = linalg.batch_matmul ins(%collapsed_136, %collapsed_137 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_138 = tensor.expand_shape %305 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_138 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%306, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %308:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%307 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%307, %308#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%309 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%310 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%310, %311 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_139 = tensor.collapse_shape %312 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_140 = tensor.cast %inserted_slice_134 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_141 = tensor.collapse_shape %cast_140 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %313 = linalg.batch_matmul ins(%collapsed_139, %collapsed_141 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_142 = tensor.expand_shape %313 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_142 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_143 = tensor.collapse_shape %314 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_144 = tensor.expand_shape %collapsed_143 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_145 = tensor.expand_shape %cst_198 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_145, %cst_622, %cst_621 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_144, %315 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%263, %316 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%317 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%318 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%319 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%320 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%321 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%322 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%317, %323 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%324 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_729, %325 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_146 = tensor.expand_shape %326 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_147 = tensor.expand_shape %cst_197 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_147, %cst_620, %cst_619 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_146, %327 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%328 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%329, %328 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_148 = tensor.expand_shape %cst_196 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_148, %cst_618, %cst_617 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %332 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_146, %331 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%330, %332 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_149 = tensor.expand_shape %333 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_150 = tensor.expand_shape %cst_195 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_150, %cst_616, %cst_615 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_149, %334 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%317, %335 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%336 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%337 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%338 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%339 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%340 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%341 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%336, %342 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%343 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_728, %344 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_151 = tensor.expand_shape %345 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_152 = tensor.expand_shape %cst_194 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_152, %cst_614, %cst_613 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_151, %346 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_153 = tensor.expand_shape %cst_193 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_153, %cst_612, %cst_611 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_151, %348 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_154 = tensor.expand_shape %cst_192 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_154, %cst_610, %cst_609 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_151, %350 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_155 = tensor.expand_shape %347 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %352 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_155 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_156 = tensor.expand_shape %349 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_156 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_157 = tensor.expand_shape %351 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_157 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%352, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_158 = tensor.extract_slice %352[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_159 = tensor.extract_slice %352[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_159 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%356 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_158 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_160 = tensor.insert_slice %357 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_161 = tensor.insert_slice %358 into %inserted_slice_160[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_161, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%355, %359 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%353, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_162 = tensor.extract_slice %353[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_163 = tensor.extract_slice %353[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_163 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%362 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_162 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_164 = tensor.insert_slice %363 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_165 = tensor.insert_slice %364 into %inserted_slice_164[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_165, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%361, %365 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_166 = tensor.dim %arg9, %c2 : tensor<1x32x?x128xf16>
    %367 = tensor.empty(%dim_166) : tensor<1x32x?x128xf16>
    %368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg9 : tensor<1x32x?x128xf16>) outs(%367 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%366 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %370 = arith.addi %dim_166, %c1 : index
    %371 = tensor.empty(%370) : tensor<1x32x?x128xf16>
    %inserted_slice_167 = tensor.insert_slice %368 into %371[0, 0, 0, 0] [1, 32, %dim_166, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_168 = tensor.insert_slice %369 into %inserted_slice_167[0, 0, %dim_166, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_169 = tensor.dim %arg10, %c2 : tensor<1x32x?x128xf16>
    %372 = tensor.empty(%dim_169) : tensor<1x32x?x128xf16>
    %373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg10 : tensor<1x32x?x128xf16>) outs(%372 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%354 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %375 = arith.addi %dim_169, %c1 : index
    %376 = tensor.empty(%375) : tensor<1x32x?x128xf16>
    %inserted_slice_170 = tensor.insert_slice %373 into %376[0, 0, 0, 0] [1, 32, %dim_169, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_171 = tensor.insert_slice %374 into %inserted_slice_170[0, 0, %dim_169, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_172 = tensor.cast %inserted_slice_168 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_172 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_173 = tensor.collapse_shape %360 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_174 = tensor.collapse_shape %377 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %378 = linalg.batch_matmul ins(%collapsed_173, %collapsed_174 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_175 = tensor.expand_shape %378 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_175 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%379, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %381:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%380 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%380, %381#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%382 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%383 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%383, %384 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_176 = tensor.collapse_shape %385 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_177 = tensor.cast %inserted_slice_171 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_178 = tensor.collapse_shape %cast_177 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %386 = linalg.batch_matmul ins(%collapsed_176, %collapsed_178 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_179 = tensor.expand_shape %386 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_179 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_180 = tensor.collapse_shape %387 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_181 = tensor.expand_shape %collapsed_180 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_182 = tensor.expand_shape %cst_191 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_182, %cst_608, %cst_607 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_181, %388 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%336, %389 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%390 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%391 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%392 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %394 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%393 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%394 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %396 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%395 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %397 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%390, %396 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %398 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%397 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_727, %398 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_183 = tensor.expand_shape %399 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_184 = tensor.expand_shape %cst_190 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %400 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_184, %cst_606, %cst_605 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_183, %400 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %402 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%401 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %403 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%402, %401 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_185 = tensor.expand_shape %cst_189 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_185, %cst_604, %cst_603 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_183, %404 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%403, %405 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_186 = tensor.expand_shape %406 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_187 = tensor.expand_shape %cst_188 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_187, %cst_602, %cst_601 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %408 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_186, %407 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%390, %408 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %410 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%409 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%410 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %412 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%411 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %413 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%412 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %414 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%413 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%414 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %416 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%409, %415 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%416 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_726, %417 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_188 = tensor.expand_shape %418 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_189 = tensor.expand_shape %cst_187 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_189, %cst_600, %cst_599 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_188, %419 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_190 = tensor.expand_shape %cst_186 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_190, %cst_598, %cst_597 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_188, %421 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_191 = tensor.expand_shape %cst_185 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_191, %cst_596, %cst_595 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %424 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_188, %423 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_192 = tensor.expand_shape %420 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_192 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_193 = tensor.expand_shape %422 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_193 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_194 = tensor.expand_shape %424 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %427 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_194 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %428 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%425, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_195 = tensor.extract_slice %425[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_196 = tensor.extract_slice %425[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_196 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%429 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_195 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_197 = tensor.insert_slice %430 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_198 = tensor.insert_slice %431 into %inserted_slice_197[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_198, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%428, %432 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %434 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%426, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_199 = tensor.extract_slice %426[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_200 = tensor.extract_slice %426[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_200 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %436 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%435 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_199 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_201 = tensor.insert_slice %436 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_202 = tensor.insert_slice %437 into %inserted_slice_201[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_202, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%434, %438 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_203 = tensor.dim %arg11, %c2 : tensor<1x32x?x128xf16>
    %440 = tensor.empty(%dim_203) : tensor<1x32x?x128xf16>
    %441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg11 : tensor<1x32x?x128xf16>) outs(%440 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%439 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %443 = arith.addi %dim_203, %c1 : index
    %444 = tensor.empty(%443) : tensor<1x32x?x128xf16>
    %inserted_slice_204 = tensor.insert_slice %441 into %444[0, 0, 0, 0] [1, 32, %dim_203, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_205 = tensor.insert_slice %442 into %inserted_slice_204[0, 0, %dim_203, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_206 = tensor.dim %arg12, %c2 : tensor<1x32x?x128xf16>
    %445 = tensor.empty(%dim_206) : tensor<1x32x?x128xf16>
    %446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg12 : tensor<1x32x?x128xf16>) outs(%445 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%427 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %448 = arith.addi %dim_206, %c1 : index
    %449 = tensor.empty(%448) : tensor<1x32x?x128xf16>
    %inserted_slice_207 = tensor.insert_slice %446 into %449[0, 0, 0, 0] [1, 32, %dim_206, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_208 = tensor.insert_slice %447 into %inserted_slice_207[0, 0, %dim_206, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_209 = tensor.cast %inserted_slice_205 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %450 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_209 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_210 = tensor.collapse_shape %433 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_211 = tensor.collapse_shape %450 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %451 = linalg.batch_matmul ins(%collapsed_210, %collapsed_211 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_212 = tensor.expand_shape %451 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %452 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_212 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%452, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %454:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%453 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%453, %454#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%455 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%456 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%456, %457 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_213 = tensor.collapse_shape %458 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_214 = tensor.cast %inserted_slice_208 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_215 = tensor.collapse_shape %cast_214 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %459 = linalg.batch_matmul ins(%collapsed_213, %collapsed_215 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_216 = tensor.expand_shape %459 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_216 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_217 = tensor.collapse_shape %460 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_218 = tensor.expand_shape %collapsed_217 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_219 = tensor.expand_shape %cst_184 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_219, %cst_594, %cst_593 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_218, %461 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%409, %462 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%463 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%464 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%465 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %467 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%466 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%467 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%468 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %470 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%463, %469 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %471 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%470 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %472 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_725, %471 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_220 = tensor.expand_shape %472 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_221 = tensor.expand_shape %cst_183 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %473 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_221, %cst_592, %cst_591 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %474 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_220, %473 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %475 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%474 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %476 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%475, %474 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_222 = tensor.expand_shape %cst_182 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_222, %cst_590, %cst_589 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_220, %477 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%476, %478 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_223 = tensor.expand_shape %479 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_224 = tensor.expand_shape %cst_181 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_224, %cst_588, %cst_587 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_223, %480 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%463, %481 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%482 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%483 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %485 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%484 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %486 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%485 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%486 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %488 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%487 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %489 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%482, %488 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %490 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%489 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %491 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_724, %490 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_225 = tensor.expand_shape %491 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_226 = tensor.expand_shape %cst_180 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %492 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_226, %cst_586, %cst_585 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_225, %492 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_227 = tensor.expand_shape %cst_179 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %494 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_227, %cst_584, %cst_583 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %495 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_225, %494 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_228 = tensor.expand_shape %cst_178 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_228, %cst_582, %cst_581 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_225, %496 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_229 = tensor.expand_shape %493 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_229 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_230 = tensor.expand_shape %495 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_230 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_231 = tensor.expand_shape %497 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %500 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_231 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %501 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%498, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_232 = tensor.extract_slice %498[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_233 = tensor.extract_slice %498[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_233 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%502 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_232 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_234 = tensor.insert_slice %503 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_235 = tensor.insert_slice %504 into %inserted_slice_234[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %505 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_235, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%501, %505 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%499, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_236 = tensor.extract_slice %499[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_237 = tensor.extract_slice %499[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %508 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_237 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%508 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_236 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_238 = tensor.insert_slice %509 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_239 = tensor.insert_slice %510 into %inserted_slice_238[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %511 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_239, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %512 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%507, %511 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_240 = tensor.dim %arg13, %c2 : tensor<1x32x?x128xf16>
    %513 = tensor.empty(%dim_240) : tensor<1x32x?x128xf16>
    %514 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg13 : tensor<1x32x?x128xf16>) outs(%513 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %515 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%512 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %516 = arith.addi %dim_240, %c1 : index
    %517 = tensor.empty(%516) : tensor<1x32x?x128xf16>
    %inserted_slice_241 = tensor.insert_slice %514 into %517[0, 0, 0, 0] [1, 32, %dim_240, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_242 = tensor.insert_slice %515 into %inserted_slice_241[0, 0, %dim_240, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_243 = tensor.dim %arg14, %c2 : tensor<1x32x?x128xf16>
    %518 = tensor.empty(%dim_243) : tensor<1x32x?x128xf16>
    %519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg14 : tensor<1x32x?x128xf16>) outs(%518 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%500 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %521 = arith.addi %dim_243, %c1 : index
    %522 = tensor.empty(%521) : tensor<1x32x?x128xf16>
    %inserted_slice_244 = tensor.insert_slice %519 into %522[0, 0, 0, 0] [1, 32, %dim_243, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_245 = tensor.insert_slice %520 into %inserted_slice_244[0, 0, %dim_243, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_246 = tensor.cast %inserted_slice_242 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_246 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_247 = tensor.collapse_shape %506 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_248 = tensor.collapse_shape %523 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %524 = linalg.batch_matmul ins(%collapsed_247, %collapsed_248 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_249 = tensor.expand_shape %524 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_249 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %526 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%525, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %527:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%526 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %528 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%526, %527#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%528 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%529 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%529, %530 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_250 = tensor.collapse_shape %531 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_251 = tensor.cast %inserted_slice_245 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_252 = tensor.collapse_shape %cast_251 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %532 = linalg.batch_matmul ins(%collapsed_250, %collapsed_252 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_253 = tensor.expand_shape %532 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_253 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_254 = tensor.collapse_shape %533 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_255 = tensor.expand_shape %collapsed_254 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_256 = tensor.expand_shape %cst_177 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_256, %cst_580, %cst_579 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_255, %534 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%482, %535 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %537 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%536 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %538 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%537 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%538 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%539 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%540 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%541 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %543 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%536, %542 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %544 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%543 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_723, %544 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_257 = tensor.expand_shape %545 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_258 = tensor.expand_shape %cst_176 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %546 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_258, %cst_578, %cst_577 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_257, %546 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %548 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%547 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %549 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%548, %547 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_259 = tensor.expand_shape %cst_175 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %550 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_259, %cst_576, %cst_575 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_257, %550 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%549, %551 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_260 = tensor.expand_shape %552 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_261 = tensor.expand_shape %cst_174 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_261, %cst_574, %cst_573 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %554 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_260, %553 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%536, %554 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%555 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%556 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %558 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%557 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %559 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%558 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%559 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%560 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %562 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%555, %561 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%562 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_722, %563 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_262 = tensor.expand_shape %564 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_263 = tensor.expand_shape %cst_173 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %565 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_263, %cst_572, %cst_571 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_262, %565 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_264 = tensor.expand_shape %cst_172 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_264, %cst_570, %cst_569 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %568 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_262, %567 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_265 = tensor.expand_shape %cst_171 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %569 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_265, %cst_568, %cst_567 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %570 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_262, %569 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_266 = tensor.expand_shape %566 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_266 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_267 = tensor.expand_shape %568 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %572 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_267 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_268 = tensor.expand_shape %570 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %573 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_268 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %574 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%571, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_269 = tensor.extract_slice %571[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_270 = tensor.extract_slice %571[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_270 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%575 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_269 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_271 = tensor.insert_slice %576 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_272 = tensor.insert_slice %577 into %inserted_slice_271[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %578 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_272, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%574, %578 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%572, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_273 = tensor.extract_slice %572[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_274 = tensor.extract_slice %572[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_274 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%581 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_273 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_275 = tensor.insert_slice %582 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_276 = tensor.insert_slice %583 into %inserted_slice_275[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %584 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_276, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%580, %584 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_277 = tensor.dim %arg15, %c2 : tensor<1x32x?x128xf16>
    %586 = tensor.empty(%dim_277) : tensor<1x32x?x128xf16>
    %587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg15 : tensor<1x32x?x128xf16>) outs(%586 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %588 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%585 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %589 = arith.addi %dim_277, %c1 : index
    %590 = tensor.empty(%589) : tensor<1x32x?x128xf16>
    %inserted_slice_278 = tensor.insert_slice %587 into %590[0, 0, 0, 0] [1, 32, %dim_277, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_279 = tensor.insert_slice %588 into %inserted_slice_278[0, 0, %dim_277, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_280 = tensor.dim %arg16, %c2 : tensor<1x32x?x128xf16>
    %591 = tensor.empty(%dim_280) : tensor<1x32x?x128xf16>
    %592 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg16 : tensor<1x32x?x128xf16>) outs(%591 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %593 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%573 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %594 = arith.addi %dim_280, %c1 : index
    %595 = tensor.empty(%594) : tensor<1x32x?x128xf16>
    %inserted_slice_281 = tensor.insert_slice %592 into %595[0, 0, 0, 0] [1, 32, %dim_280, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_282 = tensor.insert_slice %593 into %inserted_slice_281[0, 0, %dim_280, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_283 = tensor.cast %inserted_slice_279 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_283 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_284 = tensor.collapse_shape %579 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_285 = tensor.collapse_shape %596 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %597 = linalg.batch_matmul ins(%collapsed_284, %collapsed_285 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_286 = tensor.expand_shape %597 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_286 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%598, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %600:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%599 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%599, %600#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%601 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%602 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %604 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%602, %603 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_287 = tensor.collapse_shape %604 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_288 = tensor.cast %inserted_slice_282 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_289 = tensor.collapse_shape %cast_288 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %605 = linalg.batch_matmul ins(%collapsed_287, %collapsed_289 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_290 = tensor.expand_shape %605 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %606 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_290 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_291 = tensor.collapse_shape %606 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_292 = tensor.expand_shape %collapsed_291 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_293 = tensor.expand_shape %cst_170 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_293, %cst_566, %cst_565 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %608 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_292, %607 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%555, %608 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %610 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%609 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%610 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %612 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%611 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %613 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%612 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%613 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%614 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %616 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%609, %615 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%616 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_721, %617 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_294 = tensor.expand_shape %618 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_295 = tensor.expand_shape %cst_169 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %619 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_295, %cst_564, %cst_563 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %620 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_294, %619 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%620 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %622 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%621, %620 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_296 = tensor.expand_shape %cst_168 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_296, %cst_562, %cst_561 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %624 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_294, %623 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%622, %624 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_297 = tensor.expand_shape %625 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_298 = tensor.expand_shape %cst_167 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %626 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_298, %cst_560, %cst_559 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %627 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_297, %626 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%609, %627 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%628 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %630 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%629 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%630 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %632 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%631 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%632 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%633 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %635 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%628, %634 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %636 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%635 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_720, %636 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_299 = tensor.expand_shape %637 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_300 = tensor.expand_shape %cst_166 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_300, %cst_558, %cst_557 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_299, %638 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_301 = tensor.expand_shape %cst_165 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_301, %cst_556, %cst_555 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %641 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_299, %640 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_302 = tensor.expand_shape %cst_164 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %642 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_302, %cst_554, %cst_553 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %643 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_299, %642 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_303 = tensor.expand_shape %639 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_303 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_304 = tensor.expand_shape %641 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_304 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_305 = tensor.expand_shape %643 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %646 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_305 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %647 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%644, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_306 = tensor.extract_slice %644[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_307 = tensor.extract_slice %644[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %648 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_307 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%648 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %650 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_306 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_308 = tensor.insert_slice %649 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_309 = tensor.insert_slice %650 into %inserted_slice_308[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %651 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_309, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %652 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%647, %651 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %653 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%645, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_310 = tensor.extract_slice %645[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_311 = tensor.extract_slice %645[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %654 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_311 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%654 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_310 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_312 = tensor.insert_slice %655 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_313 = tensor.insert_slice %656 into %inserted_slice_312[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_313, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%653, %657 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_314 = tensor.dim %arg17, %c2 : tensor<1x32x?x128xf16>
    %659 = tensor.empty(%dim_314) : tensor<1x32x?x128xf16>
    %660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg17 : tensor<1x32x?x128xf16>) outs(%659 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%658 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %662 = arith.addi %dim_314, %c1 : index
    %663 = tensor.empty(%662) : tensor<1x32x?x128xf16>
    %inserted_slice_315 = tensor.insert_slice %660 into %663[0, 0, 0, 0] [1, 32, %dim_314, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_316 = tensor.insert_slice %661 into %inserted_slice_315[0, 0, %dim_314, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_317 = tensor.dim %arg18, %c2 : tensor<1x32x?x128xf16>
    %664 = tensor.empty(%dim_317) : tensor<1x32x?x128xf16>
    %665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg18 : tensor<1x32x?x128xf16>) outs(%664 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %666 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%646 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %667 = arith.addi %dim_317, %c1 : index
    %668 = tensor.empty(%667) : tensor<1x32x?x128xf16>
    %inserted_slice_318 = tensor.insert_slice %665 into %668[0, 0, 0, 0] [1, 32, %dim_317, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_319 = tensor.insert_slice %666 into %inserted_slice_318[0, 0, %dim_317, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_320 = tensor.cast %inserted_slice_316 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %669 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_320 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_321 = tensor.collapse_shape %652 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_322 = tensor.collapse_shape %669 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %670 = linalg.batch_matmul ins(%collapsed_321, %collapsed_322 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_323 = tensor.expand_shape %670 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_323 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%671, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %673:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%672 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%672, %673#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%674 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%675 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%675, %676 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_324 = tensor.collapse_shape %677 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_325 = tensor.cast %inserted_slice_319 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_326 = tensor.collapse_shape %cast_325 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %678 = linalg.batch_matmul ins(%collapsed_324, %collapsed_326 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_327 = tensor.expand_shape %678 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_327 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_328 = tensor.collapse_shape %679 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_329 = tensor.expand_shape %collapsed_328 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_330 = tensor.expand_shape %cst_163 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_330, %cst_552, %cst_551 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %681 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_329, %680 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%628, %681 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%682 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %684 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%683 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %685 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%684 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %686 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%685 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %687 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%686 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %688 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%687 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %689 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%682, %688 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %690 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%689 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %691 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_719, %690 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_331 = tensor.expand_shape %691 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_332 = tensor.expand_shape %cst_162 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %692 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_332, %cst_550, %cst_549 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_331, %692 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %694 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%693 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %695 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%694, %693 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_333 = tensor.expand_shape %cst_161 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_333, %cst_548, %cst_547 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_331, %696 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%695, %697 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_334 = tensor.expand_shape %698 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_335 = tensor.expand_shape %cst_160 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_335, %cst_546, %cst_545 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %700 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_334, %699 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%682, %700 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %702 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%701 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %703 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%702 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %704 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%703 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %705 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%704 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %706 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%705 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %707 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%706 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %708 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%701, %707 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%708 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %710 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_718, %709 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_336 = tensor.expand_shape %710 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_337 = tensor.expand_shape %cst_159 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %711 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_337, %cst_544, %cst_543 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_336, %711 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_338 = tensor.expand_shape %cst_158 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_338, %cst_542, %cst_541 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %714 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_336, %713 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_339 = tensor.expand_shape %cst_157 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_339, %cst_540, %cst_539 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %716 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_336, %715 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_340 = tensor.expand_shape %712 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_340 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_341 = tensor.expand_shape %714 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_341 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_342 = tensor.expand_shape %716 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %719 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_342 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%717, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_343 = tensor.extract_slice %717[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_344 = tensor.extract_slice %717[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_344 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%721 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_343 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_345 = tensor.insert_slice %722 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_346 = tensor.insert_slice %723 into %inserted_slice_345[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %724 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_346, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%720, %724 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %726 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%718, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_347 = tensor.extract_slice %718[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_348 = tensor.extract_slice %718[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %727 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_348 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %728 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%727 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_347 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_349 = tensor.insert_slice %728 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_350 = tensor.insert_slice %729 into %inserted_slice_349[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %730 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_350, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %731 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%726, %730 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_351 = tensor.dim %arg19, %c2 : tensor<1x32x?x128xf16>
    %732 = tensor.empty(%dim_351) : tensor<1x32x?x128xf16>
    %733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg19 : tensor<1x32x?x128xf16>) outs(%732 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%731 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %735 = arith.addi %dim_351, %c1 : index
    %736 = tensor.empty(%735) : tensor<1x32x?x128xf16>
    %inserted_slice_352 = tensor.insert_slice %733 into %736[0, 0, 0, 0] [1, 32, %dim_351, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_353 = tensor.insert_slice %734 into %inserted_slice_352[0, 0, %dim_351, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_354 = tensor.dim %arg20, %c2 : tensor<1x32x?x128xf16>
    %737 = tensor.empty(%dim_354) : tensor<1x32x?x128xf16>
    %738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg20 : tensor<1x32x?x128xf16>) outs(%737 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%719 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %740 = arith.addi %dim_354, %c1 : index
    %741 = tensor.empty(%740) : tensor<1x32x?x128xf16>
    %inserted_slice_355 = tensor.insert_slice %738 into %741[0, 0, 0, 0] [1, 32, %dim_354, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_356 = tensor.insert_slice %739 into %inserted_slice_355[0, 0, %dim_354, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_357 = tensor.cast %inserted_slice_353 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %742 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_357 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_358 = tensor.collapse_shape %725 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_359 = tensor.collapse_shape %742 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %743 = linalg.batch_matmul ins(%collapsed_358, %collapsed_359 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_360 = tensor.expand_shape %743 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %744 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_360 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%744, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %746:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%745 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%745, %746#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%747 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%748 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%748, %749 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_361 = tensor.collapse_shape %750 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_362 = tensor.cast %inserted_slice_356 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_363 = tensor.collapse_shape %cast_362 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %751 = linalg.batch_matmul ins(%collapsed_361, %collapsed_363 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_364 = tensor.expand_shape %751 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_364 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_365 = tensor.collapse_shape %752 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_366 = tensor.expand_shape %collapsed_365 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_367 = tensor.expand_shape %cst_156 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_367, %cst_538, %cst_537 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %754 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_366, %753 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%701, %754 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%755 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%756 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%757 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%758 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%759 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%760 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %762 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%755, %761 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%762 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %764 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_717, %763 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_368 = tensor.expand_shape %764 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_369 = tensor.expand_shape %cst_155 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %765 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_369, %cst_536, %cst_535 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %766 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_368, %765 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %767 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%766 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %768 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%767, %766 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_370 = tensor.expand_shape %cst_154 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_370, %cst_534, %cst_533 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %770 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_368, %769 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%768, %770 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_371 = tensor.expand_shape %771 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_372 = tensor.expand_shape %cst_153 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_372, %cst_532, %cst_531 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_371, %772 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%755, %773 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%775 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%776 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%777 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %779 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%778 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%779 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %781 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774, %780 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %782 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%781 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %783 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_716, %782 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_373 = tensor.expand_shape %783 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_374 = tensor.expand_shape %cst_152 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %784 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_374, %cst_530, %cst_529 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %785 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_373, %784 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_375 = tensor.expand_shape %cst_151 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %786 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_375, %cst_528, %cst_527 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %787 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_373, %786 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_376 = tensor.expand_shape %cst_150 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %788 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_376, %cst_526, %cst_525 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %789 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_373, %788 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_377 = tensor.expand_shape %785 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_377 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_378 = tensor.expand_shape %787 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_378 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_379 = tensor.expand_shape %789 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %792 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_379 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%790, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_380 = tensor.extract_slice %790[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_381 = tensor.extract_slice %790[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_381 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%794 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_380 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_382 = tensor.insert_slice %795 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_383 = tensor.insert_slice %796 into %inserted_slice_382[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_383, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%793, %797 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %799 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%791, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_384 = tensor.extract_slice %791[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_385 = tensor.extract_slice %791[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %800 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_385 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %801 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%800 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %802 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_384 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_386 = tensor.insert_slice %801 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_387 = tensor.insert_slice %802 into %inserted_slice_386[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %803 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_387, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %804 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%799, %803 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_388 = tensor.dim %arg21, %c2 : tensor<1x32x?x128xf16>
    %805 = tensor.empty(%dim_388) : tensor<1x32x?x128xf16>
    %806 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg21 : tensor<1x32x?x128xf16>) outs(%805 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %807 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%804 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %808 = arith.addi %dim_388, %c1 : index
    %809 = tensor.empty(%808) : tensor<1x32x?x128xf16>
    %inserted_slice_389 = tensor.insert_slice %806 into %809[0, 0, 0, 0] [1, 32, %dim_388, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_390 = tensor.insert_slice %807 into %inserted_slice_389[0, 0, %dim_388, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_391 = tensor.dim %arg22, %c2 : tensor<1x32x?x128xf16>
    %810 = tensor.empty(%dim_391) : tensor<1x32x?x128xf16>
    %811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg22 : tensor<1x32x?x128xf16>) outs(%810 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%792 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %813 = arith.addi %dim_391, %c1 : index
    %814 = tensor.empty(%813) : tensor<1x32x?x128xf16>
    %inserted_slice_392 = tensor.insert_slice %811 into %814[0, 0, 0, 0] [1, 32, %dim_391, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_393 = tensor.insert_slice %812 into %inserted_slice_392[0, 0, %dim_391, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_394 = tensor.cast %inserted_slice_390 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_394 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_395 = tensor.collapse_shape %798 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_396 = tensor.collapse_shape %815 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %816 = linalg.batch_matmul ins(%collapsed_395, %collapsed_396 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_397 = tensor.expand_shape %816 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_397 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%817, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %819:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%818 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %820 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%818, %819#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%820 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %822 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%821 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%821, %822 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_398 = tensor.collapse_shape %823 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_399 = tensor.cast %inserted_slice_393 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_400 = tensor.collapse_shape %cast_399 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %824 = linalg.batch_matmul ins(%collapsed_398, %collapsed_400 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_401 = tensor.expand_shape %824 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_401 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_402 = tensor.collapse_shape %825 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_403 = tensor.expand_shape %collapsed_402 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_404 = tensor.expand_shape %cst_149 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %826 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_404, %cst_524, %cst_523 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_403, %826 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %828 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774, %827 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%828 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%829 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%830 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %832 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%831 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%832 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%833 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%828, %834 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%835 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_715, %836 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_405 = tensor.expand_shape %837 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_406 = tensor.expand_shape %cst_148 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %838 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_406, %cst_522, %cst_521 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_405, %838 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %840 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%839 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %841 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%840, %839 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_407 = tensor.expand_shape %cst_147 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %842 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_407, %cst_520, %cst_519 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %843 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_405, %842 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %844 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%841, %843 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_408 = tensor.expand_shape %844 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_409 = tensor.expand_shape %cst_146 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_409, %cst_518, %cst_517 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %846 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_408, %845 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%828, %846 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %848 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%847 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%848 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%849 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%850 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%851 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%852 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%847, %853 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%854 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_714, %855 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_410 = tensor.expand_shape %856 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_411 = tensor.expand_shape %cst_145 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_411, %cst_516, %cst_515 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_410, %857 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_412 = tensor.expand_shape %cst_144 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %859 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_412, %cst_514, %cst_513 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_410, %859 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_413 = tensor.expand_shape %cst_143 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_413, %cst_512, %cst_511 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %862 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_410, %861 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_414 = tensor.expand_shape %858 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %863 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_414 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_415 = tensor.expand_shape %860 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %864 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_415 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_416 = tensor.expand_shape %862 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %865 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_416 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %866 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%863, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_417 = tensor.extract_slice %863[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_418 = tensor.extract_slice %863[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %867 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_418 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%867 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_417 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_419 = tensor.insert_slice %868 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_420 = tensor.insert_slice %869 into %inserted_slice_419[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_420, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%866, %870 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%864, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_421 = tensor.extract_slice %864[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_422 = tensor.extract_slice %864[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_422 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%873 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_421 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_423 = tensor.insert_slice %874 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_424 = tensor.insert_slice %875 into %inserted_slice_423[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_424, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %877 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%872, %876 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_425 = tensor.dim %arg23, %c2 : tensor<1x32x?x128xf16>
    %878 = tensor.empty(%dim_425) : tensor<1x32x?x128xf16>
    %879 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg23 : tensor<1x32x?x128xf16>) outs(%878 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %880 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%877 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %881 = arith.addi %dim_425, %c1 : index
    %882 = tensor.empty(%881) : tensor<1x32x?x128xf16>
    %inserted_slice_426 = tensor.insert_slice %879 into %882[0, 0, 0, 0] [1, 32, %dim_425, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_427 = tensor.insert_slice %880 into %inserted_slice_426[0, 0, %dim_425, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_428 = tensor.dim %arg24, %c2 : tensor<1x32x?x128xf16>
    %883 = tensor.empty(%dim_428) : tensor<1x32x?x128xf16>
    %884 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg24 : tensor<1x32x?x128xf16>) outs(%883 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%865 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %886 = arith.addi %dim_428, %c1 : index
    %887 = tensor.empty(%886) : tensor<1x32x?x128xf16>
    %inserted_slice_429 = tensor.insert_slice %884 into %887[0, 0, 0, 0] [1, 32, %dim_428, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_430 = tensor.insert_slice %885 into %inserted_slice_429[0, 0, %dim_428, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_431 = tensor.cast %inserted_slice_427 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_431 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_432 = tensor.collapse_shape %871 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_433 = tensor.collapse_shape %888 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %889 = linalg.batch_matmul ins(%collapsed_432, %collapsed_433 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_434 = tensor.expand_shape %889 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_434 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%890, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %892:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%891 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%891, %892#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%893 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%894 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %896 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%894, %895 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_435 = tensor.collapse_shape %896 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_436 = tensor.cast %inserted_slice_430 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_437 = tensor.collapse_shape %cast_436 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %897 = linalg.batch_matmul ins(%collapsed_435, %collapsed_437 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_438 = tensor.expand_shape %897 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_438 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_439 = tensor.collapse_shape %898 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_440 = tensor.expand_shape %collapsed_439 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_441 = tensor.expand_shape %cst_142 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_441, %cst_510, %cst_509 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %900 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_440, %899 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%847, %900 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %902 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%901 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %903 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%902 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %904 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%903 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %905 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%904 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %906 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%905 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%906 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%901, %907 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%908 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_713, %909 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_442 = tensor.expand_shape %910 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_443 = tensor.expand_shape %cst_141 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_443, %cst_508, %cst_507 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_442, %911 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%912 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %914 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%913, %912 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_444 = tensor.expand_shape %cst_140 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_444, %cst_506, %cst_505 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %916 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_442, %915 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %917 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%914, %916 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_445 = tensor.expand_shape %917 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_446 = tensor.expand_shape %cst_139 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %918 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_446, %cst_504, %cst_503 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %919 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_445, %918 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %920 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%901, %919 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%920 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %922 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%921 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %923 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%922 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %924 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%923 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%924 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%925 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %927 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%920, %926 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%927 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_712, %928 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_447 = tensor.expand_shape %929 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_448 = tensor.expand_shape %cst_138 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %930 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_448, %cst_502, %cst_501 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_447, %930 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_449 = tensor.expand_shape %cst_137 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_449, %cst_500, %cst_499 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_447, %932 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_450 = tensor.expand_shape %cst_136 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %934 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_450, %cst_498, %cst_497 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %935 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_447, %934 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_451 = tensor.expand_shape %931 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %936 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_451 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_452 = tensor.expand_shape %933 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_452 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_453 = tensor.expand_shape %935 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %938 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_453 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %939 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%936, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_454 = tensor.extract_slice %936[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_455 = tensor.extract_slice %936[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %940 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_455 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%940 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %942 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_454 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_456 = tensor.insert_slice %941 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_457 = tensor.insert_slice %942 into %inserted_slice_456[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_457, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %944 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%939, %943 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %945 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%937, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_458 = tensor.extract_slice %937[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_459 = tensor.extract_slice %937[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %946 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_459 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%946 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_458 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_460 = tensor.insert_slice %947 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_461 = tensor.insert_slice %948 into %inserted_slice_460[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_461, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%945, %949 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_462 = tensor.dim %arg25, %c2 : tensor<1x32x?x128xf16>
    %951 = tensor.empty(%dim_462) : tensor<1x32x?x128xf16>
    %952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg25 : tensor<1x32x?x128xf16>) outs(%951 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%950 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %954 = arith.addi %dim_462, %c1 : index
    %955 = tensor.empty(%954) : tensor<1x32x?x128xf16>
    %inserted_slice_463 = tensor.insert_slice %952 into %955[0, 0, 0, 0] [1, 32, %dim_462, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_464 = tensor.insert_slice %953 into %inserted_slice_463[0, 0, %dim_462, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_465 = tensor.dim %arg26, %c2 : tensor<1x32x?x128xf16>
    %956 = tensor.empty(%dim_465) : tensor<1x32x?x128xf16>
    %957 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg26 : tensor<1x32x?x128xf16>) outs(%956 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %958 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%938 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %959 = arith.addi %dim_465, %c1 : index
    %960 = tensor.empty(%959) : tensor<1x32x?x128xf16>
    %inserted_slice_466 = tensor.insert_slice %957 into %960[0, 0, 0, 0] [1, 32, %dim_465, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_467 = tensor.insert_slice %958 into %inserted_slice_466[0, 0, %dim_465, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_468 = tensor.cast %inserted_slice_464 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %961 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_468 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_469 = tensor.collapse_shape %944 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_470 = tensor.collapse_shape %961 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %962 = linalg.batch_matmul ins(%collapsed_469, %collapsed_470 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_471 = tensor.expand_shape %962 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_471 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %964 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%963, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %965:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%964 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%964, %965#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%966 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%967 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%967, %968 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_472 = tensor.collapse_shape %969 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_473 = tensor.cast %inserted_slice_467 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_474 = tensor.collapse_shape %cast_473 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %970 = linalg.batch_matmul ins(%collapsed_472, %collapsed_474 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_475 = tensor.expand_shape %970 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_475 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_476 = tensor.collapse_shape %971 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_477 = tensor.expand_shape %collapsed_476 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_478 = tensor.expand_shape %cst_135 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_478, %cst_496, %cst_495 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_477, %972 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%920, %973 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%974 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %976 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%975 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %977 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%976 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %978 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%977 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%978 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %980 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%979 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %981 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%974, %980 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %982 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%981 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_711, %982 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_479 = tensor.expand_shape %983 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_480 = tensor.expand_shape %cst_134 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %984 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_480, %cst_494, %cst_493 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %985 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_479, %984 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%985 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %987 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%986, %985 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_481 = tensor.expand_shape %cst_133 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_481, %cst_492, %cst_491 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_479, %988 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%987, %989 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_482 = tensor.expand_shape %990 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_483 = tensor.expand_shape %cst_132 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_483, %cst_490, %cst_489 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %992 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_482, %991 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %993 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%974, %992 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %994 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%993 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%994 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %996 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%995 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %997 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%996 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %998 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%997 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %999 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%998 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1000 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%993, %999 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1000 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1002 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_710, %1001 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_484 = tensor.expand_shape %1002 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_485 = tensor.expand_shape %cst_131 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_485, %cst_488, %cst_487 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1004 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_484, %1003 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_486 = tensor.expand_shape %cst_130 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1005 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_486, %cst_486, %cst_485 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_484, %1005 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_487 = tensor.expand_shape %cst_129 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1007 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_487, %cst_484, %cst_483 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1008 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_484, %1007 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_488 = tensor.expand_shape %1004 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_488 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_489 = tensor.expand_shape %1006 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_489 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_490 = tensor.expand_shape %1008 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1011 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_490 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1012 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1009, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_491 = tensor.extract_slice %1009[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_492 = tensor.extract_slice %1009[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_492 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1013 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1015 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_491 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_493 = tensor.insert_slice %1014 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_494 = tensor.insert_slice %1015 into %inserted_slice_493[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1016 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_494, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1012, %1016 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1018 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1010, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_495 = tensor.extract_slice %1010[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_496 = tensor.extract_slice %1010[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1019 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_496 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1020 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1019 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_495 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_497 = tensor.insert_slice %1020 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_498 = tensor.insert_slice %1021 into %inserted_slice_497[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1022 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_498, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1018, %1022 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_499 = tensor.dim %arg27, %c2 : tensor<1x32x?x128xf16>
    %1024 = tensor.empty(%dim_499) : tensor<1x32x?x128xf16>
    %1025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg27 : tensor<1x32x?x128xf16>) outs(%1024 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1023 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1027 = arith.addi %dim_499, %c1 : index
    %1028 = tensor.empty(%1027) : tensor<1x32x?x128xf16>
    %inserted_slice_500 = tensor.insert_slice %1025 into %1028[0, 0, 0, 0] [1, 32, %dim_499, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_501 = tensor.insert_slice %1026 into %inserted_slice_500[0, 0, %dim_499, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_502 = tensor.dim %arg28, %c2 : tensor<1x32x?x128xf16>
    %1029 = tensor.empty(%dim_502) : tensor<1x32x?x128xf16>
    %1030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg28 : tensor<1x32x?x128xf16>) outs(%1029 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1011 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1032 = arith.addi %dim_502, %c1 : index
    %1033 = tensor.empty(%1032) : tensor<1x32x?x128xf16>
    %inserted_slice_503 = tensor.insert_slice %1030 into %1033[0, 0, 0, 0] [1, 32, %dim_502, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_504 = tensor.insert_slice %1031 into %inserted_slice_503[0, 0, %dim_502, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_505 = tensor.cast %inserted_slice_501 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1034 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_505 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_506 = tensor.collapse_shape %1017 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_507 = tensor.collapse_shape %1034 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1035 = linalg.batch_matmul ins(%collapsed_506, %collapsed_507 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_508 = tensor.expand_shape %1035 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_508 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1036, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1038:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1037 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1037, %1038#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1040 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1039 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1040 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1040, %1041 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_509 = tensor.collapse_shape %1042 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_510 = tensor.cast %inserted_slice_504 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_511 = tensor.collapse_shape %cast_510 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1043 = linalg.batch_matmul ins(%collapsed_509, %collapsed_511 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_512 = tensor.expand_shape %1043 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1044 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_512 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_513 = tensor.collapse_shape %1044 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_514 = tensor.expand_shape %collapsed_513 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_515 = tensor.expand_shape %cst_128 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_515, %cst_482, %cst_481 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_514, %1045 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%993, %1046 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1048 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1047 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1048 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1049 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1050 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1051 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1052 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1054 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1047, %1053 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1055 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1054 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1056 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_709, %1055 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_516 = tensor.expand_shape %1056 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_517 = tensor.expand_shape %cst_127 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1057 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_517, %cst_480, %cst_479 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1058 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_516, %1057 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1059 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1058 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1060 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1059, %1058 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_518 = tensor.expand_shape %cst_126 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_518, %cst_478, %cst_477 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1062 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_516, %1061 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1060, %1062 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_519 = tensor.expand_shape %1063 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_520 = tensor.expand_shape %cst_125 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_520, %cst_476, %cst_475 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_519, %1064 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1047, %1065 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1066 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1067 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1069 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1068 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1070 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1069 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1070 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1071 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1073 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1066, %1072 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1074 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1073 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1075 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_708, %1074 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_521 = tensor.expand_shape %1075 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_522 = tensor.expand_shape %cst_124 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1076 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_522, %cst_474, %cst_473 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_521, %1076 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_523 = tensor.expand_shape %cst_123 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1078 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_523, %cst_472, %cst_471 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1079 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_521, %1078 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_524 = tensor.expand_shape %cst_122 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1080 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_524, %cst_470, %cst_469 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1081 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_521, %1080 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_525 = tensor.expand_shape %1077 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1082 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_525 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_526 = tensor.expand_shape %1079 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1083 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_526 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_527 = tensor.expand_shape %1081 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1084 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_527 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1082, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_528 = tensor.extract_slice %1082[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_529 = tensor.extract_slice %1082[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_529 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1086 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_528 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_530 = tensor.insert_slice %1087 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_531 = tensor.insert_slice %1088 into %inserted_slice_530[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_531, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1085, %1089 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1091 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1083, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_532 = tensor.extract_slice %1083[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_533 = tensor.extract_slice %1083[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1092 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_533 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1092 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1094 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_532 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_534 = tensor.insert_slice %1093 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_535 = tensor.insert_slice %1094 into %inserted_slice_534[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1095 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_535, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1096 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1091, %1095 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_536 = tensor.dim %arg29, %c2 : tensor<1x32x?x128xf16>
    %1097 = tensor.empty(%dim_536) : tensor<1x32x?x128xf16>
    %1098 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg29 : tensor<1x32x?x128xf16>) outs(%1097 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1099 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1096 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1100 = arith.addi %dim_536, %c1 : index
    %1101 = tensor.empty(%1100) : tensor<1x32x?x128xf16>
    %inserted_slice_537 = tensor.insert_slice %1098 into %1101[0, 0, 0, 0] [1, 32, %dim_536, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_538 = tensor.insert_slice %1099 into %inserted_slice_537[0, 0, %dim_536, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_539 = tensor.dim %arg30, %c2 : tensor<1x32x?x128xf16>
    %1102 = tensor.empty(%dim_539) : tensor<1x32x?x128xf16>
    %1103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg30 : tensor<1x32x?x128xf16>) outs(%1102 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1084 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1105 = arith.addi %dim_539, %c1 : index
    %1106 = tensor.empty(%1105) : tensor<1x32x?x128xf16>
    %inserted_slice_540 = tensor.insert_slice %1103 into %1106[0, 0, 0, 0] [1, 32, %dim_539, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_541 = tensor.insert_slice %1104 into %inserted_slice_540[0, 0, %dim_539, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_542 = tensor.cast %inserted_slice_538 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_542 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_543 = tensor.collapse_shape %1090 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_544 = tensor.collapse_shape %1107 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1108 = linalg.batch_matmul ins(%collapsed_543, %collapsed_544 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_545 = tensor.expand_shape %1108 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_545 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1109, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1111:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1110 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1110, %1111#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1112 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1113 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1113, %1114 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_546 = tensor.collapse_shape %1115 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_547 = tensor.cast %inserted_slice_541 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_548 = tensor.collapse_shape %cast_547 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1116 = linalg.batch_matmul ins(%collapsed_546, %collapsed_548 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_549 = tensor.expand_shape %1116 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_549 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_550 = tensor.collapse_shape %1117 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_551 = tensor.expand_shape %collapsed_550 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_552 = tensor.expand_shape %cst_121 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_552, %cst_468, %cst_467 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_551, %1118 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1120 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1066, %1119 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1120 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1121 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1122 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1123 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1124 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1125 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1120, %1126 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1127 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_707, %1128 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_553 = tensor.expand_shape %1129 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_554 = tensor.expand_shape %cst_120 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_554, %cst_466, %cst_465 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_553, %1130 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1132 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1131 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1132, %1131 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_555 = tensor.expand_shape %cst_119 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_555, %cst_464, %cst_463 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_553, %1134 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1136 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1133, %1135 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_556 = tensor.expand_shape %1136 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_557 = tensor.expand_shape %cst_118 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_557, %cst_462, %cst_461 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_556, %1137 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1120, %1138 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1139 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1140 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1141 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1142 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1143 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1144 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1139, %1145 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1146 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_706, %1147 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_558 = tensor.expand_shape %1148 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_559 = tensor.expand_shape %cst_117 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_559, %cst_460, %cst_459 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_558, %1149 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_560 = tensor.expand_shape %cst_116 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_560, %cst_458, %cst_457 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_558, %1151 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_561 = tensor.expand_shape %cst_115 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_561, %cst_456, %cst_455 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_558, %1153 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_562 = tensor.expand_shape %1150 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_562 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_563 = tensor.expand_shape %1152 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_563 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_564 = tensor.expand_shape %1154 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1157 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_564 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1155, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_565 = tensor.extract_slice %1155[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_566 = tensor.extract_slice %1155[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_566 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1159 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_565 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_567 = tensor.insert_slice %1160 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_568 = tensor.insert_slice %1161 into %inserted_slice_567[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1162 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_568, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1158, %1162 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1156, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_569 = tensor.extract_slice %1156[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_570 = tensor.extract_slice %1156[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_570 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1165 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_569 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_571 = tensor.insert_slice %1166 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_572 = tensor.insert_slice %1167 into %inserted_slice_571[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_572, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1164, %1168 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_573 = tensor.dim %arg31, %c2 : tensor<1x32x?x128xf16>
    %1170 = tensor.empty(%dim_573) : tensor<1x32x?x128xf16>
    %1171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg31 : tensor<1x32x?x128xf16>) outs(%1170 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1169 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1173 = arith.addi %dim_573, %c1 : index
    %1174 = tensor.empty(%1173) : tensor<1x32x?x128xf16>
    %inserted_slice_574 = tensor.insert_slice %1171 into %1174[0, 0, 0, 0] [1, 32, %dim_573, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_575 = tensor.insert_slice %1172 into %inserted_slice_574[0, 0, %dim_573, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_576 = tensor.dim %arg32, %c2 : tensor<1x32x?x128xf16>
    %1175 = tensor.empty(%dim_576) : tensor<1x32x?x128xf16>
    %1176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg32 : tensor<1x32x?x128xf16>) outs(%1175 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1157 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1178 = arith.addi %dim_576, %c1 : index
    %1179 = tensor.empty(%1178) : tensor<1x32x?x128xf16>
    %inserted_slice_577 = tensor.insert_slice %1176 into %1179[0, 0, 0, 0] [1, 32, %dim_576, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_578 = tensor.insert_slice %1177 into %inserted_slice_577[0, 0, %dim_576, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_579 = tensor.cast %inserted_slice_575 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_579 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_580 = tensor.collapse_shape %1163 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_581 = tensor.collapse_shape %1180 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1181 = linalg.batch_matmul ins(%collapsed_580, %collapsed_581 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_582 = tensor.expand_shape %1181 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_582 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1182, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1184:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1183 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1183, %1184#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1185 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1186 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1186, %1187 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_583 = tensor.collapse_shape %1188 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_584 = tensor.cast %inserted_slice_578 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_585 = tensor.collapse_shape %cast_584 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1189 = linalg.batch_matmul ins(%collapsed_583, %collapsed_585 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_586 = tensor.expand_shape %1189 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_586 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_587 = tensor.collapse_shape %1190 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_588 = tensor.expand_shape %collapsed_587 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_589 = tensor.expand_shape %cst_114 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_589, %cst_454, %cst_453 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_588, %1191 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1139, %1192 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1193 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1194 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1196 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1195 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1197 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1196 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1197 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1198 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1193, %1199 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1200 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_705, %1201 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_590 = tensor.expand_shape %1202 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_591 = tensor.expand_shape %cst_113 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_591, %cst_452, %cst_451 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_590, %1203 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1204 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1205, %1204 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_592 = tensor.expand_shape %cst_112 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_592, %cst_450, %cst_449 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_590, %1207 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1206, %1208 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_593 = tensor.expand_shape %1209 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_594 = tensor.expand_shape %cst_111 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_594, %cst_448, %cst_447 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_593, %1210 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1193, %1211 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1212 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1213 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1214 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1215 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1216 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1217 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1212, %1218 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1219 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_704, %1220 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_595 = tensor.expand_shape %1221 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_596 = tensor.expand_shape %cst_110 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_596, %cst_446, %cst_445 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_595, %1222 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_597 = tensor.expand_shape %cst_109 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_597, %cst_444, %cst_443 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_595, %1224 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_598 = tensor.expand_shape %cst_108 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_598, %cst_442, %cst_441 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_595, %1226 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_599 = tensor.expand_shape %1223 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_599 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_600 = tensor.expand_shape %1225 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_600 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_601 = tensor.expand_shape %1227 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1230 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_601 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1228, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_602 = tensor.extract_slice %1228[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_603 = tensor.extract_slice %1228[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_603 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1232 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_602 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_604 = tensor.insert_slice %1233 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_605 = tensor.insert_slice %1234 into %inserted_slice_604[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_605, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1231, %1235 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1229, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_606 = tensor.extract_slice %1229[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_607 = tensor.extract_slice %1229[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_607 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1238 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_606 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_608 = tensor.insert_slice %1239 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_609 = tensor.insert_slice %1240 into %inserted_slice_608[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_609, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1237, %1241 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_610 = tensor.dim %arg33, %c2 : tensor<1x32x?x128xf16>
    %1243 = tensor.empty(%dim_610) : tensor<1x32x?x128xf16>
    %1244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg33 : tensor<1x32x?x128xf16>) outs(%1243 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1242 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1246 = arith.addi %dim_610, %c1 : index
    %1247 = tensor.empty(%1246) : tensor<1x32x?x128xf16>
    %inserted_slice_611 = tensor.insert_slice %1244 into %1247[0, 0, 0, 0] [1, 32, %dim_610, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_612 = tensor.insert_slice %1245 into %inserted_slice_611[0, 0, %dim_610, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_613 = tensor.dim %arg34, %c2 : tensor<1x32x?x128xf16>
    %1248 = tensor.empty(%dim_613) : tensor<1x32x?x128xf16>
    %1249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg34 : tensor<1x32x?x128xf16>) outs(%1248 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1230 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1251 = arith.addi %dim_613, %c1 : index
    %1252 = tensor.empty(%1251) : tensor<1x32x?x128xf16>
    %inserted_slice_614 = tensor.insert_slice %1249 into %1252[0, 0, 0, 0] [1, 32, %dim_613, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_615 = tensor.insert_slice %1250 into %inserted_slice_614[0, 0, %dim_613, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_616 = tensor.cast %inserted_slice_612 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_616 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_617 = tensor.collapse_shape %1236 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_618 = tensor.collapse_shape %1253 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1254 = linalg.batch_matmul ins(%collapsed_617, %collapsed_618 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_619 = tensor.expand_shape %1254 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_619 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1256 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1255, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1257:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1256 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1256, %1257#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1258 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1259 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1259, %1260 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_620 = tensor.collapse_shape %1261 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_621 = tensor.cast %inserted_slice_615 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_622 = tensor.collapse_shape %cast_621 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1262 = linalg.batch_matmul ins(%collapsed_620, %collapsed_622 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_623 = tensor.expand_shape %1262 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_623 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_624 = tensor.collapse_shape %1263 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_625 = tensor.expand_shape %collapsed_624 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_626 = tensor.expand_shape %cst_107 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_626, %cst_440, %cst_439 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_625, %1264 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1212, %1265 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1266 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1267 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1268 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1269 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1270 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1271 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1266, %1272 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1274 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1273 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_703, %1274 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_627 = tensor.expand_shape %1275 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_628 = tensor.expand_shape %cst_106 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1276 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_628, %cst_438, %cst_437 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_627, %1276 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1277 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1278, %1277 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_629 = tensor.expand_shape %cst_105 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_629, %cst_436, %cst_435 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_627, %1280 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1279, %1281 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_630 = tensor.expand_shape %1282 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_631 = tensor.expand_shape %cst_104 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_631, %cst_434, %cst_433 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_630, %1283 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1266, %1284 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1285 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1286 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1287 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1288 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1289 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1290 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1285, %1291 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1292 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_702, %1293 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_632 = tensor.expand_shape %1294 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_633 = tensor.expand_shape %cst_103 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_633, %cst_432, %cst_431 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_632, %1295 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_634 = tensor.expand_shape %cst_102 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_634, %cst_430, %cst_429 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1298 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_632, %1297 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_635 = tensor.expand_shape %cst_101 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1299 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_635, %cst_428, %cst_427 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_632, %1299 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_636 = tensor.expand_shape %1296 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_636 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_637 = tensor.expand_shape %1298 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_637 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_638 = tensor.expand_shape %1300 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_638 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1301, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_639 = tensor.extract_slice %1301[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_640 = tensor.extract_slice %1301[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_640 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1305 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_639 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_641 = tensor.insert_slice %1306 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_642 = tensor.insert_slice %1307 into %inserted_slice_641[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1308 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_642, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1304, %1308 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1302, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_643 = tensor.extract_slice %1302[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_644 = tensor.extract_slice %1302[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_644 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1311 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_643 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_645 = tensor.insert_slice %1312 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_646 = tensor.insert_slice %1313 into %inserted_slice_645[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_646, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1310, %1314 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_647 = tensor.dim %arg35, %c2 : tensor<1x32x?x128xf16>
    %1316 = tensor.empty(%dim_647) : tensor<1x32x?x128xf16>
    %1317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg35 : tensor<1x32x?x128xf16>) outs(%1316 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1315 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1319 = arith.addi %dim_647, %c1 : index
    %1320 = tensor.empty(%1319) : tensor<1x32x?x128xf16>
    %inserted_slice_648 = tensor.insert_slice %1317 into %1320[0, 0, 0, 0] [1, 32, %dim_647, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_649 = tensor.insert_slice %1318 into %inserted_slice_648[0, 0, %dim_647, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_650 = tensor.dim %arg36, %c2 : tensor<1x32x?x128xf16>
    %1321 = tensor.empty(%dim_650) : tensor<1x32x?x128xf16>
    %1322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg36 : tensor<1x32x?x128xf16>) outs(%1321 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1303 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1324 = arith.addi %dim_650, %c1 : index
    %1325 = tensor.empty(%1324) : tensor<1x32x?x128xf16>
    %inserted_slice_651 = tensor.insert_slice %1322 into %1325[0, 0, 0, 0] [1, 32, %dim_650, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_652 = tensor.insert_slice %1323 into %inserted_slice_651[0, 0, %dim_650, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_653 = tensor.cast %inserted_slice_649 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_653 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_654 = tensor.collapse_shape %1309 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_655 = tensor.collapse_shape %1326 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1327 = linalg.batch_matmul ins(%collapsed_654, %collapsed_655 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_656 = tensor.expand_shape %1327 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_656 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1328, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1330:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1329 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1329, %1330#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1332 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1331 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1332 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1332, %1333 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_657 = tensor.collapse_shape %1334 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_658 = tensor.cast %inserted_slice_652 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_659 = tensor.collapse_shape %cast_658 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1335 = linalg.batch_matmul ins(%collapsed_657, %collapsed_659 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_660 = tensor.expand_shape %1335 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_660 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_661 = tensor.collapse_shape %1336 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_662 = tensor.expand_shape %collapsed_661 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_663 = tensor.expand_shape %cst_100 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_663, %cst_426, %cst_425 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_662, %1337 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1285, %1338 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1339 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1341 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1342 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1343 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1344 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1339, %1345 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1346 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_701, %1347 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_664 = tensor.expand_shape %1348 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_665 = tensor.expand_shape %cst_99 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_665, %cst_424, %cst_423 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_664, %1349 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1350 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1352 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1351, %1350 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_666 = tensor.expand_shape %cst_98 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_666, %cst_422, %cst_421 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_664, %1353 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1352, %1354 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_667 = tensor.expand_shape %1355 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_668 = tensor.expand_shape %cst_97 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_668, %cst_420, %cst_419 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_667, %1356 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1339, %1357 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1358 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1359 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1360 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1361 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1362 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1363 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1358, %1364 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1365 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_700, %1366 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_669 = tensor.expand_shape %1367 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_670 = tensor.expand_shape %cst_96 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_670, %cst_418, %cst_417 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_669, %1368 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_671 = tensor.expand_shape %cst_95 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_671, %cst_416, %cst_415 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_669, %1370 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_672 = tensor.expand_shape %cst_94 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1372 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_672, %cst_414, %cst_413 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_669, %1372 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_673 = tensor.expand_shape %1369 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_673 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_674 = tensor.expand_shape %1371 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_674 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_675 = tensor.expand_shape %1373 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1376 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_675 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1374, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_676 = tensor.extract_slice %1374[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_677 = tensor.extract_slice %1374[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_677 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1378 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_676 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_678 = tensor.insert_slice %1379 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_679 = tensor.insert_slice %1380 into %inserted_slice_678[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_679, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1377, %1381 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1375, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_680 = tensor.extract_slice %1375[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_681 = tensor.extract_slice %1375[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_681 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1384 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_680 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_682 = tensor.insert_slice %1385 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_683 = tensor.insert_slice %1386 into %inserted_slice_682[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_683, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1383, %1387 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_684 = tensor.dim %arg37, %c2 : tensor<1x32x?x128xf16>
    %1389 = tensor.empty(%dim_684) : tensor<1x32x?x128xf16>
    %1390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg37 : tensor<1x32x?x128xf16>) outs(%1389 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1388 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1392 = arith.addi %dim_684, %c1 : index
    %1393 = tensor.empty(%1392) : tensor<1x32x?x128xf16>
    %inserted_slice_685 = tensor.insert_slice %1390 into %1393[0, 0, 0, 0] [1, 32, %dim_684, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_686 = tensor.insert_slice %1391 into %inserted_slice_685[0, 0, %dim_684, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_687 = tensor.dim %arg38, %c2 : tensor<1x32x?x128xf16>
    %1394 = tensor.empty(%dim_687) : tensor<1x32x?x128xf16>
    %1395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg38 : tensor<1x32x?x128xf16>) outs(%1394 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1396 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1376 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1397 = arith.addi %dim_687, %c1 : index
    %1398 = tensor.empty(%1397) : tensor<1x32x?x128xf16>
    %inserted_slice_688 = tensor.insert_slice %1395 into %1398[0, 0, 0, 0] [1, 32, %dim_687, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_689 = tensor.insert_slice %1396 into %inserted_slice_688[0, 0, %dim_687, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_690 = tensor.cast %inserted_slice_686 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_690 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_691 = tensor.collapse_shape %1382 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_692 = tensor.collapse_shape %1399 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1400 = linalg.batch_matmul ins(%collapsed_691, %collapsed_692 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_693 = tensor.expand_shape %1400 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_693 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1402 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1401, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1403:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1402 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1402, %1403#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1404 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1405 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1405, %1406 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_694 = tensor.collapse_shape %1407 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_695 = tensor.cast %inserted_slice_689 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_696 = tensor.collapse_shape %cast_695 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1408 = linalg.batch_matmul ins(%collapsed_694, %collapsed_696 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_697 = tensor.expand_shape %1408 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_697 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_698 = tensor.collapse_shape %1409 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_699 = tensor.expand_shape %collapsed_698 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_700 = tensor.expand_shape %cst_93 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1410 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_700, %cst_412, %cst_411 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_699, %1410 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1412 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1358, %1411 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1413 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1412 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1414 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1413 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1414 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1416 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1415 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1416 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1417 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1412, %1418 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1419 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_699, %1420 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_701 = tensor.expand_shape %1421 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_702 = tensor.expand_shape %cst_92 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_702, %cst_410, %cst_409 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_701, %1422 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1424 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1423 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1424, %1423 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_703 = tensor.expand_shape %cst_91 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_703, %cst_408, %cst_407 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1427 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_701, %1426 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1428 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1425, %1427 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_704 = tensor.expand_shape %1428 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_705 = tensor.expand_shape %cst_90 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_705, %cst_406, %cst_405 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_704, %1429 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1412, %1430 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1431 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1432 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1434 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1433 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1434 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1436 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1435 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1436 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1431, %1437 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1438 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1440 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_698, %1439 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_706 = tensor.expand_shape %1440 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_707 = tensor.expand_shape %cst_89 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_707, %cst_404, %cst_403 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_706, %1441 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_708 = tensor.expand_shape %cst_88 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_708, %cst_402, %cst_401 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_706, %1443 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_709 = tensor.expand_shape %cst_87 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_709, %cst_400, %cst_399 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_706, %1445 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_710 = tensor.expand_shape %1442 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_710 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_711 = tensor.expand_shape %1444 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1448 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_711 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_712 = tensor.expand_shape %1446 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1449 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_712 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1450 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1447, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_713 = tensor.extract_slice %1447[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_714 = tensor.extract_slice %1447[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1451 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_714 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1452 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1451 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_713 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_715 = tensor.insert_slice %1452 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_716 = tensor.insert_slice %1453 into %inserted_slice_715[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1454 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_716, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1450, %1454 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1448, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_717 = tensor.extract_slice %1448[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_718 = tensor.extract_slice %1448[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_718 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1457 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_717 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_719 = tensor.insert_slice %1458 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_720 = tensor.insert_slice %1459 into %inserted_slice_719[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_720, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1456, %1460 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_721 = tensor.dim %arg39, %c2 : tensor<1x32x?x128xf16>
    %1462 = tensor.empty(%dim_721) : tensor<1x32x?x128xf16>
    %1463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg39 : tensor<1x32x?x128xf16>) outs(%1462 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1461 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1465 = arith.addi %dim_721, %c1 : index
    %1466 = tensor.empty(%1465) : tensor<1x32x?x128xf16>
    %inserted_slice_722 = tensor.insert_slice %1463 into %1466[0, 0, 0, 0] [1, 32, %dim_721, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_723 = tensor.insert_slice %1464 into %inserted_slice_722[0, 0, %dim_721, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_724 = tensor.dim %arg40, %c2 : tensor<1x32x?x128xf16>
    %1467 = tensor.empty(%dim_724) : tensor<1x32x?x128xf16>
    %1468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg40 : tensor<1x32x?x128xf16>) outs(%1467 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1449 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1470 = arith.addi %dim_724, %c1 : index
    %1471 = tensor.empty(%1470) : tensor<1x32x?x128xf16>
    %inserted_slice_725 = tensor.insert_slice %1468 into %1471[0, 0, 0, 0] [1, 32, %dim_724, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_726 = tensor.insert_slice %1469 into %inserted_slice_725[0, 0, %dim_724, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_727 = tensor.cast %inserted_slice_723 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1472 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_727 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_728 = tensor.collapse_shape %1455 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_729 = tensor.collapse_shape %1472 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1473 = linalg.batch_matmul ins(%collapsed_728, %collapsed_729 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_730 = tensor.expand_shape %1473 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1474 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_730 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1475 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1474, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1476:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1475 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1475, %1476#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1477 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1478 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1478, %1479 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_731 = tensor.collapse_shape %1480 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_732 = tensor.cast %inserted_slice_726 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_733 = tensor.collapse_shape %cast_732 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1481 = linalg.batch_matmul ins(%collapsed_731, %collapsed_733 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_734 = tensor.expand_shape %1481 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_734 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_735 = tensor.collapse_shape %1482 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_736 = tensor.expand_shape %collapsed_735 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_737 = tensor.expand_shape %cst_86 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_737, %cst_398, %cst_397 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_736, %1483 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1485 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1431, %1484 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1486 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1485 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1486 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1488 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1487 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1489 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1488 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1490 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1489 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1491 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1490 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1492 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1485, %1491 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1492 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1494 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_697, %1493 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_738 = tensor.expand_shape %1494 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_739 = tensor.expand_shape %cst_85 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1495 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_739, %cst_396, %cst_395 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_738, %1495 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1496 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1497, %1496 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_740 = tensor.expand_shape %cst_84 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_740, %cst_394, %cst_393 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1500 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_738, %1499 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1501 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1498, %1500 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_741 = tensor.expand_shape %1501 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_742 = tensor.expand_shape %cst_83 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_742, %cst_392, %cst_391 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_741, %1502 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1485, %1503 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1505 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1504 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1505 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1506 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1508 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1507 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1508 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1509 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1511 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1504, %1510 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1512 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1511 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1513 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_696, %1512 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_743 = tensor.expand_shape %1513 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_744 = tensor.expand_shape %cst_82 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1514 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_744, %cst_390, %cst_389 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1515 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_743, %1514 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_745 = tensor.expand_shape %cst_81 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_745, %cst_388, %cst_387 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_743, %1516 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_746 = tensor.expand_shape %cst_80 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_746, %cst_386, %cst_385 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_743, %1518 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_747 = tensor.expand_shape %1515 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_747 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_748 = tensor.expand_shape %1517 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_748 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_749 = tensor.expand_shape %1519 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1522 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_749 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1520, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_750 = tensor.extract_slice %1520[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_751 = tensor.extract_slice %1520[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1524 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_751 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1524 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1526 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_750 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_752 = tensor.insert_slice %1525 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_753 = tensor.insert_slice %1526 into %inserted_slice_752[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1527 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_753, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1528 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1523, %1527 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1521, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_754 = tensor.extract_slice %1521[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_755 = tensor.extract_slice %1521[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_755 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1530 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1532 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_754 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_756 = tensor.insert_slice %1531 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_757 = tensor.insert_slice %1532 into %inserted_slice_756[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_757, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1529, %1533 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_758 = tensor.dim %arg41, %c2 : tensor<1x32x?x128xf16>
    %1535 = tensor.empty(%dim_758) : tensor<1x32x?x128xf16>
    %1536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg41 : tensor<1x32x?x128xf16>) outs(%1535 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1537 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1534 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1538 = arith.addi %dim_758, %c1 : index
    %1539 = tensor.empty(%1538) : tensor<1x32x?x128xf16>
    %inserted_slice_759 = tensor.insert_slice %1536 into %1539[0, 0, 0, 0] [1, 32, %dim_758, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_760 = tensor.insert_slice %1537 into %inserted_slice_759[0, 0, %dim_758, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_761 = tensor.dim %arg42, %c2 : tensor<1x32x?x128xf16>
    %1540 = tensor.empty(%dim_761) : tensor<1x32x?x128xf16>
    %1541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg42 : tensor<1x32x?x128xf16>) outs(%1540 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1522 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1543 = arith.addi %dim_761, %c1 : index
    %1544 = tensor.empty(%1543) : tensor<1x32x?x128xf16>
    %inserted_slice_762 = tensor.insert_slice %1541 into %1544[0, 0, 0, 0] [1, 32, %dim_761, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_763 = tensor.insert_slice %1542 into %inserted_slice_762[0, 0, %dim_761, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_764 = tensor.cast %inserted_slice_760 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_764 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_765 = tensor.collapse_shape %1528 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_766 = tensor.collapse_shape %1545 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1546 = linalg.batch_matmul ins(%collapsed_765, %collapsed_766 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_767 = tensor.expand_shape %1546 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_767 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1548 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1547, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1549:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1548 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1550 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1548, %1549#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1550 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1551 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1551, %1552 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_768 = tensor.collapse_shape %1553 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_769 = tensor.cast %inserted_slice_763 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_770 = tensor.collapse_shape %cast_769 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1554 = linalg.batch_matmul ins(%collapsed_768, %collapsed_770 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_771 = tensor.expand_shape %1554 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_771 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_772 = tensor.collapse_shape %1555 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_773 = tensor.expand_shape %collapsed_772 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_774 = tensor.expand_shape %cst_79 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_774, %cst_384, %cst_383 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_773, %1556 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1558 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1504, %1557 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1559 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1558 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1559 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1560 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1562 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1561 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1562 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1563 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1565 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1558, %1564 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1565 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_695, %1566 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_775 = tensor.expand_shape %1567 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_776 = tensor.expand_shape %cst_78 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1568 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_776, %cst_382, %cst_381 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1569 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_775, %1568 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1570 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1569 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1570, %1569 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_777 = tensor.expand_shape %cst_77 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1572 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_777, %cst_380, %cst_379 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1573 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_775, %1572 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1574 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1571, %1573 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_778 = tensor.expand_shape %1574 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_779 = tensor.expand_shape %cst_76 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_779, %cst_378, %cst_377 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_778, %1575 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1558, %1576 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1578 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1577 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1578 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1579 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1580 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1581 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1582 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1584 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1577, %1583 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1584 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1586 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_694, %1585 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_780 = tensor.expand_shape %1586 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_781 = tensor.expand_shape %cst_75 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_781, %cst_376, %cst_375 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1588 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_780, %1587 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_782 = tensor.expand_shape %cst_74 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1589 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_782, %cst_374, %cst_373 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1590 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_780, %1589 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_783 = tensor.expand_shape %cst_73 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1591 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_783, %cst_372, %cst_371 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1592 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_780, %1591 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_784 = tensor.expand_shape %1588 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1593 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_784 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_785 = tensor.expand_shape %1590 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_785 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_786 = tensor.expand_shape %1592 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1595 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_786 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1593, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_787 = tensor.extract_slice %1593[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_788 = tensor.extract_slice %1593[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_788 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1597 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_787 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_789 = tensor.insert_slice %1598 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_790 = tensor.insert_slice %1599 into %inserted_slice_789[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1600 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_790, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1596, %1600 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1594, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_791 = tensor.extract_slice %1594[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_792 = tensor.extract_slice %1594[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_792 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1604 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1603 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1605 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_791 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_793 = tensor.insert_slice %1604 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_794 = tensor.insert_slice %1605 into %inserted_slice_793[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1606 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_794, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1602, %1606 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_795 = tensor.dim %arg43, %c2 : tensor<1x32x?x128xf16>
    %1608 = tensor.empty(%dim_795) : tensor<1x32x?x128xf16>
    %1609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg43 : tensor<1x32x?x128xf16>) outs(%1608 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1610 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1607 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1611 = arith.addi %dim_795, %c1 : index
    %1612 = tensor.empty(%1611) : tensor<1x32x?x128xf16>
    %inserted_slice_796 = tensor.insert_slice %1609 into %1612[0, 0, 0, 0] [1, 32, %dim_795, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_797 = tensor.insert_slice %1610 into %inserted_slice_796[0, 0, %dim_795, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_798 = tensor.dim %arg44, %c2 : tensor<1x32x?x128xf16>
    %1613 = tensor.empty(%dim_798) : tensor<1x32x?x128xf16>
    %1614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg44 : tensor<1x32x?x128xf16>) outs(%1613 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1595 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1616 = arith.addi %dim_798, %c1 : index
    %1617 = tensor.empty(%1616) : tensor<1x32x?x128xf16>
    %inserted_slice_799 = tensor.insert_slice %1614 into %1617[0, 0, 0, 0] [1, 32, %dim_798, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_800 = tensor.insert_slice %1615 into %inserted_slice_799[0, 0, %dim_798, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_801 = tensor.cast %inserted_slice_797 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_801 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_802 = tensor.collapse_shape %1601 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_803 = tensor.collapse_shape %1618 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1619 = linalg.batch_matmul ins(%collapsed_802, %collapsed_803 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_804 = tensor.expand_shape %1619 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1620 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_804 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1620, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1622:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1621 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1621, %1622#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1624 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1623 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1624 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1626 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1624, %1625 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_805 = tensor.collapse_shape %1626 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_806 = tensor.cast %inserted_slice_800 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_807 = tensor.collapse_shape %cast_806 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1627 = linalg.batch_matmul ins(%collapsed_805, %collapsed_807 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_808 = tensor.expand_shape %1627 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_808 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_809 = tensor.collapse_shape %1628 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_810 = tensor.expand_shape %collapsed_809 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_811 = tensor.expand_shape %cst_72 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_811, %cst_370, %cst_369 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1630 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_810, %1629 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1577, %1630 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1632 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1631 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1632 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1633 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1635 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1634 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1636 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1635 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1636 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1631, %1637 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1638 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_693, %1639 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_812 = tensor.expand_shape %1640 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_813 = tensor.expand_shape %cst_71 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1641 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_813, %cst_368, %cst_367 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1642 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_812, %1641 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1643 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1642 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1643, %1642 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_814 = tensor.expand_shape %cst_70 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_814, %cst_366, %cst_365 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1646 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_812, %1645 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1647 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1644, %1646 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_815 = tensor.expand_shape %1647 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_816 = tensor.expand_shape %cst_69 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1648 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_816, %cst_364, %cst_363 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_815, %1648 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1650 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1631, %1649 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1651 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1650 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1652 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1651 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1653 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1652 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1654 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1653 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1654 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1655 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1650, %1656 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1657 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_692, %1658 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_817 = tensor.expand_shape %1659 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_818 = tensor.expand_shape %cst_68 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_818, %cst_362, %cst_361 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_817, %1660 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_819 = tensor.expand_shape %cst_67 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_819, %cst_360, %cst_359 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1663 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_817, %1662 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_820 = tensor.expand_shape %cst_66 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1664 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_820, %cst_358, %cst_357 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_817, %1664 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_821 = tensor.expand_shape %1661 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1666 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_821 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_822 = tensor.expand_shape %1663 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1667 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_822 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_823 = tensor.expand_shape %1665 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1668 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_823 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1669 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1666, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_824 = tensor.extract_slice %1666[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_825 = tensor.extract_slice %1666[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1670 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_825 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1670 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_824 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_826 = tensor.insert_slice %1671 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_827 = tensor.insert_slice %1672 into %inserted_slice_826[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_827, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1669, %1673 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1667, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_828 = tensor.extract_slice %1667[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_829 = tensor.extract_slice %1667[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_829 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1676 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1678 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_828 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_830 = tensor.insert_slice %1677 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_831 = tensor.insert_slice %1678 into %inserted_slice_830[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_831, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1675, %1679 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_832 = tensor.dim %arg45, %c2 : tensor<1x32x?x128xf16>
    %1681 = tensor.empty(%dim_832) : tensor<1x32x?x128xf16>
    %1682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg45 : tensor<1x32x?x128xf16>) outs(%1681 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1680 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1684 = arith.addi %dim_832, %c1 : index
    %1685 = tensor.empty(%1684) : tensor<1x32x?x128xf16>
    %inserted_slice_833 = tensor.insert_slice %1682 into %1685[0, 0, 0, 0] [1, 32, %dim_832, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_834 = tensor.insert_slice %1683 into %inserted_slice_833[0, 0, %dim_832, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_835 = tensor.dim %arg46, %c2 : tensor<1x32x?x128xf16>
    %1686 = tensor.empty(%dim_835) : tensor<1x32x?x128xf16>
    %1687 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg46 : tensor<1x32x?x128xf16>) outs(%1686 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1688 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1668 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1689 = arith.addi %dim_835, %c1 : index
    %1690 = tensor.empty(%1689) : tensor<1x32x?x128xf16>
    %inserted_slice_836 = tensor.insert_slice %1687 into %1690[0, 0, 0, 0] [1, 32, %dim_835, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_837 = tensor.insert_slice %1688 into %inserted_slice_836[0, 0, %dim_835, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_838 = tensor.cast %inserted_slice_834 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1691 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_838 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_839 = tensor.collapse_shape %1674 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_840 = tensor.collapse_shape %1691 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1692 = linalg.batch_matmul ins(%collapsed_839, %collapsed_840 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_841 = tensor.expand_shape %1692 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_841 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1694 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1693, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1695:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1694 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1694, %1695#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1696 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1697 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1697, %1698 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_842 = tensor.collapse_shape %1699 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_843 = tensor.cast %inserted_slice_837 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_844 = tensor.collapse_shape %cast_843 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1700 = linalg.batch_matmul ins(%collapsed_842, %collapsed_844 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_845 = tensor.expand_shape %1700 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_845 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_846 = tensor.collapse_shape %1701 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_847 = tensor.expand_shape %collapsed_846 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_848 = tensor.expand_shape %cst_65 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1702 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_848, %cst_356, %cst_355 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1703 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_847, %1702 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1704 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1650, %1703 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1705 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1704 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1706 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1705 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1707 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1706 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1708 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1707 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1708 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1710 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1709 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1711 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1704, %1710 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1711 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_691, %1712 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_849 = tensor.expand_shape %1713 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_850 = tensor.expand_shape %cst_64 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1714 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_850, %cst_354, %cst_353 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_849, %1714 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1716 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1715 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1716, %1715 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_851 = tensor.expand_shape %cst_63 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_851, %cst_352, %cst_351 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1719 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_849, %1718 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1717, %1719 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_852 = tensor.expand_shape %1720 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_853 = tensor.expand_shape %cst_62 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_853, %cst_350, %cst_349 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_852, %1721 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1704, %1722 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1724 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1723 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1724 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1726 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1725 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1727 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1726 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1728 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1727 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1728 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1730 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1723, %1729 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1731 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1730 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_690, %1731 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_854 = tensor.expand_shape %1732 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_855 = tensor.expand_shape %cst_61 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_855, %cst_348, %cst_347 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_854, %1733 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_856 = tensor.expand_shape %cst_60 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_856, %cst_346, %cst_345 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_854, %1735 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_857 = tensor.expand_shape %cst_59 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_857, %cst_344, %cst_343 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_854, %1737 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_858 = tensor.expand_shape %1734 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_858 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_859 = tensor.expand_shape %1736 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1740 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_859 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_860 = tensor.expand_shape %1738 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1741 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_860 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1742 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1739, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_861 = tensor.extract_slice %1739[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_862 = tensor.extract_slice %1739[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1743 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_862 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1744 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1743 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_861 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_863 = tensor.insert_slice %1744 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_864 = tensor.insert_slice %1745 into %inserted_slice_863[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1746 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_864, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1742, %1746 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1740, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_865 = tensor.extract_slice %1740[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_866 = tensor.extract_slice %1740[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_866 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1749 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_865 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_867 = tensor.insert_slice %1750 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_868 = tensor.insert_slice %1751 into %inserted_slice_867[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_868, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1748, %1752 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_869 = tensor.dim %arg47, %c2 : tensor<1x32x?x128xf16>
    %1754 = tensor.empty(%dim_869) : tensor<1x32x?x128xf16>
    %1755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg47 : tensor<1x32x?x128xf16>) outs(%1754 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1753 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1757 = arith.addi %dim_869, %c1 : index
    %1758 = tensor.empty(%1757) : tensor<1x32x?x128xf16>
    %inserted_slice_870 = tensor.insert_slice %1755 into %1758[0, 0, 0, 0] [1, 32, %dim_869, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_871 = tensor.insert_slice %1756 into %inserted_slice_870[0, 0, %dim_869, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_872 = tensor.dim %arg48, %c2 : tensor<1x32x?x128xf16>
    %1759 = tensor.empty(%dim_872) : tensor<1x32x?x128xf16>
    %1760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg48 : tensor<1x32x?x128xf16>) outs(%1759 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1741 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1762 = arith.addi %dim_872, %c1 : index
    %1763 = tensor.empty(%1762) : tensor<1x32x?x128xf16>
    %inserted_slice_873 = tensor.insert_slice %1760 into %1763[0, 0, 0, 0] [1, 32, %dim_872, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_874 = tensor.insert_slice %1761 into %inserted_slice_873[0, 0, %dim_872, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_875 = tensor.cast %inserted_slice_871 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1764 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_875 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_876 = tensor.collapse_shape %1747 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_877 = tensor.collapse_shape %1764 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1765 = linalg.batch_matmul ins(%collapsed_876, %collapsed_877 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_878 = tensor.expand_shape %1765 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1766 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_878 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1767 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1766, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1768:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1767 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1767, %1768#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1770 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1769 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1770 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1770, %1771 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_879 = tensor.collapse_shape %1772 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_880 = tensor.cast %inserted_slice_874 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_881 = tensor.collapse_shape %cast_880 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1773 = linalg.batch_matmul ins(%collapsed_879, %collapsed_881 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_882 = tensor.expand_shape %1773 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_882 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_883 = tensor.collapse_shape %1774 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_884 = tensor.expand_shape %collapsed_883 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_885 = tensor.expand_shape %cst_58 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_885, %cst_342, %cst_341 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_884, %1775 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1723, %1776 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1777 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1779 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1779 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1781 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1780 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1782 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1781 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1783 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1782 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1784 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1777, %1783 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1785 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1784 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1786 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_689, %1785 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_886 = tensor.expand_shape %1786 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_887 = tensor.expand_shape %cst_57 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1787 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_887, %cst_340, %cst_339 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1788 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_886, %1787 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1789 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1788 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1789, %1788 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_888 = tensor.expand_shape %cst_56 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_888, %cst_338, %cst_337 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1792 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_886, %1791 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1790, %1792 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_889 = tensor.expand_shape %1793 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_890 = tensor.expand_shape %cst_55 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_890, %cst_336, %cst_335 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_889, %1794 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1777, %1795 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1796 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1797 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1799 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1798 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1800 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1799 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1801 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1800 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1802 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1801 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1803 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1796, %1802 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1804 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1803 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1805 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_688, %1804 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_891 = tensor.expand_shape %1805 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_892 = tensor.expand_shape %cst_54 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1806 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_892, %cst_334, %cst_333 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1807 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_891, %1806 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_893 = tensor.expand_shape %cst_53 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1808 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_893, %cst_332, %cst_331 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1809 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_891, %1808 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_894 = tensor.expand_shape %cst_52 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_894, %cst_330, %cst_329 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_891, %1810 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_895 = tensor.expand_shape %1807 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_895 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_896 = tensor.expand_shape %1809 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_896 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_897 = tensor.expand_shape %1811 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1814 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_897 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1812, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_898 = tensor.extract_slice %1812[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_899 = tensor.extract_slice %1812[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1816 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_899 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1816 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_898 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_900 = tensor.insert_slice %1817 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_901 = tensor.insert_slice %1818 into %inserted_slice_900[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1819 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_901, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1820 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1815, %1819 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1813, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_902 = tensor.extract_slice %1813[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_903 = tensor.extract_slice %1813[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1822 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_903 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1822 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1824 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_902 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_904 = tensor.insert_slice %1823 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_905 = tensor.insert_slice %1824 into %inserted_slice_904[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_905, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1826 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1821, %1825 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_906 = tensor.dim %arg49, %c2 : tensor<1x32x?x128xf16>
    %1827 = tensor.empty(%dim_906) : tensor<1x32x?x128xf16>
    %1828 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg49 : tensor<1x32x?x128xf16>) outs(%1827 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1826 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1830 = arith.addi %dim_906, %c1 : index
    %1831 = tensor.empty(%1830) : tensor<1x32x?x128xf16>
    %inserted_slice_907 = tensor.insert_slice %1828 into %1831[0, 0, 0, 0] [1, 32, %dim_906, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_908 = tensor.insert_slice %1829 into %inserted_slice_907[0, 0, %dim_906, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_909 = tensor.dim %arg50, %c2 : tensor<1x32x?x128xf16>
    %1832 = tensor.empty(%dim_909) : tensor<1x32x?x128xf16>
    %1833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg50 : tensor<1x32x?x128xf16>) outs(%1832 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1814 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1835 = arith.addi %dim_909, %c1 : index
    %1836 = tensor.empty(%1835) : tensor<1x32x?x128xf16>
    %inserted_slice_910 = tensor.insert_slice %1833 into %1836[0, 0, 0, 0] [1, 32, %dim_909, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_911 = tensor.insert_slice %1834 into %inserted_slice_910[0, 0, %dim_909, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_912 = tensor.cast %inserted_slice_908 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_912 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_913 = tensor.collapse_shape %1820 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_914 = tensor.collapse_shape %1837 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1838 = linalg.batch_matmul ins(%collapsed_913, %collapsed_914 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_915 = tensor.expand_shape %1838 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_915 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1840 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1839, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1841:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1840 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1842 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1840, %1841#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1843 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1842 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1844 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1843 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1843, %1844 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_916 = tensor.collapse_shape %1845 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_917 = tensor.cast %inserted_slice_911 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_918 = tensor.collapse_shape %cast_917 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1846 = linalg.batch_matmul ins(%collapsed_916, %collapsed_918 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_919 = tensor.expand_shape %1846 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_919 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_920 = tensor.collapse_shape %1847 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_921 = tensor.expand_shape %collapsed_920 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_922 = tensor.expand_shape %cst_51 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1848 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_922, %cst_328, %cst_327 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_921, %1848 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1796, %1849 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1850 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1852 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1853 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1854 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1855 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1850, %1856 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1857 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1859 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_687, %1858 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_923 = tensor.expand_shape %1859 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_924 = tensor.expand_shape %cst_50 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_924, %cst_326, %cst_325 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_923, %1860 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1862 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1861 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1863 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1862, %1861 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_925 = tensor.expand_shape %cst_49 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1864 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_925, %cst_324, %cst_323 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1865 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_923, %1864 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1866 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1863, %1865 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_926 = tensor.expand_shape %1866 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_927 = tensor.expand_shape %cst_48 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1867 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_927, %cst_322, %cst_321 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_926, %1867 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1850, %1868 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1869 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1870 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1871 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1872 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1873 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1874 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1869, %1875 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1877 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1876 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1878 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_686, %1877 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_928 = tensor.expand_shape %1878 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_929 = tensor.expand_shape %cst_47 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1879 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_929, %cst_320, %cst_319 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1880 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_928, %1879 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_930 = tensor.expand_shape %cst_46 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1881 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_930, %cst_318, %cst_317 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1882 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_928, %1881 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_931 = tensor.expand_shape %cst_45 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1883 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_931, %cst_316, %cst_315 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1884 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_928, %1883 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_932 = tensor.expand_shape %1880 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_932 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_933 = tensor.expand_shape %1882 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1886 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_933 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_934 = tensor.expand_shape %1884 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1887 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_934 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1885, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_935 = tensor.extract_slice %1885[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_936 = tensor.extract_slice %1885[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1889 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_936 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1889 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_935 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_937 = tensor.insert_slice %1890 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_938 = tensor.insert_slice %1891 into %inserted_slice_937[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1892 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_938, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1888, %1892 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1886, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_939 = tensor.extract_slice %1886[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_940 = tensor.extract_slice %1886[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_940 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1896 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1895 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1897 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_939 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_941 = tensor.insert_slice %1896 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_942 = tensor.insert_slice %1897 into %inserted_slice_941[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_942, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1894, %1898 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_943 = tensor.dim %arg51, %c2 : tensor<1x32x?x128xf16>
    %1900 = tensor.empty(%dim_943) : tensor<1x32x?x128xf16>
    %1901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg51 : tensor<1x32x?x128xf16>) outs(%1900 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1902 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1899 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1903 = arith.addi %dim_943, %c1 : index
    %1904 = tensor.empty(%1903) : tensor<1x32x?x128xf16>
    %inserted_slice_944 = tensor.insert_slice %1901 into %1904[0, 0, 0, 0] [1, 32, %dim_943, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_945 = tensor.insert_slice %1902 into %inserted_slice_944[0, 0, %dim_943, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_946 = tensor.dim %arg52, %c2 : tensor<1x32x?x128xf16>
    %1905 = tensor.empty(%dim_946) : tensor<1x32x?x128xf16>
    %1906 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg52 : tensor<1x32x?x128xf16>) outs(%1905 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1887 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1908 = arith.addi %dim_946, %c1 : index
    %1909 = tensor.empty(%1908) : tensor<1x32x?x128xf16>
    %inserted_slice_947 = tensor.insert_slice %1906 into %1909[0, 0, 0, 0] [1, 32, %dim_946, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_948 = tensor.insert_slice %1907 into %inserted_slice_947[0, 0, %dim_946, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_949 = tensor.cast %inserted_slice_945 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_949 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_950 = tensor.collapse_shape %1893 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_951 = tensor.collapse_shape %1910 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1911 = linalg.batch_matmul ins(%collapsed_950, %collapsed_951 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_952 = tensor.expand_shape %1911 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_952 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1912, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1914:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1913 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1913, %1914#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1916 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1915 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1917 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1916 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1918 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1916, %1917 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_953 = tensor.collapse_shape %1918 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_954 = tensor.cast %inserted_slice_948 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_955 = tensor.collapse_shape %cast_954 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1919 = linalg.batch_matmul ins(%collapsed_953, %collapsed_955 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_956 = tensor.expand_shape %1919 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1920 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_956 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_957 = tensor.collapse_shape %1920 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_958 = tensor.expand_shape %collapsed_957 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_959 = tensor.expand_shape %cst_44 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_959, %cst_314, %cst_313 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1922 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_958, %1921 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1923 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1869, %1922 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1924 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1923 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1924 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1925 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1927 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1926 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1927 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1928 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1930 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1923, %1929 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1930 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_685, %1931 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_960 = tensor.expand_shape %1932 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_961 = tensor.expand_shape %cst_43 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_961, %cst_312, %cst_311 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1934 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_960, %1933 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1935 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1934 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %1936 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1935, %1934 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_962 = tensor.expand_shape %cst_42 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %1937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_962, %cst_310, %cst_309 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %1938 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_960, %1937 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %1939 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1936, %1938 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_963 = tensor.expand_shape %1939 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_964 = tensor.expand_shape %cst_41 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %1940 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_964, %cst_308, %cst_307 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %1941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_963, %1940 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1942 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1923, %1941 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1942 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1944 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1943 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1945 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1944 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1946 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1945 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1946 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %1948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1947 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %1949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1942, %1948 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %1950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1949 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_684, %1950 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_965 = tensor.expand_shape %1951 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_966 = tensor.expand_shape %cst_40 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_966, %cst_306, %cst_305 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_965, %1952 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_967 = tensor.expand_shape %cst_39 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1954 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_967, %cst_304, %cst_303 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1955 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_965, %1954 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_968 = tensor.expand_shape %cst_38 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1956 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_968, %cst_302, %cst_301 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1957 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_965, %1956 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_969 = tensor.expand_shape %1953 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1958 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_969 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_970 = tensor.expand_shape %1955 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1959 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_970 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_971 = tensor.expand_shape %1957 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %1960 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_971 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1961 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1958, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_972 = tensor.extract_slice %1958[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_973 = tensor.extract_slice %1958[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1962 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_973 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1962 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1964 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_972 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_974 = tensor.insert_slice %1963 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_975 = tensor.insert_slice %1964 into %inserted_slice_974[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1965 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_975, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1961, %1965 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1959, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_976 = tensor.extract_slice %1959[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_977 = tensor.extract_slice %1959[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %1968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_977 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %1969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1968 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %1970 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_976 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_978 = tensor.insert_slice %1969 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_979 = tensor.insert_slice %1970 into %inserted_slice_978[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %1971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_979, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %1972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1967, %1971 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_980 = tensor.dim %arg53, %c2 : tensor<1x32x?x128xf16>
    %1973 = tensor.empty(%dim_980) : tensor<1x32x?x128xf16>
    %1974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg53 : tensor<1x32x?x128xf16>) outs(%1973 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1972 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1976 = arith.addi %dim_980, %c1 : index
    %1977 = tensor.empty(%1976) : tensor<1x32x?x128xf16>
    %inserted_slice_981 = tensor.insert_slice %1974 into %1977[0, 0, 0, 0] [1, 32, %dim_980, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_982 = tensor.insert_slice %1975 into %inserted_slice_981[0, 0, %dim_980, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_983 = tensor.dim %arg54, %c2 : tensor<1x32x?x128xf16>
    %1978 = tensor.empty(%dim_983) : tensor<1x32x?x128xf16>
    %1979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg54 : tensor<1x32x?x128xf16>) outs(%1978 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %1980 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1960 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %1981 = arith.addi %dim_983, %c1 : index
    %1982 = tensor.empty(%1981) : tensor<1x32x?x128xf16>
    %inserted_slice_984 = tensor.insert_slice %1979 into %1982[0, 0, 0, 0] [1, 32, %dim_983, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_985 = tensor.insert_slice %1980 into %inserted_slice_984[0, 0, %dim_983, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_986 = tensor.cast %inserted_slice_982 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %1983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_986 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_987 = tensor.collapse_shape %1966 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_988 = tensor.collapse_shape %1983 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %1984 = linalg.batch_matmul ins(%collapsed_987, %collapsed_988 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_989 = tensor.expand_shape %1984 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %1985 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_989 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %1986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1985, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1987:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1986 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %1988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1986, %1987#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1988 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %1990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1989 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %1991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1989, %1990 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_990 = tensor.collapse_shape %1991 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_991 = tensor.cast %inserted_slice_985 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_992 = tensor.collapse_shape %cast_991 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %1992 = linalg.batch_matmul ins(%collapsed_990, %collapsed_992 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_993 = tensor.expand_shape %1992 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %1993 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_993 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_994 = tensor.collapse_shape %1993 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_995 = tensor.expand_shape %collapsed_994 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_996 = tensor.expand_shape %cst_37 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %1994 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_996, %cst_300, %cst_299 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %1995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_995, %1994 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %1996 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1942, %1995 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %1997 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1996 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1998 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1997 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %1999 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1998 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2000 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1999 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2000 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2002 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2001 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1996, %2002 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2004 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2003 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2005 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_683, %2004 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_997 = tensor.expand_shape %2005 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_998 = tensor.expand_shape %cst_36 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_998, %cst_298, %cst_297 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2007 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_997, %2006 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2008 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2007 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %2009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2008, %2007 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_999 = tensor.expand_shape %cst_35 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_999, %cst_296, %cst_295 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2011 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_997, %2010 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2012 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2009, %2011 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1000 = tensor.expand_shape %2012 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_1001 = tensor.expand_shape %cst_34 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %2013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1001, %cst_294, %cst_293 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %2014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1000, %2013 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2015 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1996, %2014 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2016 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2015 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2016 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2018 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2017 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2019 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2018 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2020 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2019 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2020 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2022 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2015, %2021 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2022 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_682, %2023 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1002 = tensor.expand_shape %2024 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1003 = tensor.expand_shape %cst_33 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1003, %cst_292, %cst_291 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1002, %2025 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1004 = tensor.expand_shape %cst_32 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2027 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1004, %cst_290, %cst_289 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2028 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1002, %2027 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1005 = tensor.expand_shape %cst_31 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1005, %cst_288, %cst_287 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1002, %2029 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1006 = tensor.expand_shape %2026 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1006 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1007 = tensor.expand_shape %2028 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2032 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1007 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1008 = tensor.expand_shape %2030 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2033 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1008 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2034 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2031, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1009 = tensor.extract_slice %2031[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1010 = tensor.extract_slice %2031[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2035 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1010 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2035 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1009 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1011 = tensor.insert_slice %2036 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1012 = tensor.insert_slice %2037 into %inserted_slice_1011[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2038 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1012, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2034, %2038 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2040 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2032, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1013 = tensor.extract_slice %2032[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1014 = tensor.extract_slice %2032[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1014 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2041 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2043 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1013 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1015 = tensor.insert_slice %2042 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1016 = tensor.insert_slice %2043 into %inserted_slice_1015[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2044 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1016, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2040, %2044 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_1017 = tensor.dim %arg55, %c2 : tensor<1x32x?x128xf16>
    %2046 = tensor.empty(%dim_1017) : tensor<1x32x?x128xf16>
    %2047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg55 : tensor<1x32x?x128xf16>) outs(%2046 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2048 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2045 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2049 = arith.addi %dim_1017, %c1 : index
    %2050 = tensor.empty(%2049) : tensor<1x32x?x128xf16>
    %inserted_slice_1018 = tensor.insert_slice %2047 into %2050[0, 0, 0, 0] [1, 32, %dim_1017, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1019 = tensor.insert_slice %2048 into %inserted_slice_1018[0, 0, %dim_1017, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_1020 = tensor.dim %arg56, %c2 : tensor<1x32x?x128xf16>
    %2051 = tensor.empty(%dim_1020) : tensor<1x32x?x128xf16>
    %2052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg56 : tensor<1x32x?x128xf16>) outs(%2051 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2033 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2054 = arith.addi %dim_1020, %c1 : index
    %2055 = tensor.empty(%2054) : tensor<1x32x?x128xf16>
    %inserted_slice_1021 = tensor.insert_slice %2052 into %2055[0, 0, 0, 0] [1, 32, %dim_1020, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1022 = tensor.insert_slice %2053 into %inserted_slice_1021[0, 0, %dim_1020, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_1023 = tensor.cast %inserted_slice_1019 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %2056 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_1023 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1024 = tensor.collapse_shape %2039 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_1025 = tensor.collapse_shape %2056 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2057 = linalg.batch_matmul ins(%collapsed_1024, %collapsed_1025 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_1026 = tensor.expand_shape %2057 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %2058 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1026 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %2059 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2058, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2060:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2059 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %2061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2059, %2060#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2062 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2061 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2062 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %2064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2062, %2063 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_1027 = tensor.collapse_shape %2064 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_1028 = tensor.cast %inserted_slice_1022 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_1029 = tensor.collapse_shape %cast_1028 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2065 = linalg.batch_matmul ins(%collapsed_1027, %collapsed_1029 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_1030 = tensor.expand_shape %2065 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %2066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1030 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_1031 = tensor.collapse_shape %2066 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_1032 = tensor.expand_shape %collapsed_1031 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1033 = tensor.expand_shape %cst_30 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1033, %cst_286, %cst_285 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1032, %2067 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2069 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2015, %2068 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2070 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2069 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2070 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2071 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2073 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2072 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2074 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2073 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2075 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2074 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2076 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2069, %2075 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2076 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2078 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_681, %2077 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1034 = tensor.expand_shape %2078 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1035 = tensor.expand_shape %cst_29 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2079 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1035, %cst_284, %cst_283 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2080 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1034, %2079 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2081 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2080 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %2082 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2081, %2080 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1036 = tensor.expand_shape %cst_28 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2083 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1036, %cst_282, %cst_281 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2084 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1034, %2083 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2082, %2084 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1037 = tensor.expand_shape %2085 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_1038 = tensor.expand_shape %cst_27 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %2086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1038, %cst_280, %cst_279 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %2087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1037, %2086 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2069, %2087 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2088 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2089 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2091 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2090 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2092 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2091 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2092 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2094 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2093 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2095 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2088, %2094 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2096 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2095 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2097 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_680, %2096 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1039 = tensor.expand_shape %2097 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1040 = tensor.expand_shape %cst_26 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2098 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1040, %cst_278, %cst_277 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2099 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1039, %2098 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1041 = tensor.expand_shape %cst_25 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1041, %cst_276, %cst_275 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1039, %2100 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1042 = tensor.expand_shape %cst_24 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1042, %cst_274, %cst_273 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1039, %2102 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1043 = tensor.expand_shape %2099 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1043 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1044 = tensor.expand_shape %2101 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1044 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1045 = tensor.expand_shape %2103 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2106 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1045 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2104, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1046 = tensor.extract_slice %2104[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1047 = tensor.extract_slice %2104[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2108 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1047 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2108 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1046 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1048 = tensor.insert_slice %2109 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1049 = tensor.insert_slice %2110 into %inserted_slice_1048[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2111 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1049, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2107, %2111 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2105, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1050 = tensor.extract_slice %2105[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1051 = tensor.extract_slice %2105[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1051 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2114 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1050 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1052 = tensor.insert_slice %2115 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1053 = tensor.insert_slice %2116 into %inserted_slice_1052[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1053, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2113, %2117 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_1054 = tensor.dim %arg57, %c2 : tensor<1x32x?x128xf16>
    %2119 = tensor.empty(%dim_1054) : tensor<1x32x?x128xf16>
    %2120 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg57 : tensor<1x32x?x128xf16>) outs(%2119 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2118 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2122 = arith.addi %dim_1054, %c1 : index
    %2123 = tensor.empty(%2122) : tensor<1x32x?x128xf16>
    %inserted_slice_1055 = tensor.insert_slice %2120 into %2123[0, 0, 0, 0] [1, 32, %dim_1054, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1056 = tensor.insert_slice %2121 into %inserted_slice_1055[0, 0, %dim_1054, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_1057 = tensor.dim %arg58, %c2 : tensor<1x32x?x128xf16>
    %2124 = tensor.empty(%dim_1057) : tensor<1x32x?x128xf16>
    %2125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg58 : tensor<1x32x?x128xf16>) outs(%2124 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2106 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2127 = arith.addi %dim_1057, %c1 : index
    %2128 = tensor.empty(%2127) : tensor<1x32x?x128xf16>
    %inserted_slice_1058 = tensor.insert_slice %2125 into %2128[0, 0, 0, 0] [1, 32, %dim_1057, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1059 = tensor.insert_slice %2126 into %inserted_slice_1058[0, 0, %dim_1057, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_1060 = tensor.cast %inserted_slice_1056 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %2129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_1060 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1061 = tensor.collapse_shape %2112 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_1062 = tensor.collapse_shape %2129 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2130 = linalg.batch_matmul ins(%collapsed_1061, %collapsed_1062 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_1063 = tensor.expand_shape %2130 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %2131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1063 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %2132 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2131, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2133:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2132 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %2134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2132, %2133#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2134 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2136 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2135 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %2137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2135, %2136 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_1064 = tensor.collapse_shape %2137 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_1065 = tensor.cast %inserted_slice_1059 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_1066 = tensor.collapse_shape %cast_1065 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2138 = linalg.batch_matmul ins(%collapsed_1064, %collapsed_1066 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_1067 = tensor.expand_shape %2138 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %2139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1067 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_1068 = tensor.collapse_shape %2139 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_1069 = tensor.expand_shape %collapsed_1068 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1070 = tensor.expand_shape %cst_23 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1070, %cst_272, %cst_271 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1069, %2140 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2088, %2141 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2142 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2143 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2144 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2145 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2146 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2147 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2142, %2148 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2149 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_679, %2150 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1071 = tensor.expand_shape %2151 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1072 = tensor.expand_shape %cst_22 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1072, %cst_270, %cst_269 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1071, %2152 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2153 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %2155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2154, %2153 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1073 = tensor.expand_shape %cst_21 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1073, %cst_268, %cst_267 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2157 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1071, %2156 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2155, %2157 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1074 = tensor.expand_shape %2158 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_1075 = tensor.expand_shape %cst_20 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %2159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1075, %cst_266, %cst_265 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %2160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1074, %2159 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2142, %2160 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2162 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2161 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2162 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2163 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2164 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2165 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2166 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2161, %2167 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2168 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_678, %2169 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1076 = tensor.expand_shape %2170 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1077 = tensor.expand_shape %cst_19 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1077, %cst_264, %cst_263 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1076, %2171 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1078 = tensor.expand_shape %cst_18 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1078, %cst_262, %cst_261 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1076, %2173 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1079 = tensor.expand_shape %cst_17 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1079, %cst_260, %cst_259 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1076, %2175 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1080 = tensor.expand_shape %2172 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1080 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1081 = tensor.expand_shape %2174 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1081 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1082 = tensor.expand_shape %2176 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1082 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2177, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1083 = tensor.extract_slice %2177[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1084 = tensor.extract_slice %2177[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1084 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2181 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1083 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1085 = tensor.insert_slice %2182 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1086 = tensor.insert_slice %2183 into %inserted_slice_1085[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1086, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2180, %2184 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2178, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1087 = tensor.extract_slice %2178[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1088 = tensor.extract_slice %2178[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1088 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2187 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1087 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1089 = tensor.insert_slice %2188 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1090 = tensor.insert_slice %2189 into %inserted_slice_1089[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1090, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2186, %2190 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_1091 = tensor.dim %arg59, %c2 : tensor<1x32x?x128xf16>
    %2192 = tensor.empty(%dim_1091) : tensor<1x32x?x128xf16>
    %2193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg59 : tensor<1x32x?x128xf16>) outs(%2192 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2191 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2195 = arith.addi %dim_1091, %c1 : index
    %2196 = tensor.empty(%2195) : tensor<1x32x?x128xf16>
    %inserted_slice_1092 = tensor.insert_slice %2193 into %2196[0, 0, 0, 0] [1, 32, %dim_1091, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1093 = tensor.insert_slice %2194 into %inserted_slice_1092[0, 0, %dim_1091, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_1094 = tensor.dim %arg60, %c2 : tensor<1x32x?x128xf16>
    %2197 = tensor.empty(%dim_1094) : tensor<1x32x?x128xf16>
    %2198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg60 : tensor<1x32x?x128xf16>) outs(%2197 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2179 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2200 = arith.addi %dim_1094, %c1 : index
    %2201 = tensor.empty(%2200) : tensor<1x32x?x128xf16>
    %inserted_slice_1095 = tensor.insert_slice %2198 into %2201[0, 0, 0, 0] [1, 32, %dim_1094, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1096 = tensor.insert_slice %2199 into %inserted_slice_1095[0, 0, %dim_1094, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_1097 = tensor.cast %inserted_slice_1093 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %2202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_1097 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1098 = tensor.collapse_shape %2185 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_1099 = tensor.collapse_shape %2202 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2203 = linalg.batch_matmul ins(%collapsed_1098, %collapsed_1099 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_1100 = tensor.expand_shape %2203 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %2204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1100 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %2205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2204, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2206:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2205 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %2207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2205, %2206#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2207 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2208 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %2210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2208, %2209 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_1101 = tensor.collapse_shape %2210 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_1102 = tensor.cast %inserted_slice_1096 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_1103 = tensor.collapse_shape %cast_1102 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2211 = linalg.batch_matmul ins(%collapsed_1101, %collapsed_1103 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_1104 = tensor.expand_shape %2211 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %2212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1104 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_1105 = tensor.collapse_shape %2212 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_1106 = tensor.expand_shape %collapsed_1105 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1107 = tensor.expand_shape %cst_16 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1107, %cst_258, %cst_257 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1106, %2213 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2161, %2214 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2215 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2216 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2217 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2218 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2219 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2220 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2215, %2221 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2222 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_677, %2223 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1108 = tensor.expand_shape %2224 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1109 = tensor.expand_shape %cst_15 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1109, %cst_256, %cst_255 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1108, %2225 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2226 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %2228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2227, %2226 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1110 = tensor.expand_shape %cst_14 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1110, %cst_254, %cst_253 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2230 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1108, %2229 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2228, %2230 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1111 = tensor.expand_shape %2231 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_1112 = tensor.expand_shape %cst_13 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %2232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1112, %cst_252, %cst_251 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %2233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1111, %2232 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2215, %2233 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2234 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2235 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2236 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2237 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2238 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2239 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2234, %2240 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2241 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_676, %2242 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1113 = tensor.expand_shape %2243 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1114 = tensor.expand_shape %cst_12 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1114, %cst_250, %cst_249 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1113, %2244 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1115 = tensor.expand_shape %cst_11 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1115, %cst_248, %cst_247 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1113, %2246 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1116 = tensor.expand_shape %cst_10 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1116, %cst_246, %cst_245 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1113, %2248 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1117 = tensor.expand_shape %2245 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1117 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1118 = tensor.expand_shape %2247 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1118 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1119 = tensor.expand_shape %2249 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1119 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2250, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1120 = tensor.extract_slice %2250[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1121 = tensor.extract_slice %2250[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2254 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1121 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2254 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2256 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1120 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1122 = tensor.insert_slice %2255 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1123 = tensor.insert_slice %2256 into %inserted_slice_1122[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1123, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2253, %2257 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2251, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1124 = tensor.extract_slice %2251[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1125 = tensor.extract_slice %2251[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1125 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2260 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1124 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1126 = tensor.insert_slice %2261 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1127 = tensor.insert_slice %2262 into %inserted_slice_1126[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1127, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2259, %2263 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_1128 = tensor.dim %arg61, %c2 : tensor<1x32x?x128xf16>
    %2265 = tensor.empty(%dim_1128) : tensor<1x32x?x128xf16>
    %2266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg61 : tensor<1x32x?x128xf16>) outs(%2265 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2264 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2268 = arith.addi %dim_1128, %c1 : index
    %2269 = tensor.empty(%2268) : tensor<1x32x?x128xf16>
    %inserted_slice_1129 = tensor.insert_slice %2266 into %2269[0, 0, 0, 0] [1, 32, %dim_1128, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1130 = tensor.insert_slice %2267 into %inserted_slice_1129[0, 0, %dim_1128, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_1131 = tensor.dim %arg62, %c2 : tensor<1x32x?x128xf16>
    %2270 = tensor.empty(%dim_1131) : tensor<1x32x?x128xf16>
    %2271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg62 : tensor<1x32x?x128xf16>) outs(%2270 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2252 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2273 = arith.addi %dim_1131, %c1 : index
    %2274 = tensor.empty(%2273) : tensor<1x32x?x128xf16>
    %inserted_slice_1132 = tensor.insert_slice %2271 into %2274[0, 0, 0, 0] [1, 32, %dim_1131, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1133 = tensor.insert_slice %2272 into %inserted_slice_1132[0, 0, %dim_1131, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_1134 = tensor.cast %inserted_slice_1130 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %2275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_1134 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1135 = tensor.collapse_shape %2258 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_1136 = tensor.collapse_shape %2275 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2276 = linalg.batch_matmul ins(%collapsed_1135, %collapsed_1136 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_1137 = tensor.expand_shape %2276 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %2277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1137 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %2278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2277, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2279:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2278 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %2280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2278, %2279#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2280 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2281 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %2283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2281, %2282 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_1138 = tensor.collapse_shape %2283 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_1139 = tensor.cast %inserted_slice_1133 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_1140 = tensor.collapse_shape %cast_1139 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2284 = linalg.batch_matmul ins(%collapsed_1138, %collapsed_1140 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_1141 = tensor.expand_shape %2284 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %2285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1141 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_1142 = tensor.collapse_shape %2285 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_1143 = tensor.expand_shape %collapsed_1142 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1144 = tensor.expand_shape %cst_9 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1144, %cst_244, %cst_243 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1143, %2286 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2234, %2287 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2288 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2289 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2290 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2291 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2292 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2293 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2288, %2294 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2295 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_675, %2296 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1145 = tensor.expand_shape %2297 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1146 = tensor.expand_shape %cst_8 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2298 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1146, %cst_242, %cst_241 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2299 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1145, %2298 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2299 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %2301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2300, %2299 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1147 = tensor.expand_shape %cst_7 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1147, %cst_240, %cst_239 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1145, %2302 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2301, %2303 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1148 = tensor.expand_shape %2304 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_1149 = tensor.expand_shape %cst_6 [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %2305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1149, %cst_238, %cst_237 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %2306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1148, %2305 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2288, %2306 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2308 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2307 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2308 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2309 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2310 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2311 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2312 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2307, %2313 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2314 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_674, %2315 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1150 = tensor.expand_shape %2316 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1151 = tensor.expand_shape %cst_5 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1151, %cst_236, %cst_235 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1150, %2317 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1152 = tensor.expand_shape %cst_4 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1152, %cst_234, %cst_233 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1150, %2319 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1153 = tensor.expand_shape %cst_3 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1153, %cst_232, %cst_231 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1150, %2321 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1154 = tensor.expand_shape %2318 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1154 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1155 = tensor.expand_shape %2320 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1155 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %expanded_1156 = tensor.expand_shape %2322 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %2325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1156 : tensor<1x1x32x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2323, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1157 = tensor.extract_slice %2323[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1158 = tensor.extract_slice %2323[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1158 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2327 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1157 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1159 = tensor.insert_slice %2328 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1160 = tensor.insert_slice %2329 into %inserted_slice_1159[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1160, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2326, %2330 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2332 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2324, %expanded_10 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %extracted_slice_1161 = tensor.extract_slice %2324[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %extracted_slice_1162 = tensor.extract_slice %2324[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x128xf16> to tensor<1x32x1x64xf16>
    %2333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1162 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x64xf16>
    %2334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2333 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %2335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_1161 : tensor<1x32x1x64xf16>) outs(%47 : tensor<1x32x1x64xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x64xf16>
    %inserted_slice_1163 = tensor.insert_slice %2334 into %39[0, 0, 0, 0] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %inserted_slice_1164 = tensor.insert_slice %2335 into %inserted_slice_1163[0, 0, 0, 64] [1, 32, 1, 64] [1, 1, 1, 1] : tensor<1x32x1x64xf16> into tensor<1x32x1x128xf16>
    %2336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%inserted_slice_1164, %expanded_11 : tensor<1x32x1x128xf16>, tensor<1x1x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %2337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2332, %2336 : tensor<1x32x1x128xf16>, tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x128xf16>
    %dim_1165 = tensor.dim %arg63, %c2 : tensor<1x32x?x128xf16>
    %2338 = tensor.empty(%dim_1165) : tensor<1x32x?x128xf16>
    %2339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg63 : tensor<1x32x?x128xf16>) outs(%2338 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2337 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2341 = arith.addi %dim_1165, %c1 : index
    %2342 = tensor.empty(%2341) : tensor<1x32x?x128xf16>
    %inserted_slice_1166 = tensor.insert_slice %2339 into %2342[0, 0, 0, 0] [1, 32, %dim_1165, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1167 = tensor.insert_slice %2340 into %inserted_slice_1166[0, 0, %dim_1165, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %dim_1168 = tensor.dim %arg64, %c2 : tensor<1x32x?x128xf16>
    %2343 = tensor.empty(%dim_1168) : tensor<1x32x?x128xf16>
    %2344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%arg64 : tensor<1x32x?x128xf16>) outs(%2343 : tensor<1x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x?x128xf16>
    %2345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2325 : tensor<1x32x1x128xf16>) outs(%39 : tensor<1x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x1x128xf16>
    %2346 = arith.addi %dim_1168, %c1 : index
    %2347 = tensor.empty(%2346) : tensor<1x32x?x128xf16>
    %inserted_slice_1169 = tensor.insert_slice %2344 into %2347[0, 0, 0, 0] [1, 32, %dim_1168, 128] [1, 1, 1, 1] : tensor<1x32x?x128xf16> into tensor<1x32x?x128xf16>
    %inserted_slice_1170 = tensor.insert_slice %2345 into %inserted_slice_1169[0, 0, %dim_1168, 0] [1, 32, 1, 128] [1, 1, 1, 1] : tensor<1x32x1x128xf16> into tensor<1x32x?x128xf16>
    %cast_1171 = tensor.cast %inserted_slice_1167 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %2348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%cast_1171 : tensor<1x32x?x128xf16>) outs(%69 : tensor<1x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x32x128x?xf16>
    %collapsed_1172 = tensor.collapse_shape %2331 [[0, 1], [2], [3]] : tensor<1x32x1x128xf16> into tensor<32x1x128xf16>
    %collapsed_1173 = tensor.collapse_shape %2348 [[0, 1], [2], [3]] : tensor<1x32x128x?xf16> into tensor<32x128x?xf16>
    %2349 = linalg.batch_matmul ins(%collapsed_1172, %collapsed_1173 : tensor<32x1x128xf16>, tensor<32x128x?xf16>) outs(%72 : tensor<32x1x?xf16>) -> tensor<32x1x?xf16>
    %expanded_1174 = tensor.expand_shape %2349 [[0, 1], [2], [3]] : tensor<32x1x?xf16> into tensor<1x32x1x?xf16>
    %2350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1174 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.truncf %cst_746 : f64 to f16
      %2396 = arith.divf %in, %2395 : f16
      linalg.yield %2396 : f16
    } -> tensor<1x32x1x?xf16>
    %2351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2350, %18 : tensor<1x32x1x?xf16>, tensor<1x1x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2352:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2351 : tensor<1x32x1x?xf16>) outs(%80, %78 : tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>) {
    ^bb0(%in: f16, %out: f16, %out_1189: i64):
      %2395 = linalg.index 3 : index
      %2396 = arith.index_cast %2395 : index to i64
      %2397 = arith.maximumf %in, %out : f16
      %2398 = arith.cmpf ogt, %in, %out : f16
      %2399 = arith.select %2398, %2396, %out_1189 : i64
      linalg.yield %2397, %2399 : f16, i64
    } -> (tensor<1x32x1x1xf16>, tensor<1x32x1x1xi64>)
    %2353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2351, %2352#0 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.subf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2353 : tensor<1x32x1x?xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = math.exp %in : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %2355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2354 : tensor<1x32x1x?xf16>) outs(%84 : tensor<1x32x1x1xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.addf %in, %out : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x1xf16>
    %2356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2354, %2355 : tensor<1x32x1x?xf16>, tensor<1x32x1x1xf16>) outs(%74 : tensor<1x32x1x?xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.divf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x32x1x?xf16>
    %collapsed_1175 = tensor.collapse_shape %2356 [[0, 1], [2], [3]] : tensor<1x32x1x?xf16> into tensor<32x1x?xf16>
    %cast_1176 = tensor.cast %inserted_slice_1170 : tensor<1x32x?x128xf16> to tensor<1x32x?x128xf16>
    %collapsed_1177 = tensor.collapse_shape %cast_1176 [[0, 1], [2], [3]] : tensor<1x32x?x128xf16> into tensor<32x?x128xf16>
    %2357 = linalg.batch_matmul ins(%collapsed_1175, %collapsed_1177 : tensor<32x1x?xf16>, tensor<32x?x128xf16>) outs(%88 : tensor<32x1x128xf16>) -> tensor<32x1x128xf16>
    %expanded_1178 = tensor.expand_shape %2357 [[0, 1], [2], [3]] : tensor<32x1x128xf16> into tensor<1x32x1x128xf16>
    %2358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1178 : tensor<1x32x1x128xf16>) outs(%90 : tensor<1x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x1x32x128xf16>
    %collapsed_1179 = tensor.collapse_shape %2358 [[0], [1], [2, 3]] : tensor<1x1x32x128xf16> into tensor<1x1x4096xf16>
    %expanded_1180 = tensor.expand_shape %collapsed_1179 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1181 = tensor.expand_shape %cst_2 [[0], [1, 2]] : tensor<4096x4096xi4> into tensor<4096x32x128xi4>
    %2359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1181, %cst_230, %cst_229 : tensor<4096x32x128xi4>, tensor<4096x32x1xf16>, tensor<4096x32x1xf16>) outs(%31 : tensor<4096x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x32x128xf16>
    %2360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1180, %2359 : tensor<1x1x32x128xf16>, tensor<4096x32x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2307, %2360 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2361 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2362 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2363 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2364 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2365 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2366 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2361, %2367 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2368 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_673, %2369 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %expanded_1182 = tensor.expand_shape %2370 [[0], [1], [2, 3]] : tensor<1x1x4096xf16> into tensor<1x1x32x128xf16>
    %expanded_1183 = tensor.expand_shape %cst_1 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1183, %cst_228, %cst_227 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2372 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1182, %2371 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2372 : tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2395 = arith.negf %in : f16
      %2396 = math.exp %2395 : f16
      %2397 = arith.addf %2396, %cst_743 : f16
      %2398 = arith.divf %cst_743, %2397 : f16
      linalg.yield %2398 : f16
    } -> tensor<1x1x11008xf16>
    %2374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2373, %2372 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1184 = tensor.expand_shape %cst_0 [[0], [1, 2]] : tensor<11008x4096xi4> into tensor<11008x32x128xi4>
    %2375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1184, %cst_226, %cst_225 : tensor<11008x32x128xi4>, tensor<11008x32x1xf16>, tensor<11008x32x1xf16>) outs(%104 : tensor<11008x32x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<11008x32x128xf16>
    %2376 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1182, %2375 : tensor<1x1x32x128xf16>, tensor<11008x32x128xf16>) outs(%106 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x11008xf16>
    %2377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2374, %2376 : tensor<1x1x11008xf16>, tensor<1x1x11008xf16>) outs(%105 : tensor<1x1x11008xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x11008xf16>
    %expanded_1185 = tensor.expand_shape %2377 [[0], [1], [2, 3]] : tensor<1x1x11008xf16> into tensor<1x1x86x128xf16>
    %expanded_1186 = tensor.expand_shape %cst [[0], [1, 2]] : tensor<4096x11008xi4> into tensor<4096x86x128xi4>
    %2378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1186, %cst_224, %cst_223 : tensor<4096x86x128xi4>, tensor<4096x86x1xf16>, tensor<4096x86x1xf16>) outs(%114 : tensor<4096x86x128xf16>) {
    ^bb0(%in: i4, %in_1189: f16, %in_1190: f16, %out: f16):
      %2395 = arith.extui %in : i4 to i32
      %2396 = arith.uitofp %2395 : i32 to f16
      %2397 = arith.subf %2396, %in_1190 : f16
      %2398 = arith.mulf %2397, %in_1189 : f16
      linalg.yield %2398 : f16
    } -> tensor<4096x86x128xf16>
    %2379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d2, d3, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction", "reduction"]} ins(%expanded_1185, %2378 : tensor<1x1x86x128xf16>, tensor<4096x86x128xf16>) outs(%32 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      %2396 = arith.addf %2395, %out : f16
      linalg.yield %2396 : f16
    } -> tensor<1x1x4096xf16>
    %2380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2361, %2379 : tensor<1x1x4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.addf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2380 : tensor<1x1x4096xf16>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2381 : tensor<1x1x4096xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.powf %in, %cst_747 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x4096xf32>
    %2383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2382 : tensor<1x1x4096xf32>) outs(%23 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.addf %in, %out : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2383 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.divf %in, %cst_748 : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2384 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = arith.truncf %cst_745 : f64 to f32
      %2396 = arith.addf %in, %2395 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x1xf32>
    %2386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2385 : tensor<1x1x1xf32>) outs(%22 : tensor<1x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2395 = math.rsqrt %in : f32
      linalg.yield %2395 : f32
    } -> tensor<1x1x1xf32>
    %2387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2380, %2386 : tensor<1x1x4096xf16>, tensor<1x1x1xf32>) outs(%19 : tensor<1x1x4096xf32>) {
    ^bb0(%in: f16, %in_1189: f32, %out: f32):
      %2395 = arith.extf %in : f16 to f32
      %2396 = arith.mulf %2395, %in_1189 : f32
      linalg.yield %2396 : f32
    } -> tensor<1x1x4096xf32>
    %2388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2387 : tensor<1x1x4096xf32>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2395 = arith.truncf %in : f32 to f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_672, %2388 : tensor<4096xf16>, tensor<1x1x4096xf16>) outs(%5 : tensor<1x1x4096xf16>) {
    ^bb0(%in: f16, %in_1189: f16, %out: f16):
      %2395 = arith.mulf %in, %in_1189 : f16
      linalg.yield %2395 : f16
    } -> tensor<1x1x4096xf16>
    %2390 = tensor.empty() : tensor<4096x32000xf16>
    %2391 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%cst_671 : tensor<32000x4096xf16>) outs(%2390 : tensor<4096x32000xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x32000xf16>
    %collapsed_1187 = tensor.collapse_shape %2389 [[0], [1, 2]] : tensor<1x1x4096xf16> into tensor<1x4096xf16>
    %2392 = tensor.empty() : tensor<1x32000xf16>
    %2393 = linalg.fill ins(%cst_740 : f16) outs(%2392 : tensor<1x32000xf16>) -> tensor<1x32000xf16>
    %2394 = linalg.matmul ins(%collapsed_1187, %2391 : tensor<1x4096xf16>, tensor<4096x32000xf16>) outs(%2393 : tensor<1x32000xf16>) -> tensor<1x32000xf16>
    %expanded_1188 = tensor.expand_shape %2394 [[0], [1, 2]] : tensor<1x32000xf16> into tensor<1x1x32000xf16>
    return %expanded_1188, %inserted_slice_21, %inserted_slice_24, %inserted_slice_57, %inserted_slice_60, %inserted_slice_94, %inserted_slice_97, %inserted_slice_131, %inserted_slice_134, %inserted_slice_168, %inserted_slice_171, %inserted_slice_205, %inserted_slice_208, %inserted_slice_242, %inserted_slice_245, %inserted_slice_279, %inserted_slice_282, %inserted_slice_316, %inserted_slice_319, %inserted_slice_353, %inserted_slice_356, %inserted_slice_390, %inserted_slice_393, %inserted_slice_427, %inserted_slice_430, %inserted_slice_464, %inserted_slice_467, %inserted_slice_501, %inserted_slice_504, %inserted_slice_538, %inserted_slice_541, %inserted_slice_575, %inserted_slice_578, %inserted_slice_612, %inserted_slice_615, %inserted_slice_649, %inserted_slice_652, %inserted_slice_686, %inserted_slice_689, %inserted_slice_723, %inserted_slice_726, %inserted_slice_760, %inserted_slice_763, %inserted_slice_797, %inserted_slice_800, %inserted_slice_834, %inserted_slice_837, %inserted_slice_871, %inserted_slice_874, %inserted_slice_908, %inserted_slice_911, %inserted_slice_945, %inserted_slice_948, %inserted_slice_982, %inserted_slice_985, %inserted_slice_1019, %inserted_slice_1022, %inserted_slice_1056, %inserted_slice_1059, %inserted_slice_1093, %inserted_slice_1096, %inserted_slice_1130, %inserted_slice_1133, %inserted_slice_1167, %inserted_slice_1170 : tensor<1x1x32000xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>, tensor<1x32x?x128xf16>
  }
}